<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>ITSMChangeManagement</Name>
    <Version>2.0.3</Version>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2010-06-22 19:31:21" Version="2.0.3">Build for OTRS::ITSM 2.0.3.</ChangeLog>
    <ChangeLog Date="2010-04-28 03:01:09" Version="2.0.2">Build for OTRS::ITSM 2.0.2.</ChangeLog>
    <ChangeLog Date="2010-03-22 12:49:18" Version="2.0.1">Build for OTRS::ITSM 2.0.1.</ChangeLog>
    <ChangeLog Date="2010-03-15 13:50:35" Version="1.3.94">Build for OTRS::ITSM 2.0.0 rc1.</ChangeLog>
    <ChangeLog Date="2010-03-01 16:44:17" Version="1.3.93">Build for OTRS::ITSM 2.0.0 beta3.</ChangeLog>
    <ChangeLog Date="2010-02-15 13:27:50" Version="1.3.92">Build for OTRS::ITSM 2.0.0 beta2.</ChangeLog>
    <ChangeLog Date="2010-02-01 15:21:11" Version="1.3.91">Build for OTRS::ITSM 2.0.0 beta1.</ChangeLog>
    <Description Lang="en">The OTRS::ITSM Change Management package.</Description>
    <Description Lang="de">Das OTRS::ITSM Change Management Paket.</Description>
    <Framework>2.4.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;WELCOME&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        You are about to install the OTRS package ITSMChangeManagement.&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;REQUIRED OTRS PACKAGES&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 2.0.3&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroInstall Lang="de" Title="Installation Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;WILLKOMMEN&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Sie sind im Begriff das OTRS-Paket ITSMChangeManagement zu installieren.&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;BENÖTIGTE OTRS-PAKETE&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 2.0.3&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroInstall Lang="en" Title="Installation Information" Type="post">

        &lt;br&gt;
        &lt;b&gt;NOTICE&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        In order to grant users access to the change menu, you need to add them as member to the group 'itsm-change'.
        &lt;br&gt;
        &lt;br&gt;
        The menu items that were added by this package will be visible after you log-in to the system again.
        &lt;br&gt;
        &lt;br&gt;
        To get notified about Change Management related time events (such as ChangePlannedStartTimeReached),
        you need to copy the file cron/itsmchange_check.dist to cron/itsmchange_check (copy, not rename!).
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroInstall Lang="de" Title="Installation Information" Type="post">

        &lt;br&gt;
        &lt;b&gt;HINWEIS&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Um Benutzern Zugriff auf das Change-Menü zu gewähren, müssen diese Mitglied der neuen Gruppe 'itsm-change' sein.
        &lt;br&gt;
        &lt;br&gt;
        Die von diesem Paket hinzugefügten Menü-Punkte sind erst nach einem erneuten Anmeldevorgang im System sichtbar.
        &lt;br&gt;
        &lt;br&gt;
        Um über für das Change Management relevante Time-Events (wie z. B. ChangePlannedStartTimeReached)
        informiert zu werden, müssen Sie die Datei cron/itsmchange_check.dist nach cron/itsmchange_check kopieren
        (nicht umbenennen!).
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroInstall>
    <IntroUninstall Lang="en" Title="Uninstallation Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;ATTENTION&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        If you uninstall this package, all database tables that were created during installation will be deleted.
        All data from these tables will be irrevocably lost!
        &lt;br&gt;
        &lt;br&gt;
        The groups 'itsm-change', 'itsm-change-builder' and 'itsm-change-manager' that were created during package installation will be deactivated.
        You can activate these groups again in the admin area.
        &lt;br&gt;
        &lt;br&gt;
        All links to change objects and workorder objects will be irrevocably deleted!
        &lt;br&gt;
        &lt;br&gt;
        The statistics that are associated with this package, will no longer be available if the package is uninstalled.
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUninstall>
    <IntroUninstall Lang="de" Title="Uninstallation Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;ACHTUNG&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Bei der Deinstallation werden die von diesem Paket angelegten Datenbank-Tabellen gelöscht.
        Alle darin enthaltenen Daten gehen unwiderruflich verloren!
        &lt;br&gt;
        &lt;br&gt;
        Die von diesem Paket angelegten Gruppen 'itsm-change', 'itsm-change-builder' und 'itsm-change-manager' werden deaktiviert.
        Sie können jederzeit im Admin-Bereich wieder aktiviert werden.
        &lt;br&gt;
        &lt;br&gt;
        Alle Verknüpfungen zu Change-Objekten und zu Workorder-Objekten werden unwiderruflich gelöscht!
        &lt;br&gt;
        &lt;br&gt;
        Nach der Deinstallation sind die zu diesem Paket zugehörigen Statistiken nicht mehr verfügbar.
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUninstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;WELCOME&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        You are about to upgrade the OTRS package ITSMChangeManagement.&lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;Attention:&lt;/b&gt;&lt;br&gt;
        If you are upgrading from 1.3.91 (Beta 1) or 1.3.92 (Beta 2),
        all notification texts will be replaced automatically.
        This is necessary due to several bugfixes.
        Changes, that have been made to the notification texts, will be lost!
        &lt;br&gt;
        Also, if you are upgrading from 1.3.91 (Beta 1) all existing templates will be deleted.
        This is because the internal structure of the template system had to changed prior to 1.3.92 (Beta 2).
        &lt;br&gt;
        &lt;br&gt;
        To get notified about Change Management related time events (such as ChangePlannedStartTimeReached),
        you need to copy the file cron/itsmchange_check.dist to cron/itsmchange_check (copy, not rename!).
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;REQUIRED OTRS PACKAGES&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 2.0.3&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUpgrade>
    <IntroUpgrade Lang="de" Title="Upgrade Information" Type="pre">

        &lt;br&gt;
        &lt;b&gt;WILLKOMMEN&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Sie sind im Begriff das OTRS-Paket ITSMChangeManagement zu aktualisieren.&lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;Achtung:&lt;/b&gt;&lt;br&gt;
        Wenn Sie ausgehend von 1.3.91 (Beta 1) oder 1.3.92 (Beta2) aktualisieren,
        werden aufgrund zahlreicher Bugfixes die Benachrichtigungstexte neu installiert.
        Evtl. von Ihnen durchgeführte Änderungen an den Benachrichtigungstexten gehen dabei verloren!
        &lt;br&gt;
        Wenn Sie ausgehend von 1.3.91 (Beta 1) aktualisieren, werden die erstellten Vorlagen
        gelöscht. Dies ist notwendig, weil die interne Struktur der Vorlagen zur Version 1.3.92 geändert wurde.
        &lt;br&gt;
        &lt;br&gt;
        Um über für das Change Management relevante Time-Events (wie z. B. ChangePlannedStartTimeReached)
        informiert zu werden, müssen Sie die Datei cron/itsmchange_check.dist nach cron/itsmchange_check kopieren
        (nicht umbenennen!).
        &lt;br&gt;
        &lt;br&gt;
        &lt;b&gt;BENÖTIGTE OTRS-PAKETE&lt;/b&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 2.0.3&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;

    </IntroUpgrade>
    <PackageRequired Version="2.0.3">ITSMCore</PackageRequired>
    <CodeInstall Type="post">

        # define function name
        my $FunctionName = 'CodeInstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );

            if ($CodeObject) {

                # start method
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;,
                    );
                }
            }

            # error handling
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;,
                );
            }
        }

    </CodeInstall>
    <CodeUpgrade Type="post">

        # define function name
        my $FunctionName = 'CodeUpgrade';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # The code module has just recently been copied to it's location in the file system.
        # In a persistent Perl environment an old version of the module might still be loaded,
        # as watchdogs like Apache2::Reload haven't had a chance to reload it.
        # So we need to make sure that the new version is being loaded.
        # Kernel::System::Main::Require() checks the relative file path, so we need to remove that from %INC.
        # This is only needed in persistent Perl environment, but does no harm in a CGI environment.
        my $CodeModulePath = $CodeModule;
        $CodeModulePath =~ s/::/\//g;
        $CodeModulePath .= '.pm';
        delete $INC{$CodeModulePath};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;,
                    );
                }
            }

            # error handling
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;,
                );
            }
        }

    </CodeUpgrade>
    <CodeUpgrade Type="post" Version="2.0.3">

        # define function name
        my $FunctionName = 'CodeUpgradeFromLowerThan_2_0_3';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;
                    );
                }
            }

            # error handling
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;
                );
            }
        }

    </CodeUpgrade>
    <CodeUpgrade Type="post" Version="1.3.92">

        # define function name
        my $FunctionName = 'CodeUpgradeFromBeta1';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );

            if ($CodeObject) {

                # start method
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;
                    );
                }
            }

            # error handling
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;
                );
            }
        }

    </CodeUpgrade>
    <CodeUpgrade Type="post" Version="1.3.93">

        # define function name
        my $FunctionName = 'CodeUpgradeFromBeta2';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;
                    );
                }
            }

            # error handling
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;
                );
            }
        }

    </CodeUpgrade>
    <CodeUninstall Type="pre">

        # define function name
        my $FunctionName = 'CodeUninstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;,
                    );
                }
            }

            # error handling
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;,
                );
            }
        }

    </CodeUninstall>
    <CodeUninstall Type="post">

        # cleanup stats list
        {

            # load required modules
            $Self-&gt;{MainObject}-&gt;Require('Kernel::System::CSV');
            $Self-&gt;{MainObject}-&gt;Require('Kernel::System::Group');
            $Self-&gt;{MainObject}-&gt;Require('Kernel::System::User');
            $Self-&gt;{MainObject}-&gt;Require('Kernel::System::Stats');

            # create needed objects
            $Self-&gt;{CSVObject}   = Kernel::System::CSV-&gt;new( %{$Self} );
            $Self-&gt;{GroupObject} = Kernel::System::Group-&gt;new( %{$Self} );
            $Self-&gt;{UserObject}  = Kernel::System::User-&gt;new( %{$Self} );
            $Self-&gt;{StatsObject} = Kernel::System::Stats-&gt;new(
                %{$Self},
                UserID =&gt; 1,
            );

            # cleanup stats list
            $Self-&gt;{StatsObject}-&gt;StatsCleanUp();
        }

    </CodeUninstall>
    <CodeReinstall Type="post">

        # define function name
        my $FunctionName = 'CodeReinstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;,
                    );
                }
            }

            # error handling
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;,
                );
            }
        }

    </CodeReinstall>
    <BuildDate>2010-06-22 19:31:22</BuildDate>
    <BuildHost>opms.otrs.com</BuildHost>
    <Filelist>
        <File Location="bin/otrs.ITSMChangesCheck.pl" Permission="755" Encode="Base64"></File>
        <File Location="doc/itsm-change-management-database.png" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Config/Files/ITSMChangeManagement.xml" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/de_ITSMChangeManagement.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9kZV9JVFNNQ2hhbmdlTWFuYWdlbWVudC5wbSAtIHRoZSBnZXJtYW4gdHJhbnNsYXRpb24gb2YgSVRTTUNoYW5nZU1hbmFnZW1lbnQKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IGRlX0lUU01DaGFuZ2VNYW5hZ2VtZW50LnBtLHYgMS43NSAyMDEwLzA1LzE4IDE1OjAyOjQ0IHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TGFuZ3VhZ2U6OmRlX0lUU01DaGFuZ2VNYW5hZ2VtZW50OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS43NSAkKSBbMV07CgpzdWIgRGF0YSB7CiAgICBteSAkU2VsZiA9IHNoaWZ0OwoKICAgIG15ICRMYW5nID0gJFNlbGYtPntUcmFuc2xhdGlvbn07CgogICAgcmV0dXJuIGlmIHJlZiAkTGFuZyBuZSAnSEFTSCc7CgogICAgIyBtaXNjCiAgICAkTGFuZy0+eydBIGNoYW5nZSBtdXN0IGhhdmUgYSB0aXRsZSEnfSAgICAgICAgICA9ICdFaW4gQ2hhbmdlIGJlbvZ0aWd0IGVpbmVuIFRpdGVsISc7CiAgICAkTGFuZy0+eydUZW1wbGF0ZSBOYW1lJ30gICAgICAgICAgICAgICAgICAgICAgICA9ICdWb3JsYWdlbi1OYW1lJzsKICAgICRMYW5nLT57J1RlbXBsYXRlcyd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1ZvcmxhZ2VuJzsKICAgICRMYW5nLT57J0Egd29ya29yZGVyIG11c3QgaGF2ZSBhIHRpdGxlISd9ICAgICAgID0gJ0VpbmUgV29ya29yZGVyIGJlbvZ0aWd0IGVpbmVuIFRpdGVsISc7CiAgICAkTGFuZy0+eydDbGVhcid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdM9nNjaGUnOwogICAgJExhbmctPnsnQ3JlYXRlIGEgY2hhbmdlIGZyb20gdGhpcyB0aWNrZXQhJ30gICAgPSAnRWluZW4gQ2hhbmdlIGF1cyBkaWVzZW0gVGlja2V0IGVyc3RlbGxlbiEnOwogICAgJExhbmctPnsnQ3JlYXRlIENoYW5nZSd9ICAgICAgICAgICAgICAgICAgICAgICAgPSAnQ2hhbmdlIGVyc3RlbGxlbic7CiAgICAkTGFuZy0+eydlLmcuJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICd6LiBCLic7CiAgICAkTGFuZy0+eydTYXZlIENoYW5nZSBhcyB0ZW1wbGF0ZSd9ICAgICAgICAgICAgICA9ICdTcGVpY2hlcmUgQ2hhbmdlIGFscyBWb3JsYWdlJzsKICAgICRMYW5nLT57J1NhdmUgV29ya29yZGVyIGFzIHRlbXBsYXRlJ30gICAgICAgICAgID0gJ1NwZWljaGVyZSBXb3Jrb3JkZXIgYWxzIFZvcmxhZ2UnOwogICAgJExhbmctPnsnU2F2ZSBDaGFuZ2UgQ0FCIGFzIHRlbXBsYXRlJ30gICAgICAgICAgPSAnU3BlaWNoZXJlIENoYW5nZSBDQUIgYWxzIFZvcmxhZ2UnOwogICAgJExhbmctPnsnTmV3IHRpbWUnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnTmV1ZSBaZWl0JzsKICAgICRMYW5nLT57J1JlcXVlc3RlZCAoYnkgY3VzdG9tZXIpIERhdGUnfSAgICAgICAgID0gJ1d1bnNjaHRlcm1pbiAoZGVzIEt1bmRlbiknOwogICAgJExhbmctPnsnVGhlIHBsYW5uZWQgZW5kIHRpbWUgaXMgaW52YWxpZCEnfSAgICAgPSAnRGllIGdlcGxhbnRlIEVuZHplaXQgaXN0IHVuZ/xsdGlnISc7CiAgICAkTGFuZy0+eydUaGUgcGxhbm5lZCBzdGFydCB0aW1lIGlzIGludmFsaWQhJ30gICA9ICdEaWUgZ2VwbGFudGUgU3RhcnR6ZWl0IGlzdCB1bmf8bHRpZyEnOwogICAgJExhbmctPnsnVGhlIHBsYW5uZWQgc3RhcnQgdGltZSBtdXN0IGJlIGJlZm9yZSB0aGUgcGxhbm5lZCBlbmQgdGltZSEnfQogICAgICAgID0gJ0RlciBnZXBsYW50ZSBTdGFydCBtdXNzIHZvciBkZW0gZ2VwbGFudGVuIEVuZGUgbGllZ2VuISc7CiAgICAkTGFuZy0+eydUaGUgcmVxdWVzdGVkIHRpbWUgaXMgaW52YWxpZCEnfSAgICAgICA9ICdEaWUgYW5nZWdlYmVuZSBaZWl0IGlzdCB1bmf8bHRpZyEnOwogICAgJExhbmctPnsnVGltZSB0eXBlJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnWmVpdC1UeXAnOwogICAgJExhbmctPnsnRG8geW91IHJlYWxseSB3YW50IHRvIGRlbGV0ZSB0aGlzIHRlbXBsYXRlPyd9ID0gJ032Y2h0ZW4gU2llIGRpZXNlIFZvcmxhZ2Ugd2lya2xpY2ggbPZzY2hlbj8nOwogICAgJExhbmctPnsnQ2hhbmdlIEFkdmlzb3J5IEJvYXJkJ30gICAgICAgICAgICAgICAgPSAnQ2hhbmdlIEFkdmlzb3J5IEJvYXJkJzsKICAgICRMYW5nLT57J0NBQid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0NBQic7CgogICAgIyBJVFNNIENoYW5nZU1hbmFnZW1lbnQgaWNvbnMKICAgICRMYW5nLT57J015IENoYW5nZXMnfSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ01laW5lIENoYW5nZXMnOwogICAgJExhbmctPnsnTXkgV29ya29yZGVycyd9ICAgICAgICAgICAgICAgICAgICAgICAgPSAnTWVpbmUgV29ya29yZGVycyc7CiAgICAkTGFuZy0+eydQSVIgKFBvc3QgSW1wbGVtZW50YXRpb24gUmV2aWV3KSd9ICAgICA9ICdQSVIgKFBvc3QgSW1wbGVtZW50YXRpb24gUmV2aWV3KSc7CiAgICAkTGFuZy0+eydQU0EgKFByb2plY3RlZCBTZXJ2aWNlIEF2YWlsYWJpbGl0eSknfSA9ICdQU0EgKFByb2plY3RlZCBTZXJ2aWNlIEF2YWlsYWJpbGl0eSknOwogICAgJExhbmctPnsnTXkgQ0FCcyd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnTWVpbmUgQ0FCcyc7CiAgICAkTGFuZy0+eydDaGFuZ2UgT3ZlcnZpZXcnfSAgICAgICAgICAgICAgICAgICAgICA9ICdDaGFuZ2Ug3GJlcnNpY2h0JzsKICAgICRMYW5nLT57J1RlbXBsYXRlIE92ZXJ2aWV3J30gICAgICAgICAgICAgICAgICAgID0gJ1ZvcmxhZ2VuLdxiZXJzaWNodCc7CiAgICAkTGFuZy0+eydTZWFyY2ggQ2hhbmdlcyd9ICAgICAgICAgICAgICAgICAgICAgICA9ICdTdWNoZSBDaGFuZ2VzJzsKCiAgICAjIENoYW5nZSBtZW51CiAgICAkTGFuZy0+eydJVFNNIENoYW5nZSd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQ2hhbmdlJzsKICAgICRMYW5nLT57J0lUU00gV29ya29yZGVyJ30gICAgICAgICAgICAgICAgICAgICAgICA9ICdXb3Jrb3JkZXInOwogICAgJExhbmctPnsnU2NoZWR1bGUnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1NjaGVkdWxlJzsKICAgICRMYW5nLT57J0ludm9sdmVkIFBlcnNvbnMnfSAgICAgICAgICAgICAgICAgICAgICA9ICdCZXRlaWxpZ3RlIFBlcnNvbmVuJzsKICAgICRMYW5nLT57J0FkZCBXb3Jrb3JkZXInfSAgICAgICAgICAgICAgICAgICAgICAgICA9ICdXb3Jrb3JkZXIgaGluenVm/Gdlbic7CiAgICAkTGFuZy0+eydUZW1wbGF0ZSd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnVm9ybGFnZSc7CiAgICAkTGFuZy0+eydNb3ZlIFRpbWUgU2xvdCd9ICAgICAgICAgICAgICAgICAgICAgICAgPSAnVmVyc2NoaWViZSBUaW1lc2xvdCc7CiAgICAkTGFuZy0+eydQcmludCB0aGUgY2hhbmdlJ30gICAgICAgICAgICAgICAgICAgICAgPSAnRGllc2VuIENoYW5nZSBkcnVja2VuJzsKICAgICRMYW5nLT57J0VkaXQgdGhlIGNoYW5nZSd9ICAgICAgICAgICAgICAgICAgICAgICA9ICdEaWVzZW4gQ2hhbmdlIGJlYXJiZWl0ZW4nOwogICAgJExhbmctPnsnQ2hhbmdlIGludm9sdmVkIHBlcnNvbnMgb2YgdGhlIGNoYW5nZSd9ID0gJ0JlYXJiZWl0ZSBiZXRlaWxpZ3RlIFBlcnNvbmVuIGRpZXNlcyBDaGFuZ2VzJzsKICAgICRMYW5nLT57J0FkZCBhIHdvcmtvcmRlciB0byB0aGUgY2hhbmdlJ30gICAgICAgICA9ICdG/GdlIGVpbmUgV29ya29yZGVyIHp1IGRpZXNlbSBDaGFuZ2UgaGluenUnOwogICAgJExhbmctPnsnRWRpdCB0aGUgY29uZGl0aW9ucyBvZiB0aGUgY2hhbmdlJ30gICAgID0gJ0JlYXJiZWl0ZSBkaWUgQmVkaW5ndW5nZW4gZGllc2VzIENoYW5nZXMnOwogICAgJExhbmctPnsnTGluayBhbm90aGVyIG9iamVjdCB0byB0aGUgY2hhbmdlJ30gICAgID0gJ1Zlcmtu/HBmZSBlaW4gYW5kZXJlcyBPYmpla3QgbWl0IGRpZXNlbSBDaGFuZ2UnOwogICAgJExhbmctPnsnU2F2ZSBjaGFuZ2UgYXMgYSB0ZW1wbGF0ZSd9ICAgICAgICAgICAgID0gJ1NwZWljaGVyZSBkaWVzZW4gQ2hhbmdlIGFscyBWb3JsYWdlJzsKICAgICRMYW5nLT57J01vdmUgYWxsIHdvcmtvcmRlcnMgaW4gdGltZSd9ICAgICAgICAgICA9ICdWZXJzY2hpZWJlIGFsbGUgV29ya29yZGVycyB1bSBlaW5lIG5ldWUgemVpdGxpY2hlIERpZmZlcmVueic7CiAgICAkTGFuZy0+eydDdXJyZW50IENBQid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQWt0dWVsbGVzIENBQic7CiAgICAkTGFuZy0+eydBZGQgdG8gQ0FCJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnWnVtIENBQiBoaW56dWb8Z2VuJzsKICAgICRMYW5nLT57J0FkZCBDQUIgVGVtcGxhdGUnfSAgICAgICAgICAgICAgICAgICAgICA9ICdFaW5lIENBQi1Wb3JsYWdlIGhpbnp1ZvxnZW4nOwogICAgJExhbmctPnsnQWRkIFdvcmtvcmRlciB0byd9ICAgICAgICAgICAgICAgICAgICAgID0gJ1dvcmtvcmRlciBoaW56dWb8Z2VuIHp1JzsKICAgICRMYW5nLT57J1NlbGVjdCBXb3Jrb3JkZXIgVGVtcGxhdGUnfSAgICAgICAgICAgICA9ICdXb3Jrb3JkZXItVm9ybGFnZSBhdXN35GhsZW4nOwogICAgJExhbmctPnsnU2VsZWN0IENoYW5nZSBUZW1wbGF0ZSd9ICAgICAgICAgICAgICAgID0gJ0NoYW5nZS1Wb3JsYWdlIGF1c3fkaGxlbic7CiAgICAkTGFuZy0+eydUaGUgcGxhbm5lZCB0aW1lIGlzIGludmFsaWQhJ30gICAgICAgICAgPSAnRGVyIGdlcGxhbnRlIFplaXRyYXVtIGlzdCB1bmf8bHRpZyEnOwoKICAgICMgV29ya29yZGVyIG1lbnUKICAgICRMYW5nLT57J1dvcmtvcmRlcid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1dvcmtvcmRlcic7CiAgICAkTGFuZy0+eydTYXZlIHdvcmtvcmRlciBhcyBhIHRlbXBsYXRlJ30gICAgICAgICA9ICdTcGVpY2hlcmUgZGllc2UgV29ya29yZGVyIGFscyBWb3JsYWdlJzsKICAgICRMYW5nLT57J0xpbmsgYW5vdGhlciBvYmplY3QgdG8gdGhlIHdvcmtvcmRlcid9ID0gJ1Zlcmtu/HBmZSBlaW4gYW5kZXJlcyBPYmpla3QgbWl0IGRpZXNlciBXb3Jrb3JkZXInOwogICAgJExhbmctPnsnRGVsZXRlIFdvcmtvcmRlcid9ICAgICAgICAgICAgICAgICAgICAgPSAnRGllc2UgV29ya29yZGVyIGz2c2NoZW4nOwogICAgJExhbmctPnsnRWRpdCB0aGUgd29ya29yZGVyJ30gICAgICAgICAgICAgICAgICAgPSAnRGllc2UgV29ya29yZGVyIGJlYXJiZWl0ZW4nOwogICAgJExhbmctPnsnUHJpbnQgdGhlIHdvcmtvcmRlcid9ICAgICAgICAgICAgICAgICAgPSAnRGllc2UgV29ya29yZGVyIGRydWNrZW4nOwogICAgJExhbmctPnsnU2V0IHRoZSBhZ2VudCBmb3IgdGhlIHdvcmtvcmRlcid9ICAgICAgPSAnRWluZW4gQWdlbnRlbiBm/HIgZGllc2UgV29ya29yZGVyIGF1c3fkaGxlbic7CgogICAgIyBUZW1wbGF0ZSBtZW51CiAgICAkTGFuZy0+eydBIHRlbXBsYXRlIG11c3QgaGF2ZSBhIG5hbWUhJ30gPSAnRWluZSBWb3JsYWdlIGJlbvZ0aWd0IGVpbmVuIE5hbWVuISc7CgogICAgIyBDaGFuZ2UgYXR0cmlidXRlcyBhcyByZXR1cm5lZCBmcm9tIENoYW5nZUdldCgpLCBvciB0YWtlbiBieSBDaGFuZ2VVcGRhdGUoKQogICAgJExhbmctPnsnQWNjb3VudGVkVGltZSd9ICAgID0gJ0JlbvZ0aWd0ZSBaZWl0JzsKICAgICRMYW5nLT57J0FjdHVhbEVuZFRpbWUnfSAgICA9ICdUYXRz5GNobGljaGVzIEVuZGUnOwogICAgJExhbmctPnsnQWN0dWFsU3RhcnRUaW1lJ30gID0gJ1RhdHPkY2hsaWNoZXIgU3RhcnQnOwogICAgJExhbmctPnsnQ0FCQWdlbnQnfSAgICAgICAgID0gJ0NBQiBBZ2VudCc7CiAgICAkTGFuZy0+eydDQUJBZ2VudHMnfSAgICAgICAgPSAnQ0FCIEFnZW50cyc7CiAgICAkTGFuZy0+eydDQUJDdXN0b21lcid9ICAgICAgPSAnQ0FCIEt1bmRlJzsKICAgICRMYW5nLT57J0NBQkN1c3RvbWVycyd9ICAgICA9ICdDQUIgS3VuZGVuJzsKICAgICRMYW5nLT57J0NhdGVnb3J5J30gICAgICAgICA9ICdLYXRlZ29yaWUnOwogICAgJExhbmctPnsnQ2hhbmdlQnVpbGRlcid9ICAgID0gJ0NoYW5nZSBCdWlsZGVyJzsKICAgICRMYW5nLT57J0NoYW5nZUJ5J30gICAgICAgICA9ICdHZeRuZGVydCB2b24nOwogICAgJExhbmctPnsnQ2hhbmdlTWFuYWdlcid9ICAgID0gJ0NoYW5nZSBNYW5hZ2VyJzsKICAgICRMYW5nLT57J0NoYW5nZU51bWJlcid9ICAgICA9ICdDaGFuZ2UgTnVtbWVyJzsKICAgICRMYW5nLT57J0NoYW5nZVRpbWUnfSAgICAgICA9ICdHZeRuZGVydCc7CiAgICAkTGFuZy0+eydDaGFuZ2VTdGF0ZSd9ICAgICAgPSAnQ2hhbmdlIFN0YXR1cyc7CiAgICAkTGFuZy0+eydDaGFuZ2VUaXRsZSd9ICAgICAgPSAnQ2hhbmdlIFRpdGVsJzsKICAgICRMYW5nLT57J0NyZWF0ZUJ5J30gICAgICAgICA9ICdFcnN0ZWxsdCB2b24nOwogICAgJExhbmctPnsnQ3JlYXRlVGltZSd9ICAgICAgID0gJ0Vyc3RlbGx0JzsKICAgICRMYW5nLT57J0Rlc2NyaXB0aW9uJ30gICAgICA9ICdCZXNjaHJlaWJ1bmcnOwogICAgJExhbmctPnsnSW1wYWN0J30gICAgICAgICAgID0gJ0F1c3dpcmt1bmcnOwogICAgJExhbmctPnsnSnVzdGlmaWNhdGlvbid9ICAgID0gJ0JlZ3L8bmR1bmcnOwogICAgJExhbmctPnsnUGxhbm5lZEVmZm9ydCd9ICAgID0gJ0dlcGxhbnRlciBBdWZ3YW5kJzsKICAgICRMYW5nLT57J1BsYW5uZWRFbmRUaW1lJ30gICA9ICdHZXBsYW50ZXMgRW5kZSc7CiAgICAkTGFuZy0+eydQbGFubmVkU3RhcnRUaW1lJ30gPSAnR2VwbGFudGVyIFN0YXJ0JzsKICAgICRMYW5nLT57J1ByaW9yaXR5J30gICAgICAgICA9ICdQcmlvcml05HQnOwogICAgJExhbmctPnsnUmVxdWVzdGVkVGltZSd9ICAgID0gJ1d1bnNjaHRlcm1pbic7CgogICAgIyBXb3Jrb3JkZXIgYXR0cmlidXRlcyBhcyByZXR1cm5lZCBmcm9tIFdvcmtPcmRlckdldCgpLCBvciB0YWtlbiBieSBXb3JrT3JkZXJVcGRhdGUoKQogICAgJExhbmctPnsnSW5zdHJ1Y3Rpb24nfSAgICAgID0gJ0Fud2Vpc3VuZyc7CiAgICAkTGFuZy0+eydSZXBvcnQnfSAgICAgICAgICAgPSAnQmVyaWNodCc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJBZ2VudCd9ICAgPSAnV29ya29yZGVyIEFnZW50JzsKICAgICRMYW5nLT57J1dvcmtPcmRlck51bWJlcid9ICA9ICdXb3Jrb3JkZXIgTnVtbWVyJzsKICAgICRMYW5nLT57J1dvcmtPcmRlclN0YXRlJ30gICA9ICdXb3Jrb3JkZXIgU3RhdHVzJzsKICAgICRMYW5nLT57J1dvcmtPcmRlclRpdGxlJ30gICA9ICdXb3Jrb3JkZXIgVGl0ZWwnOwogICAgJExhbmctPnsnV29ya09yZGVyVHlwZSd9ICAgID0gJ1dvcmtvcmRlciBUeXAnOwoKICAgICMgQ2hhbmdlIGhpc3RvcnkKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNoYW5nZUFkZCd9ICAgICAgICAgICAgICA9ICdOZXVlciBDaGFuZ2UgKElEPSVzKSc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VVcGRhdGUnfSAgICAgICAgICAgPSAnJXM6IE5ldTogJXMgLT4gQWx0OiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VMaW5rQWRkJ30gICAgICAgICAgPSAnTGluayB6dSAlcyAoSUQ9JXMpIGhpbnp1Z2Vm/Gd0JzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNoYW5nZUxpbmtEZWxldGUnfSAgICAgICA9ICdMaW5rIHp1ICVzIChJRD0lcykgZ2Vs9nNjaHQnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6Q2hhbmdlQ0FCVXBkYXRlJ30gICAgICAgID0gJyVzOiBOZXU6ICVzIC0+IEFsdDogJXMnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6Q2hhbmdlQ0FCRGVsZXRlJ30gICAgICAgID0gJ0NBQiBnZWz2c2NodCAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VBdHRhY2htZW50QWRkJ30gICAgPSAnTmV1ZXIgQW5oYW5nOiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VBdHRhY2htZW50RGVsZXRlJ30gPSAnQW5oYW5nIGdlbPZzY2h0OiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VOb3RpZmljYXRpb25TZW50J30gPSAnQmVuYWNocmljaHRpZ3VuZyBhbiAlcyBnZXNjaGlja3QgKEV2ZW50OiAlcyknOwoKICAgICMgd29ya29yZGVyIGhpc3RvcnkKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckFkZCd9ICAgICAgICAgICAgICA9ICdOZXVlIFdvcmtvcmRlciAoSUQ9JXMpJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlclVwZGF0ZSd9ICAgICAgICAgICA9ICclczogTmV1OiAlcyAtPiBBbHQ6ICVzJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckxpbmtBZGQnfSAgICAgICAgICA9ICdMaW5rIHp1ICVzIChJRD0lcykgaGluenVnZWb8Z3QnOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyTGlua0RlbGV0ZSd9ICAgICAgID0gJ0xpbmsgdG8gJXMgKElEPSVzKSBnZWz2c2NodCc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJEZWxldGUnfSAgICAgICAgICAgPSAnV29ya29yZGVyIChJRD0lcykgZ2Vs9nNjaHQnOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyQXR0YWNobWVudEFkZCd9ICAgID0gJ05ldWVyIEFuaGFuZyBm/HIgV29ya29yZGVyOiAlcyc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBdHRhY2htZW50RGVsZXRlJ30gPSAnQW5oYW5nIHZvbiBXb3Jrb3JkZXIgZ2Vs9nNjaHQ6ICVzJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlck5vdGlmaWNhdGlvblNlbnQnfSA9ICdCZW5hY2hyaWNodGlndW5nIGFuICVzIGdlc2NoaWNrdCAoRXZlbnQ6ICVzKSc7CgogICAgIyBsb25nIHdvcmtvcmRlciBoaXN0b3J5CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBZGRXaXRoV29ya09yZGVySUQnfSAgICAgICAgICAgICAgPSAnTmV1ZSBXb3Jrb3JkZXIgKElEPSVzKSc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJVcGRhdGVXaXRoV29ya09yZGVySUQnfSAgICAgICAgICAgPSAnKElEPSVzKSAlczogTmV1OiAlcyAtPiBBbHQ6ICVzJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckxpbmtBZGRXaXRoV29ya09yZGVySUQnfSAgICAgICAgICA9ICcoSUQ9JXMpIExpbmsgenUgJXMgKElEPSVzKSBoaW56dWdlZvxndCc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJMaW5rRGVsZXRlV2l0aFdvcmtPcmRlcklEJ30gICAgICAgPSAnKElEPSVzKSBMaW5rIHRvICVzIChJRD0lcykgZ2Vs9nNjaHQnOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyRGVsZXRlV2l0aFdvcmtPcmRlcklEJ30gICAgICAgICAgID0gJ1dvcmtvcmRlciAoSUQ9JXMpIGdlbPZzY2h0JzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckF0dGFjaG1lbnRBZGRXaXRoV29ya09yZGVySUQnfSAgICA9ICcoSUQ9JXMpIE5ldWVyIEFuaGFuZyBm/HIgV29ya29yZGVyOiAlcyc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBdHRhY2htZW50RGVsZXRlV2l0aFdvcmtPcmRlcklEJ30gPSAnKElEPSVzKSBBbmhhbmcgdm9uIFdvcmtvcmRlciBnZWz2c2NodDogJXMnOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyTm90aWZpY2F0aW9uU2VudFdpdGhXb3JrT3JkZXJJRCd9ID0gJyhJRD0lcykgQmVuYWNocmljaHRpZ3VuZyBhbiAlcyBnZXNjaGlja3QgKEV2ZW50OiAlcyknOwoKICAgICMgY29uZGl0aW9uIGhpc3RvcnkKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNvbmRpdGlvbkFkZCd9ICAgICAgID0gJyVzOiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDb25kaXRpb25BZGRJRCd9ICAgICA9ICdOZXVlIEJlZGluZ3VuZyAoSUQ9JXMpJzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNvbmRpdGlvblVwZGF0ZSd9ICAgID0gJyVzIChCZWRpbmd1bmcgSUQ9JXMpOiBOZXU6ICVzIC0+IE9sZDogJXMnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6Q29uZGl0aW9uRGVsZXRlJ30gICAgPSAnQmVkaW5ndW5nIChJRD0lcykgZ2Vs9nNjaHQnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6Q29uZGl0aW9uRGVsZXRlQWxsJ30gPSAnQWxsZSBCZWRpbmd1bmdlbiB2b24gQ2hhbmdlIChJRD0lcykgZ2Vs9nNjaHQnOwoKICAgICMgZXhwcmVzc2lvbiBoaXN0b3J5CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpFeHByZXNzaW9uQWRkJ30gICAgICAgPSAnJXM6ICVzJzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkV4cHJlc3Npb25BZGRJRCd9ICAgICA9ICdOZXVlIEV4cHJlc3Npb24gKElEPSVzKSc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpFeHByZXNzaW9uVXBkYXRlJ30gICAgPSAnJXMgKEV4cHJlc3Npb24gSUQ9JXMpOiBOZXU6ICVzIC0+IE9sZDogJXMnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6RXhwcmVzc2lvbkRlbGV0ZSd9ICAgID0gJ0V4cHJlc3Npb24gKElEPSVzKSBnZWz2c2NodCc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpFeHByZXNzaW9uRGVsZXRlQWxsJ30gPSAnQWxsZSBsb2dpc2NoZW4gQXVzZHL8Y2tlIHZvbiBCZWRpbmd1bmcgKElEPSVzKSBnZWz2c2NodCc7CgogICAgIyBhY3Rpb24gaGlzdG9yeQogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6QWN0aW9uQWRkJ30gICAgICAgPSAnJXM6ICVzJzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkFjdGlvbkFkZElEJ30gICAgID0gJ05ldWUgQWN0aW9uIChJRD0lcyknOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6QWN0aW9uVXBkYXRlJ30gICAgPSAnJXMgKEFjdGlvbiBJRD0lcyk6IE5ldTogJXMgLT4gT2xkOiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpBY3Rpb25EZWxldGUnfSAgICA9ICdBY3Rpb24gKElEPSVzKSBnZWz2c2NodCc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpBY3Rpb25EZWxldGVBbGwnfSA9ICdBbGxlIEFrdGlvbmVuIHZvbiBCZWRpbmd1bmcgKElEPSVzKSBnZWz2c2NodCc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpBY3Rpb25FeGVjdXRlJ30gICA9ICdBa3Rpb24gKElEPSVzKSBhdXNnZWb8aHJ0OiAlcyc7CiAgICAkTGFuZy0+eydBY3Rpb25FeGVjdXRlOjpzdWNjZXNzZnVsbHknfSAgICA9ICdlcmZvbGdyZWljaCc7CiAgICAkTGFuZy0+eydBY3Rpb25FeGVjdXRlOjp1bnN1Y2Nlc3NmdWxseSd9ICA9ICduaWNodCBlcmZvbGdyZWljaCc7CgogICAgIyBoaXN0b3J5IGZvciB0aW1lIGV2ZW50cwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6Q2hhbmdlUGxhbm5lZFN0YXJ0VGltZVJlYWNoZWQnfSAgICAgICAgICAgICAgICAgICAgICA9ICdDaGFuZ2UgKElEPSVzKSBoYXQgZ2VwbGFudGUgU3RhcnR6ZWl0IGVycmVpY2h0Lic7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VQbGFubmVkRW5kVGltZVJlYWNoZWQnfSAgICAgICAgICAgICAgICAgICAgICAgID0gJ0NoYW5nZSAoSUQ9JXMpIGhhdCBnZXBsYW50ZSBFbmR6ZWl0IGVycmVpY2h0Lic7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VBY3R1YWxTdGFydFRpbWVSZWFjaGVkJ30gICAgICAgICAgICAgICAgICAgICAgID0gJ0NoYW5nZSAoSUQ9JXMpIGhhdCBiZWdvbm5lbi4nOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6Q2hhbmdlQWN0dWFsRW5kVGltZVJlYWNoZWQnfSAgICAgICAgICAgICAgICAgICAgICAgICA9ICdDaGFuZ2UgKElEPSVzKSB3dXJkZSBiZWVuZGV0Lic7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VSZXF1ZXN0ZWRUaW1lUmVhY2hlZCd9ICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0NoYW5nZSAoSUQ9JXMpIGhhdCBnZXf8bnNjaHRlIEVuZHplaXQgZXJyZWljaHQuJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlclBsYW5uZWRTdGFydFRpbWVSZWFjaGVkJ30gICAgICAgICAgICAgICAgPSAnV29ya29yZGVyIChJRD0lcykgaGF0IGdlcGxhbnRlIFN0YXJ0emVpdCBlcnJlaWNodC4nOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyUGxhbm5lZEVuZFRpbWVSZWFjaGVkJ30gICAgICAgICAgICAgICAgICA9ICdXb3Jrb3JkZXIgKElEPSVzKSBoYXQgZ2VwbGFudGUgRW5kemVpdCBlcnJlaWNodC4nOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyQWN0dWFsU3RhcnRUaW1lUmVhY2hlZCd9ICAgICAgICAgICAgICAgICA9ICdXb3Jrb3JkZXIgKElEPSVzKSBoYXQgYmVnb25uZW4uJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckFjdHVhbEVuZFRpbWVSZWFjaGVkJ30gICAgICAgICAgICAgICAgICAgPSAnV29ya29yZGVyIChJRD0lcykgd3VyZGUgYmVlbmRldC4nOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyUGxhbm5lZFN0YXJ0VGltZVJlYWNoZWRXaXRoV29ya09yZGVySUQnfSA9ICdXb3Jrb3JkZXIgKElEPSVzKSBoYXQgZ2VwbGFudGUgU3RhcnR6ZWl0IGVycmVpY2h0Lic7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJQbGFubmVkRW5kVGltZVJlYWNoZWRXaXRoV29ya09yZGVySUQnfSAgID0gJ1dvcmtvcmRlciAoSUQ9JXMpIGhhdCBnZXBsYW50ZSBFbmR6ZWl0IGVycmVpY2h0Lic7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBY3R1YWxTdGFydFRpbWVSZWFjaGVkV2l0aFdvcmtPcmRlcklEJ30gID0gJ1dvcmtvcmRlciAoSUQ9JXMpIGhhdCBiZWdvbm5lbi4nOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyQWN0dWFsRW5kVGltZVJlYWNoZWRXaXRoV29ya09yZGVySUQnfSAgICA9ICdXb3Jrb3JkZXIgKElEPSVzKSB3dXJkZSBiZWVuZGV0Lic7CgogICAgIyBjaGFuZ2Ugc3RhdGVzCiAgICAkTGFuZy0+eydyZXF1ZXN0ZWQnfSAgICAgICAgPSAnUmVxdWVzdGVkJzsKICAgICRMYW5nLT57J3BlbmRpbmcgYXBwcm92YWwnfSA9ICdQZW5kaW5nIEFwcHJvdmFsJzsKICAgICRMYW5nLT57J3BlbmRpbmcgcGlyJ30gICAgICA9ICdQZW5kaW5nIFBJUic7CiAgICAkTGFuZy0+eydyZWplY3RlZCd9ICAgICAgICAgPSAnUmVqZWN0ZWQnOwogICAgJExhbmctPnsnYXBwcm92ZWQnfSAgICAgICAgID0gJ0FwcHJvdmVkJzsKICAgICRMYW5nLT57J2luIHByb2dyZXNzJ30gICAgICA9ICdJbiBQcm9ncmVzcyc7CiAgICAkTGFuZy0+eydzdWNjZXNzZnVsJ30gICAgICAgPSAnU3VjY2Vzc2Z1bCc7CiAgICAkTGFuZy0+eydmYWlsZWQnfSAgICAgICAgICAgPSAnRmFpbGVkJzsKICAgICRMYW5nLT57J2NhbmNlbGVkJ30gICAgICAgICA9ICdDYW5jZWxlZCc7CiAgICAkTGFuZy0+eydyZXRyYWN0ZWQnfSAgICAgICAgPSAnUmV0cmFjdGVkJzsKCiAgICAjIHdvcmtvcmRlciBzdGF0ZXMKICAgICRMYW5nLT57J2NyZWF0ZWQnfSAgICAgPSAnQ3JlYXRlZCc7CiAgICAkTGFuZy0+eydhY2NlcHRlZCd9ICAgID0gJ0FjY2VwdGVkJzsKICAgICRMYW5nLT57J3JlYWR5J30gICAgICAgPSAnUmVhZHknOwogICAgJExhbmctPnsnaW4gcHJvZ3Jlc3MnfSA9ICdJbiBQcm9ncmVzcyc7CiAgICAkTGFuZy0+eydjbG9zZWQnfSAgICAgID0gJ0Nsb3NlZCc7CiAgICAkTGFuZy0+eydjYW5jZWxlZCd9ICAgID0gJ0NhbmNlbGVkJzsKCiAgICAjIEFkbWluIEludGVyZmFjZQogICAgJExhbmctPnsnQ2F0ZWdvcnkgPC0+IEltcGFjdCA8LT4gUHJpb3JpdHknfSAgICAgID0gJ0thdGVnb3JpZSA8LT4gQXVzd2lya3VuZyA8LT4gUHJpb3JpdOR0JzsKICAgICRMYW5nLT57J05vdGlmaWNhdGlvbiAoSVRTTSBDaGFuZ2UgTWFuYWdlbWVudCknfSA9ICdCZW5hY2hyaWNodGlndW5nIChJVFNNIENoYW5nZSBNYW5hZ2VtZW50KSc7CgogICAgIyBBZG1pbiBTdGF0ZU1hY2hpbmUKICAgICRMYW5nLT57J0FkZCBhIHN0YXRlIHRyYW5zaXRpb24nfSAgICAgICAgICAgICAgID0gJ0hpbnp1ZvxnZW4gZWluZXMgU3RhdHVzLdxiZXJnYW5ncyc7CiAgICAkTGFuZy0+eydBZGQgYSBuZXcgc3RhdGUgdHJhbnNpdGlvbiBmb3InfSAgICAgICA9ICdIaW56dWb8Z2VuIGVpbmVzIG5ldWVuIFN0YXR1cy3cYmVyZ2FuZ3MgZvxyJzsKICAgICRMYW5nLT57J0VkaXQgYSBzdGF0ZSB0cmFuc2l0aW9uIGZvcid9ICAgICAgICAgID0gJ0JlYXJiZWl0ZW4gZWluZXMgU3RhdHVzLdxiZXJnYW5ncyBm/HInOwogICAgJExhbmctPnsnT3ZlcnZpZXcgb3ZlciBzdGF0ZSB0cmFuc2l0aW9ucyBmb3InfSAgPSAn3GJlcnNpY2h0IPxiZXIgU3RhdHVzLdxiZXJn5G5nZSBm/HInOwogICAgJExhbmctPnsnT2JqZWN0IE5hbWUnfSAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnT2JqZWt0IE5hbWUnOwogICAgJExhbmctPnsnUGxlYXNlIHNlbGVjdCBmaXJzdCBhIGNhdGFsb2cgY2xhc3MhJ30gPSAnQml0dGUgd+RobGVuIFNpZSB6dWVyc3QgZWluZSBLYXRhbG9nIEtsYXNzZSBhdXMhJzsKCiAgICAjIHdvcmtvcmRlciB0eXBlcwogICAgJExhbmctPnsnYXBwcm92YWwnfSAgPSAnR2VuZWhtaWd1bmcnOwogICAgJExhbmctPnsnZGVjaXNpb24nfSAgPSAnRW50c2NoZWlkdW5nJzsKICAgICRMYW5nLT57J3dvcmtvcmRlcid9ID0gJ1dvcmtvcmRlcic7CiAgICAkTGFuZy0+eydiYWNrb3V0J30gICA9ICdCYWNrb3V0IFBsYW4nOwogICAgJExhbmctPnsncGlyJ30gICAgICAgPSAnUElSIChQb3N0IEltcGxlbWVudGF0aW9uIFJldmlldyknOwoKICAgICMgb2JqZWN0cyB0aGF0IGNhbiBiZSB1c2VkIGluIGNvbmRpdGlvbiBleHByZXNzaW9ucyBhbmQgYWN0aW9ucwogICAgJExhbmctPnsnSVRTTUNoYW5nZSd9ICAgID0gJ0NoYW5nZSc7CiAgICAkTGFuZy0+eydJVFNNV29ya09yZGVyJ30gPSAnV29ya29yZGVyJzsKICAgICRMYW5nLT57J0lUU01Db25kaXRpb24nfSA9ICdCZWRpbmd1bmcnOwoKICAgICMgT3ZlcnZpZXdzCiAgICAkTGFuZy0+eydDaGFuZ2UgU2NoZWR1bGUnfSA9ICdDaGFuZ2UgU2NoZWR1bGUnOwoKICAgICMgV29ya29yZGVyIGRlbGV0ZQogICAgJExhbmctPnsnRG8geW91IHJlYWxseSB3YW50IHRvIGRlbGV0ZSB0aGlzIHdvcmtvcmRlcj8nfSA9ICdN9mNodGVuIFNpZSBkaWVzZSBXb3Jrb3JkZXIgd2lya2xpY2ggbPZzY2hlbj8nOwogICAgJExhbmctPnsnWW91IGNhbiBub3QgZGVsZXRlIHRoaXMgV29ya29yZGVyLiBJdCBpcyB1c2VkIGluIGF0IGxlYXN0IG9uZSBDb25kaXRpb24hJ30gPSAnU2llIGv2bm5lbiBkaWVzZSBXb3Jrb3JkZXIgbmljaHQgbPZzY2hlbi4gU2llIHdpcmQgaW4gbWluZGVzdGVucyBlaW5lciBCZWRpbmd1bmcgdmVyd2VuZGV0ISc7CiAgICAkTGFuZy0+eydUaGlzIFdvcmtvcmRlciBpcyB1c2VkIGluIHRoZSBmb2xsb3dpbmcgQ29uZGl0aW9uKHMpJ30gPSAnRGllc2UgV29ya29yZGVyIGZpbmRldCBWZXJ3ZW5kdW5nIGluIGRlbiBmb2xnZW5kZW4gQmVkaW5ndW5nKGVuKSc7CgogICAgIyBUYWtlIHdvcmtvcmRlcgogICAgJExhbmctPnsnVGFrZSBXb3Jrb3JkZXInfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnV29ya29yZGVyIPxiZXJuZWhtZW4nOwogICAgJExhbmctPnsnVGFrZSB0aGUgd29ya29yZGVyJ30gICAgICAgICAgICAgICAgICAgICAgICAgPSAnRGllc2UgV29ya29yZGVyIPxiZXJuZWhtZW4nOwogICAgJExhbmctPnsnQ3VycmVudCBBZ2VudCd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQWt0dWVsbGVyIEFnZW50JzsKICAgICRMYW5nLT57J0RvIHlvdSByZWFsbHkgd2FudCB0byB0YWtlIHRoaXMgd29ya29yZGVyPyd9ID0gJ1dvbGxlbiBzaWUgZGllc2UgV29ya29yZGVyIHdpcmtsaWNoIPxiZXJuZWhtZW4/JzsKCiAgICAjIENvbmRpdGlvbiBPdmVydmlldyBhbmQgRWRpdAogICAgJExhbmctPnsnQ29uZGl0aW9uJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0JlZGluZ3VuZyc7CiAgICAkTGFuZy0+eydDb25kaXRpb25zJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQmVkaW5ndW5nZW4nOwogICAgJExhbmctPnsnRXhwcmVzc2lvbid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0xvZ2lzY2hlciBBdXNkcnVjayc7CiAgICAkTGFuZy0+eydFeHByZXNzaW9ucyd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnTG9naXNjaGUgQXVzZHL8Y2tlJzsKICAgICRMYW5nLT57J0FjdGlvbid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdBa3Rpb24nOwogICAgJExhbmctPnsnQWN0aW9ucyd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0FrdGlvbmVuJzsKICAgICRMYW5nLT57J01hdGNoaW5nJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICfcYmVyZWluc3RpbW11bmcnOwogICAgJExhbmctPnsnQ29uZGl0aW9ucyBhbmQgQWN0aW9ucyd9ICAgICAgICAgICAgICAgICAgID0gJ0JlZGluZ3VuZ2VuIHVuZCBBa3Rpb25lbic7CiAgICAkTGFuZy0+eydBZGQgbmV3IGNvbmRpdGlvbiBhbmQgYWN0aW9uIHBhaXInfSAgICAgICAgPSAnRvxnZSBlaW4gbmV1ZXMgQmVkaW5ndW5ncy0gdW5kIEFrdGlvbnMtUGFhciBoaW56dSc7CiAgICAkTGFuZy0+eydBIGNvbmRpdGlvbiBtdXN0IGhhdmUgYSBuYW1lISd9ICAgICAgICAgICAgPSAnRWluZSBCZWRpbmd1bmcgYmVu9nRpZ3QgZWluZW4gTmFtZW4hJzsKICAgICRMYW5nLT57J0NvbmRpdGlvbiBFZGl0J30gICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdCZWRpbmd1bmcgYmVhcmJlaXRlbic7CiAgICAkTGFuZy0+eydBZGQgbmV3IGV4cHJlc3Npb24nfSAgICAgICAgICAgICAgICAgICAgICAgPSAnRvxnZSBlaW5lbiBuZXVlbiBsb2dpc2NoZW4gQXVzZHJ1Y2sgaGluenUnOwogICAgJExhbmctPnsnQWRkIG5ldyBhY3Rpb24nfSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0b8Z2UgZWluZSBuZXVlIEFrdGlvbiBoaW56dSc7CiAgICAkTGFuZy0+eydBbnkgZXhwcmVzc2lvbid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQmVsaWViaWdlciBsb2dpc2NoZXIgQXVzZHJ1Y2snOwogICAgJExhbmctPnsnQWxsIGV4cHJlc3Npb25zJ30gICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0FsbGUgbG9naXNjaGVuIEF1c2Ry/GNrZSc7CiAgICAkTGFuZy0+eydhbnknfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnYmVsaWViaWdlJzsKICAgICRMYW5nLT57J2FsbCd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdhbGxlJzsKICAgICRMYW5nLT57J2lzJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdpc3QnOwogICAgJExhbmctPnsnaXMgbm90J30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2lzdCBuaWNodCc7CiAgICAkTGFuZy0+eydpcyBlbXB0eSd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnaXN0IGxlZXInOwogICAgJExhbmctPnsnaXMgbm90IGVtcHR5J30gICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2lzdCBuaWNodCBsZWVyJzsKICAgICRMYW5nLT57J2lzIGdyZWF0ZXIgdGhhbid9ICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdpc3QgZ3L2c3NlciBhbHMnOwogICAgJExhbmctPnsnaXMgbGVzcyB0aGFuJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2lzdCBrbGVpbmVyIGFscyc7CiAgICAkTGFuZy0+eydpcyBiZWZvcmUnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnaXN0IHZvcic7CiAgICAkTGFuZy0+eydpcyBhZnRlcid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnaXN0IG5hY2gnOwogICAgJExhbmctPnsnY29udGFpbnMnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2VudGjkbHQnOwogICAgJExhbmctPnsnbm90IGNvbnRhaW5zJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2VudGjkbHQgbmljaHQnOwogICAgJExhbmctPnsnYmVnaW5zIHdpdGgnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2JlZ2lubnQgbWl0JzsKICAgICRMYW5nLT57J2VuZHMgd2l0aCd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdlbmRldCBtaXQnOwogICAgJExhbmctPnsnc2V0J30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ3NldHplJzsKICAgICRMYW5nLT57J2xvY2snfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdzcGVycmUnOwoKICAgICMgQ2hhbmdlIFpvb20KICAgICRMYW5nLT57J0NoYW5nZSBJbml0aWF0b3IocyknfSA9ICdDaGFuZ2UgSW5pdGlhdG9yKHMpJzsKCiAgICAjIEFnZW50SVRTTUNoYW5nZVByaW50CiAgICAkTGFuZy0+eydMaW5rZWQgT2JqZWN0cyd9ID0gJ1Zlcmtu/HBmdGUgT2JqZWt0ZSc7CiAgICAkTGFuZy0+eydGdWxsLVRleHQgU2VhcmNoIGluIENoYW5nZSBhbmQgV29ya29yZGVyJ30gPQogICAgICAgICdWb2xsdGV4dHN1Y2hlIGluIENoYW5nZSB1bmQgV29ya29yZGVyJzsKCiAgICAjIEFnZW50SVRTTUNoYW5nZVNlYXJjaAogICAgJExhbmctPnsnTm8gWFhYIHNldHRpbmdzJ30gPSAiS2VpbmUgJyVzJyBBdXN3YWhsIjsKCiAgICByZXR1cm4gMTsKfQoKMTsK</File>
        <File Location="Kernel/Language/en_ITSMChangeManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/es_ITSMChangeManagement.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9lc19JVFNNQ2hhbmdlTWFuYWdlbWVudC5wbSAtIHRoZSBzcGFuaXNoIHRyYW5zbGF0aW9uIG9mIElUU01DaGFuZ2VNYW5hZ2VtZW50CiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMub3JnLwojIENvcHlyaWdodCAoQykgMjAxMCBMZW9uYXJkbyBDZXJ0dWNoZSA8bGVvbmFyZG8uY2VydHVjaGUgYXQgaXRjb24tbHRkYS5jb20+CiMgLS0KIyAkSWQ6IGVzX0lUU01DaGFuZ2VNYW5hZ2VtZW50LnBtLHYgMS42IDIwMTAvMDUvMTggMTU6MDI6NDQgdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpMYW5ndWFnZTo6ZXNfSVRTTUNoYW5nZU1hbmFnZW1lbnQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjYgJCkgWzFdOwoKc3ViIERhdGEgewogICAgbXkgJFNlbGYgPSBzaGlmdDsKCiAgICBteSAkTGFuZyA9ICRTZWxmLT57VHJhbnNsYXRpb259OwoKICAgIHJldHVybiBpZiByZWYgJExhbmcgbmUgJ0hBU0gnOwoKICAgICMgbWlzYwogICAgJExhbmctPnsnQSBjaGFuZ2UgbXVzdCBoYXZlIGEgdGl0bGUhJ30gICAgICAgICAgPSAnQ2FkYSBjYW1iaW8gZGViZSB0ZW5lciB1biB07XR1bG8nOwogICAgJExhbmctPnsnVGVtcGxhdGUgTmFtZSd9ICAgICAgICAgICAgICAgICAgICAgICAgPSAnTm9tYnJlIGRlIGxhIHBsYW50aWxsYSc7CiAgICAkTGFuZy0+eydUZW1wbGF0ZXMnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdQbGFudGlsbGFzJzsKICAgICRMYW5nLT57J0Egd29ya29yZGVyIG11c3QgaGF2ZSBhIHRpdGxlISd9ICAgICAgID0gJ0NhZGEgT3JkZW4gZGUgVHJhYmFqbyBkZWJlIHRlbmVyIHVuIHTtdHVsbyc7CiAgICAkTGFuZy0+eydDbGVhcid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdMaW1waWFyIGNhbXBvcyc7CiAgICAkTGFuZy0+eydDcmVhdGUgYSBjaGFuZ2UgZnJvbSB0aGlzIHRpY2tldCEnfSAgICA9ICdDcmVhciB1biBjYW1iaW8gYSBwYXJ0aXIgZGUgZXN0ZSB0aWNrZXQhJzsKICAgICRMYW5nLT57J0NyZWF0ZSBDaGFuZ2UnfSAgICAgICAgICAgICAgICAgICAgICAgID0gJ0NyZWFyIHVuIENhbWJpbyc7CiAgICAkTGFuZy0+eydlLmcuJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdlai4nOwogICAgJExhbmctPnsnU2F2ZSBDaGFuZ2UgYXMgdGVtcGxhdGUnfSAgICAgICAgICAgICAgPSAnR3VhcmRhciBDaGFuZ2UgY29tbyBQbGFudGlsbGEnOwogICAgJExhbmctPnsnU2F2ZSBXb3Jrb3JkZXIgYXMgdGVtcGxhdGUnfSAgICAgICAgICAgPSAnR3VhcmRhciBXb3Jrb3JkZXIgY29tbyBQbGFudGlsbGEnOwogICAgJExhbmctPnsnU2F2ZSBDaGFuZ2UgQ0FCIGFzIHRlbXBsYXRlJ30gICAgICAgICAgPSAnR3VhcmRhciBDaGFuZ2UgQ0FCIGNvbW8gUGxhbnRpbGxhJzsKICAgICRMYW5nLT57J05ldyB0aW1lJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ051ZXZvIGludGVydmFsbyBkZSB0aWVtcG8nOwogICAgJExhbmctPnsnUmVxdWVzdGVkIChieSBjdXN0b21lcikgRGF0ZSd9ICAgICAgICAgPSAnRmVjaGEgc29saWNpdGFkYSAocG9yIGVsIGNsaWVudGUpJzsKICAgICRMYW5nLT57J1RoZSBwbGFubmVkIGVuZCB0aW1lIGlzIGludmFsaWQhJ30gICAgID0gJ0xhIGZlY2hhIGRlIGZpbmFsaXphY2nzbiBwbGFuZWFkYSBlcyBpbnbhbGlkYSEnOwogICAgJExhbmctPnsnVGhlIHBsYW5uZWQgc3RhcnQgdGltZSBpcyBpbnZhbGlkISd9ICAgPSAnTGEgZmVjaGEgZGUgaW5pY2lvIHBsYW5lYWRhIGVzIGluduFsaWRhISc7CiAgICAkTGFuZy0+eydUaGUgcGxhbm5lZCBzdGFydCB0aW1lIG11c3QgYmUgYmVmb3JlIHRoZSBwbGFubmVkIGVuZCB0aW1lISd9ID0gJ0xhIGZlY2hhIHBsYW5lYWRhIGRlIGluaWNpbyBkZWJlIHNlciBhbnRlcmlvciBhIGxhIGZlY2hhIHBsYW5lYWRhIGRlIGZpbmFsaXphY2nzbiEnOwogICAgJExhbmctPnsnVGhlIHJlcXVlc3RlZCB0aW1lIGlzIGludmFsaWQhJ30gICAgICAgPSAnTGEgZmVjaGEgc29saWNpdGFkYSBlcyBpbnbhbGlkYSEnOwogICAgJExhbmctPnsnVGltZSB0eXBlJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnVGlwbyBkZSBmZWNoYSc7CiAgICAkTGFuZy0+eydEbyB5b3UgcmVhbGx5IHdhbnQgdG8gZGVsZXRlIHRoaXMgdGVtcGxhdGU/J30gPSAnUmVhbG1lbnRlIGRlc2VhIGVsaW1pbmFyIGVzdGEgcGxhbnRpbGxhPyc7CiAgICAkTGFuZy0+eydDaGFuZ2UgQWR2aXNvcnkgQm9hcmQnfSAgICAgICAgICAgICAgICA9ICdDb21pdOlzIGRlIENhbWJpbyc7CiAgICAkTGFuZy0+eydDQUInfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdDQUInOwoKICAgICMgSVRTTSBDaGFuZ2VNYW5hZ2VtZW50IGljb25zCiAgICAkTGFuZy0+eydNeSBDaGFuZ2VzJ30gICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdNaXMgQ2FtYmlvcyc7CiAgICAkTGFuZy0+eydNeSBXb3Jrb3JkZXJzJ30gICAgICAgICAgICAgICAgICAgICAgICA9ICdNaXMg03JkZW5kZXMgZGUgVHJhYmFqbyc7CiAgICAkTGFuZy0+eydQSVIgKFBvc3QgSW1wbGVtZW50YXRpb24gUmV2aWV3KSd9ICAgICA9ICdSZXZpc2nzbiBQb3N0IEltcGxlbWVudGFjafNuIChQSVIpJzsKICAgICRMYW5nLT57J1BTQSAoUHJvamVjdGVkIFNlcnZpY2UgQXZhaWxhYmlsaXR5KSd9ID0gJ0Rpc3BvbmliaWxpZGFkIHByb3llY3RhZGEgZGVsIHNlcnZpY2lvIChQU0EpJzsKICAgICRMYW5nLT57J015IENBQnMnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ01pcyBDb21pdOlzIGRlIENhbWJpbyAoQ0FCcyknOwogICAgJExhbmctPnsnQ2hhbmdlIE92ZXJ2aWV3J30gICAgICAgICAgICAgICAgICAgICAgPSAnVmlzdGEgZGUgQ2FtYmlvcyc7CiAgICAkTGFuZy0+eydUZW1wbGF0ZSBPdmVydmlldyd9ICAgICAgICAgICAgICAgICAgICA9ICdWaXN0YSBkZSBQbGFudGlsbGFzJzsKICAgICRMYW5nLT57J1NlYXJjaCBDaGFuZ2VzJ30gICAgICAgICAgICAgICAgICAgICAgID0gJ0J1c2NhciBDYW1iaW9zJzsKCiAgICAjIENoYW5nZSBtZW51CiAgICAkTGFuZy0+eydJVFNNIENoYW5nZSd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQ2FtYmlvJzsKICAgICRMYW5nLT57J0lUU00gV29ya29yZGVyJ30gICAgICAgICAgICAgICAgICAgICAgICA9ICdPcmRlbiBkZSBUcmFiYWpvJzsKICAgICRMYW5nLT57J1NjaGVkdWxlJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdBZ2VuZGEnOwogICAgJExhbmctPnsnSW52b2x2ZWQgUGVyc29ucyd9ICAgICAgICAgICAgICAgICAgICAgID0gJ1BlcnNvbmFzIEludm9sdWNyYWRhcyc7CiAgICAkTGFuZy0+eydBZGQgV29ya29yZGVyJ30gICAgICAgICAgICAgICAgICAgICAgICAgPSAnQWRpY2lvbmFyIE9yZGVuIGRlIFRyYWJham8nOwogICAgJExhbmctPnsnVGVtcGxhdGUnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1BsYW50aWxsYSc7CiAgICAkTGFuZy0+eydNb3ZlIFRpbWUgU2xvdCd9ICAgICAgICAgICAgICAgICAgICAgICAgPSAnTW92ZXIgcGVyaW9kbyBkZSB0aWVtcG8nOwogICAgJExhbmctPnsnUHJpbnQgdGhlIGNoYW5nZSd9ICAgICAgICAgICAgICAgICAgICAgID0gJ0ltcHJpbWlyIGVsIGNhbWJpbyc7CiAgICAkTGFuZy0+eydFZGl0IHRoZSBjaGFuZ2UnfSAgICAgICAgICAgICAgICAgICAgICAgPSAnRWRpdGFyIGVsIGNhbWJpbyc7CiAgICAkTGFuZy0+eydDaGFuZ2UgaW52b2x2ZWQgcGVyc29ucyBvZiB0aGUgY2hhbmdlJ30gPSAnQ2FtYmlhciBsYXMgcGVyc29uYXMgaW52b2x1Y3JhZGFzIGVuIGVsIENhbWJpbyc7CiAgICAkTGFuZy0+eydBZGQgYSB3b3Jrb3JkZXIgdG8gdGhlIGNoYW5nZSd9ICAgICAgICAgPSAnQWRpY2lvbmFyIHVuYSBPcmRlbiBkZSBUcmFiYWpvIGFsIENhbWJpbyc7CiAgICAkTGFuZy0+eydFZGl0IHRoZSBjb25kaXRpb25zIG9mIHRoZSBjaGFuZ2UnfSAgICAgPSAnRWRpdGFyIGxhcyBjb25kaWNpb25lcyBkZWwgQ2FtYmlvJzsKICAgICRMYW5nLT57J0xpbmsgYW5vdGhlciBvYmplY3QgdG8gdGhlIGNoYW5nZSd9ICAgICA9ICdWaW5jdWxhciB1biBudWV2byBvYmpldG8gYWwgQ2FtYmlvJzsKICAgICRMYW5nLT57J1NhdmUgY2hhbmdlIGFzIGEgdGVtcGxhdGUnfSAgICAgICAgICAgICA9ICdHdWFyZGFyIGVsIENhbWJpbyBjb21vIFBsYW50aWxsYSc7CiAgICAkTGFuZy0+eydNb3ZlIGFsbCB3b3Jrb3JkZXJzIGluIHRpbWUnfSAgICAgICAgICAgPSAnTW92ZXIgdG9kYXMgbGFzIE9yZGVuZXMgZGUgVHJhYmFqbyBlbiBlbCB0aWVtcG8nOwogICAgJExhbmctPnsnQ3VycmVudCBDQUInfSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0NvbWl06SBkZSBDYW1iaW9zIEFjdHVhbCc7CiAgICAkTGFuZy0+eydBZGQgdG8gQ0FCJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQWRpY2lvbmFyIGVsIENvbWl06SBkZSBDYW1iaW9zJzsKICAgICRMYW5nLT57J0FkZCBDQUIgVGVtcGxhdGUnfSAgICAgICAgICAgICAgICAgICAgICA9ICdBZGljaW9uYXIgQ29taXTpIGEgbGEgUGxhbnRpbGxhJzsKICAgICRMYW5nLT57J0FkZCBXb3Jrb3JkZXIgdG8nfSAgICAgICAgICAgICAgICAgICAgICA9ICdBZGljaW9uYXIgT3JkZW4gZGUgVHJhYmFqbyBhJzsKICAgICRMYW5nLT57J1NlbGVjdCBXb3Jrb3JkZXIgVGVtcGxhdGUnfSAgICAgICAgICAgICA9ICdTZWxlY2Npb25hciBQbGFudGlsbGEgZGUgT3JkZW4gZGUgVHJhYmFqbyc7CiAgICAkTGFuZy0+eydTZWxlY3QgQ2hhbmdlIFRlbXBsYXRlJ30gICAgICAgICAgICAgICAgPSAnU2VsZWNjaW9uYXIgUGxhbnRpbGxhIGRlIENhbWJpbyc7CiAgICAkTGFuZy0+eydUaGUgcGxhbm5lZCB0aW1lIGlzIGludmFsaWQhJ30gICAgICAgICAgPSAnRWwgcGVyaW9kbyBkZSB0aWVtcG8gcGxhbmVhZG8gZXMgaW524WxpZG8hJzsKCiAgICAjIFdvcmtvcmRlciBtZW51CiAgICAkTGFuZy0+eydXb3Jrb3JkZXInfSAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdPcmRlbiBkZSBUcmFiYWpvJzsKICAgICRMYW5nLT57J1NhdmUgd29ya29yZGVyIGFzIGEgdGVtcGxhdGUnfSAgICAgICAgID0gJ0d1YXJkYXIgT3JkZW4gZGUgVHJhYmFqbyBjb21vIFBsYW50aWxsYSc7CiAgICAkTGFuZy0+eydMaW5rIGFub3RoZXIgb2JqZWN0IHRvIHRoZSB3b3Jrb3JkZXInfSA9ICdWaW5jdWxhciBvdHJvIE9iamV0byBhIGxhIE9yZGVuIGRlIFRyYWJham8nOwogICAgJExhbmctPnsnRGVsZXRlIFdvcmtvcmRlcid9ICAgICAgICAgICAgICAgICAgICAgPSAnQm9ycmFyIE9yZGVuIGRlIFRyYWJham8nOwogICAgJExhbmctPnsnRWRpdCB0aGUgd29ya29yZGVyJ30gICAgICAgICAgICAgICAgICAgPSAnRWRpdGFyIGxhIE9yZGVuIGRlIFRyYWJham8nOwogICAgJExhbmctPnsnUHJpbnQgdGhlIHdvcmtvcmRlcid9ICAgICAgICAgICAgICAgICAgPSAnSW1wcmltaXIgbGEgT3JkZW4gZGUgVHJhYmFqbyc7CiAgICAkTGFuZy0+eydTZXQgdGhlIGFnZW50IGZvciB0aGUgd29ya29yZGVyJ30gICAgICA9ICdBc2lnbmFyIEFnZW50ZSBhIGxhIE9yZGVuIGRlIFRyYWJham8nOwoKICAgICMgVGVtcGxhdGUgbWVudQogICAgJExhbmctPnsnQSB0ZW1wbGF0ZSBtdXN0IGhhdmUgYSBuYW1lISd9ID0gJ1RvZGEgcGxhbnRpbGxhIGRlYmUgdGVuZXIgdW4gbm9tYnJlISc7CgogICAgIyBDaGFuZ2UgYXR0cmlidXRlcyBhcyByZXR1cm5lZCBmcm9tIENoYW5nZUdldCgpLCBvciB0YWtlbiBieSBDaGFuZ2VVcGRhdGUoKQogICAgJExhbmctPnsnQWNjb3VudGVkVGltZSd9ICAgID0gJ1RpZW1wbyBDb250YWJpbGl6YWRvJzsKICAgICRMYW5nLT57J0FjdHVhbEVuZFRpbWUnfSAgICA9ICdGaW5hbGl6YWNp824gUmVhbCc7CiAgICAkTGFuZy0+eydBY3R1YWxTdGFydFRpbWUnfSAgPSAnSW5pY2lvIFJlYWwnOwogICAgJExhbmctPnsnQ0FCQWdlbnQnfSAgICAgICAgID0gJ0FnZW50ZSBkZWwgQ0FCJzsKICAgICRMYW5nLT57J0NBQkFnZW50cyd9ICAgICAgICA9ICdBZ2VudGVzIGRlbCBDQUInOwogICAgJExhbmctPnsnQ0FCQ3VzdG9tZXInfSAgICAgID0gJ0NsaWVudGUgZGVsIENBQic7CiAgICAkTGFuZy0+eydDQUJDdXN0b21lcnMnfSAgICAgPSAnQ2xpZW50ZXMgZGVsIENBQic7CiAgICAkTGFuZy0+eydDYXRlZ29yeSd9ICAgICAgICAgPSAnQ2F0ZWdvcmlhJzsKICAgICRMYW5nLT57J0NoYW5nZUJ1aWxkZXInfSAgICA9ICdDb25zdHJ1Y3RvciBkZWwgQ2FtYmlvJzsKICAgICRMYW5nLT57J0NoYW5nZUJ5J30gICAgICAgICA9ICdNb2RpZmljYWRvIHBvcic7CiAgICAkTGFuZy0+eydDaGFuZ2VNYW5hZ2VyJ30gICAgPSAnQWRtaW5pc3RyYWRvciBkZWwgQ2FtYmlvJzsKICAgICRMYW5nLT57J0NoYW5nZU51bWJlcid9ICAgICA9ICdOdW1lcm8gZGVsIENhbWJpbyc7CiAgICAkTGFuZy0+eydDaGFuZ2VUaW1lJ30gICAgICAgPSAnRmVjaGEgZGVsIENhbWJpbyc7CiAgICAkTGFuZy0+eydDaGFuZ2VTdGF0ZSd9ICAgICAgPSAnRXN0YWRvIGRlbCBDYW1iaW8nOwogICAgJExhbmctPnsnQ2hhbmdlVGl0bGUnfSAgICAgID0gJ1RpdHVsbyBkZWwgQ2FtYmlvJzsKICAgICRMYW5nLT57J0NyZWF0ZUJ5J30gICAgICAgICA9ICdDcmVhZG8gcG9yJzsKICAgICRMYW5nLT57J0NyZWF0ZVRpbWUnfSAgICAgICA9ICdGZWNoYSBkZSBDcmVhY2nzbic7CiAgICAkTGFuZy0+eydEZXNjcmlwdGlvbid9ICAgICAgPSAnRGVzY3JpcGNp824nOwogICAgJExhbmctPnsnSW1wYWN0J30gICAgICAgICAgID0gJ0ltcGFjdG8nOwogICAgJExhbmctPnsnSnVzdGlmaWNhdGlvbid9ICAgID0gJ0p1c3RpZmljYWNp824nOwogICAgJExhbmctPnsnUGxhbm5lZEVmZm9ydCd9ICAgID0gJ0VzZnVlcnpvIFBsYW5lYWRvJzsKICAgICRMYW5nLT57J1BsYW5uZWRFbmRUaW1lJ30gICA9ICdGaW5hbGl6YWNp824gUGxhbmVhZGEnOwogICAgJExhbmctPnsnUGxhbm5lZFN0YXJ0VGltZSd9ID0gJ0luaWNpbyBQbGFuZWFkbyc7CiAgICAkTGFuZy0+eydQcmlvcml0eSd9ICAgICAgICAgPSAnUHJpb3JpZGFkJzsKICAgICRMYW5nLT57J1JlcXVlc3RlZFRpbWUnfSAgICA9ICdGZWNoYSBTb2xpY2l0YWRhJzsKCiAgICAjIFdvcmtvcmRlciBhdHRyaWJ1dGVzIGFzIHJldHVybmVkIGZyb20gV29ya09yZGVyR2V0KCksIG9yIHRha2VuIGJ5IFdvcmtPcmRlclVwZGF0ZSgpCiAgICAkTGFuZy0+eydJbnN0cnVjdGlvbid9ICAgICAgPSAnSW5zdHJ1Y2Np824nOwogICAgJExhbmctPnsnUmVwb3J0J30gICAgICAgICAgID0gJ1JlcG9ydGUnOwogICAgJExhbmctPnsnV29ya09yZGVyQWdlbnQnfSAgID0gJ0FnZW50ZSBkZSBsYSBPcmRlbiBkZSBUcmFiYWpvJzsKICAgICRMYW5nLT57J1dvcmtPcmRlck51bWJlcid9ICA9ICdO+m1lcm8gZGUgbGEgT3JkZW4gZGUgVHJhYmFqbyc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJTdGF0ZSd9ICAgPSAnRXN0YWRvIGRlIGxhIE9yZGVuIGRlIFRyYWJham8nOwogICAgJExhbmctPnsnV29ya09yZGVyVGl0bGUnfSAgID0gJ1TtdHVsbyBkZSBsYSBPcmRlbiBkZSBUcmFiYWpvJzsKICAgICRMYW5nLT57J1dvcmtPcmRlclR5cGUnfSAgICA9ICdUaXBvIGRlIE9yZGVuIGRlIFRyYWJham8nOwoKICAgICMgQ2hhbmdlIGhpc3RvcnkKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNoYW5nZUFkZCd9ICAgICAgICAgICAgICA9ICdOdWV2byBDYW1iaW8gKElEPSVzKSc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VVcGRhdGUnfSAgICAgICAgICAgPSAnJXM6IE51ZXZvOiAlcyAtPiBBbnRpZ3VvOiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VMaW5rQWRkJ30gICAgICAgICAgPSAnVmluY3VsbyBhICVzIChJRD0lcykgYWRpY2lvbmFkbyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VMaW5rRGVsZXRlJ30gICAgICAgPSAnVmluY3VsbyBhICVzIChJRD0lcykgYm9ycmFkbyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VDQUJVcGRhdGUnfSAgICAgICAgPSAnJXM6IE51ZXZvOiAlcyAtPiBBbnRpZ3VvOiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VDQUJEZWxldGUnfSAgICAgICAgPSAnQ29taXTpIGRlIENhbWJpb3MgRWxpbWluYWRvICVzJzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNoYW5nZUF0dGFjaG1lbnRBZGQnfSAgICA9ICdOdWV2byBBZGp1bnRvOiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VBdHRhY2htZW50RGVsZXRlJ30gPSAnQm9ycmFyIEFkanVudG8gJXMnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6Q2hhbmdlTm90aWZpY2F0aW9uU2VudCd9ID0gJ05vdGlmaWNhY2nzbiBlbnZpYWRhIGEgJXMgKEV2ZW50bzogJXMpJzsKCiAgICAjIHdvcmtvcmRlciBoaXN0b3J5CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBZGQnfSAgICAgICAgICAgICAgPSAnTnVldmEgT3JkZW4gZGUgVHJhYmFqbyAoSUQ9JXMpJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlclVwZGF0ZSd9ICAgICAgICAgICA9ICclczogTnVldmE6ICVzIC0+IEFudGlndWE6ICVzJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckxpbmtBZGQnfSAgICAgICAgICA9ICdWaW5jdWxvIGEgJXMgKElEPSVzKSBhZGljaW9uYWRvJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckxpbmtEZWxldGUnfSAgICAgICA9ICdWaW5jdWxvIGEgJXMgKElEPSVzKSBib3JyYWRvJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckRlbGV0ZSd9ICAgICAgICAgICA9ICdPcmRlbiBkZSBUcmFiYWpvIChJRD0lcykgYm9ycmFkYSc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBdHRhY2htZW50QWRkJ30gICAgPSAnTnVldm8gYWRqdW50byBwYXJhIE9yZGVuIGRlIFRyYWJham86ICVzJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckF0dGFjaG1lbnREZWxldGUnfSA9ICdCb3JyYXIgYWRqdW50byBkZSBPcmRlbiBkZSBUcmFiYWpvOiAlcyc7CgogICAgIyBsb25nIHdvcmtvcmRlciBoaXN0b3J5CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBZGRXaXRoV29ya09yZGVySUQnfSAgICAgICAgICAgICAgPSAnTnVldmEgT3JkZW4gZGUgVHJhYmFqbyAoSUQ9JXMpJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlclVwZGF0ZVdpdGhXb3JrT3JkZXJJRCd9ICAgICAgICAgICA9ICcoSUQ9JXMpICVzOiBOdWV2YTogJXMgLT4gQW50aWd1YTogJXMnOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyTGlua0FkZFdpdGhXb3JrT3JkZXJJRCd9ICAgICAgICAgID0gJyhJRD0lcykgVmluY3VsbyBhICVzIChJRD0lcykgYWRpY2lvbmFkbyc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJMaW5rRGVsZXRlV2l0aFdvcmtPcmRlcklEJ30gICAgICAgPSAnKElEPSVzKSBWaW5jdWxvIGEgJXMgKElEPSVzKSBib3JyYWRvJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckRlbGV0ZVdpdGhXb3JrT3JkZXJJRCd9ICAgICAgICAgICA9ICdPcmRlbiBkZSBUcmFiYWpvIChJRD0lcykgYm9ycmFkYSc7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBdHRhY2htZW50QWRkV2l0aFdvcmtPcmRlcklEJ30gICAgPSAnKElEPSVzKSBOdWV2byBhZGp1bnRvIHBhcmEgT3JkZW4gZGUgVHJhYmFqbzogJXMnOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyQXR0YWNobWVudERlbGV0ZVdpdGhXb3JrT3JkZXJJRCd9ID0gJyhJRD0lcykgQm9ycmFyIGFkanVudG8gZGUgT3JkZW4gZGUgVHJhYmFqbzogJXMnOwoKICAgICMgY29uZGl0aW9uIGhpc3RvcnkKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNvbmRpdGlvbkFkZCd9ICAgICAgID0gJyVzOiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDb25kaXRpb25BZGRJRCd9ICAgICA9ICdOdWV2YSBDb25kaWNp824gKElEPSVzKSc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDb25kaXRpb25VcGRhdGUnfSAgICA9ICclcyAoSUQgZGUgbGEgQ29uZGljafNuPSVzKTogTnVldm86ICVzIC0+IEFudGlndW86ICVzJzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNvbmRpdGlvbkRlbGV0ZSd9ICAgID0gJ0NvZGljafNuIChJRD0lcykgYm9ycmFkYSc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDb25kaXRpb25EZWxldGVBbGwnfSA9ICdUb2RhcyBsYXMgY29uZGljaW9uZXMgZGVsIGNhbWJpbyAoSUQ9JXMpIGJvcnJhZGFzJzsKCiAgICAjIGV4cHJlc3Npb24gaGlzdG9yeQogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6RXhwcmVzc2lvbkFkZCd9ICAgICAgID0gJyVzOiAlcyc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpFeHByZXNzaW9uQWRkSUQnfSAgICAgPSAnTnVldmEgRXhwcmVzafNuIChJRD0lcyknOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6RXhwcmVzc2lvblVwZGF0ZSd9ICAgID0gJyVzIChJRCBkZSBsYSBFeHByZXNp8249JXMpOiBOdWV2YTogJXMgLT4gQW50aWd1YTogJXMnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6RXhwcmVzc2lvbkRlbGV0ZSd9ICAgID0gJ0V4cHJlc2nzbiAoSUQ9JXMpIGJvcnJhZGEnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6RXhwcmVzc2lvbkRlbGV0ZUFsbCd9ID0gJ1RvZGFzIGxhcyBFeHByZXNpb25lcyBkZSBsYSBDb25kaWNp824gKElEPSVzKSBib3JyYWRhcyc7CgogICAgIyBhY3Rpb24gaGlzdG9yeQogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6QWN0aW9uQWRkJ30gICAgICAgPSAnJXM6ICVzJzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkFjdGlvbkFkZElEJ30gICAgID0gJ051ZXZhIEFjY2nzbiAoSUQ9JXMpJzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkFjdGlvblVwZGF0ZSd9ICAgID0gJyVzIChJRCBkZSBsYSBBY2Np8249JXMpOiBOdWV2YTogJXMgLT4gQW50aWd1YTogJXMnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6QWN0aW9uRGVsZXRlJ30gICAgPSAnQWNjafNuIChJRD0lcykgYm9ycmFkYSc7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpBY3Rpb25EZWxldGVBbGwnfSA9ICdUb2RhcyBsYXMgQWNjaW9uZXMgZGUgbGEgQ29uZGljafNuIChJRD0lcykgYm9ycmFkYXMnOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6QWN0aW9uRXhlY3V0ZSd9ICAgPSAnQWNjafNuIChJRD0lcykgZWplY3V0YWRhOiAlcyc7CiAgICAkTGFuZy0+eydBY3Rpb25FeGVjdXRlOjpzdWNjZXNzZnVsbHknfSAgICA9ICdDb24g6XhpdG8nOwogICAgJExhbmctPnsnQWN0aW9uRXhlY3V0ZTo6dW5zdWNjZXNzZnVsbHknfSAgPSAnU2luIOl4aXRvJzsKCiAgICAjIGhpc3RvcnkgZm9yIHRpbWUgZXZlbnRzCiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VQbGFubmVkU3RhcnRUaW1lUmVhY2hlZCd9ICAgICAgICAgICAgICAgICAgICAgID0gJ0VsIENhbWJpbyAoSUQ9JXMpIGhhIGFsY2FuemFkbyBzdSBmZWNoYSBkZSBpbmljaW8gcGxhbmVhZGEuJzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNoYW5nZVBsYW5uZWRFbmRUaW1lUmVhY2hlZCd9ICAgICAgICAgICAgICAgICAgICAgICAgPSAnRWwgQ2FtYmlvIChJRD0lcykgaGEgYWxjYW56YWRvIHN1IGZlY2hhIGRlIGZpbmFsaXphY2nzbiBwbGFuZWFkYS4nOwogICAgJExhbmctPnsnQ2hhbmdlSGlzdG9yeTo6Q2hhbmdlQWN0dWFsU3RhcnRUaW1lUmVhY2hlZCd9ICAgICAgICAgICAgICAgICAgICAgICA9ICdFbCBDYW1iaW8gKElEPSVzKSBoYSBhbGNhbnphZG8gc3UgZmVjaGEgZGUgaW5pY2lvIHJlYWwgcGxhbmVhZGEuJzsKICAgICRMYW5nLT57J0NoYW5nZUhpc3Rvcnk6OkNoYW5nZUFjdHVhbEVuZFRpbWVSZWFjaGVkJ30gICAgICAgICAgICAgICAgICAgICAgICAgPSAnRWwgQ2FtYmlvIChJRD0lcykgaGEgYWxjYW56YWRvIHN1IGZlY2hhIGRlIGZpbmFsaXphY2nzbiByZWFsIHBsYW5lYWRhLic7CiAgICAkTGFuZy0+eydDaGFuZ2VIaXN0b3J5OjpDaGFuZ2VSZXF1ZXN0ZWRUaW1lUmVhY2hlZCd9ICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0VsIENhbWJpbyAoSUQ9JXMpIGhhIGFsY2FuemFkbyBzdSBmZWNoYSBlc3BlcmFkYSBkZSBvY3VycmVuY2lhLic7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJQbGFubmVkU3RhcnRUaW1lUmVhY2hlZCd9ICAgICAgICAgICAgICAgID0gJ0xhIE9yZGVuIGRlIFRyYWJham8gKElEPSVzKSBoYSBhbGNhbnphZG8gc3UgZmVjaGEgZGUgaW5pY2lvIHBsYW5lYWRhLic7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJQbGFubmVkRW5kVGltZVJlYWNoZWQnfSAgICAgICAgICAgICAgICAgID0gJ0xhIE9yZGVuIGRlIFRyYWJham8gKElEPSVzKSBoYSBhbGNhbnphZG8gc3UgZmVjaGEgZGUgZmluYWxpemFjafNuIHBsYW5lYWRhLic7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBY3R1YWxTdGFydFRpbWVSZWFjaGVkJ30gICAgICAgICAgICAgICAgID0gJ0xhIE9yZGVuIGRlIFRyYWJham8gKElEPSVzKSBoYSBhbGNhbnphZG8gc3UgZmVjaGEgZGUgaW5pY2lvIHJlYWwuJzsKICAgICRMYW5nLT57J1dvcmtPcmRlckhpc3Rvcnk6OldvcmtPcmRlckFjdHVhbEVuZFRpbWVSZWFjaGVkJ30gICAgICAgICAgICAgICAgICAgPSAnTGEgT3JkZW4gZGUgVHJhYmFqbyAoSUQ9JXMpIGhhIGFsY2FuemFkbyBzdSBmZWNoYSBkZSBmaW5hbGl6YWNp824gcmVhbC4nOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyUGxhbm5lZFN0YXJ0VGltZVJlYWNoZWRXaXRoV29ya09yZGVySUQnfSA9ICdMYSBPcmRlbiBkZSBUcmFiYWpvIChJRD0lcykgaGEgYWxjYW56YWRvIHN1IGZlY2hhIGRlIGluaWNpbyBwbGFuZWFkYS4nOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyUGxhbm5lZEVuZFRpbWVSZWFjaGVkV2l0aFdvcmtPcmRlcklEJ30gICA9ICdMYSBPcmRlbiBkZSBUcmFiYWpvIChJRD0lcykgaGEgYWxjYW56YWRvIHN1IGZlY2hhIGRlIGZpbmFsaXphY2nzbiBwbGFuZWFkYS4nOwogICAgJExhbmctPnsnV29ya09yZGVySGlzdG9yeTo6V29ya09yZGVyQWN0dWFsU3RhcnRUaW1lUmVhY2hlZFdpdGhXb3JrT3JkZXJJRCd9ICA9ICdMYSBPcmRlbiBkZSBUcmFiYWpvIChJRD0lcykgaGEgYWxjYW56YWRvIHN1IGZlY2hhIGRlIGluaWNpbyByZWFsLic7CiAgICAkTGFuZy0+eydXb3JrT3JkZXJIaXN0b3J5OjpXb3JrT3JkZXJBY3R1YWxFbmRUaW1lUmVhY2hlZFdpdGhXb3JrT3JkZXJJRCd9ICAgID0gJ0xhIE9yZGVuIGRlIFRyYWJham8gKElEPSVzKSBoYSBhbGNhbnphZG8gc3UgZmVjaGEgZGUgZmluYWxpemFjafNuIHJlYWwuJzsKCiAgICAjIGNoYW5nZSBzdGF0ZXMKICAgICRMYW5nLT57J3JlcXVlc3RlZCd9ICAgICAgICA9ICdTb2xpY2l0YWRvJzsKICAgICRMYW5nLT57J3BlbmRpbmcgYXBwcm92YWwnfSA9ICdQZW5kaWVudGUgcG9yIEFwcm9iYWNp824nOwogICAgJExhbmctPnsncGVuZGluZyBwaXInfSAgICAgID0gJ1BlbmRpZW50ZSBkZSBSZXZpc2nzbiBQb3N0LUltcGxlbWVudGFjafNuJzsKICAgICRMYW5nLT57J3JlamVjdGVkJ30gICAgICAgICA9ICdSZWNoYXphZG8nOwogICAgJExhbmctPnsnYXBwcm92ZWQnfSAgICAgICAgID0gJ0Fwcm9iYWRvJzsKICAgICRMYW5nLT57J2luIHByb2dyZXNzJ30gICAgICA9ICdFbiBQcm9ncmVzbyc7CiAgICAkTGFuZy0+eydzdWNjZXNzZnVsJ30gICAgICAgPSAnRXhpdG9zbyc7CiAgICAkTGFuZy0+eydmYWlsZWQnfSAgICAgICAgICAgPSAnRmFsbGlkbyc7CiAgICAkTGFuZy0+eydjYW5jZWxlZCd9ICAgICAgICAgPSAnQ2FuY2VsYWRvJzsKICAgICRMYW5nLT57J3JldHJhY3RlZCd9ICAgICAgICA9ICdEZXZ1ZWx0byc7CgogICAgIyB3b3Jrb3JkZXIgc3RhdGVzCiAgICAkTGFuZy0+eydjcmVhdGVkJ30gICAgID0gJ0NyZWFkYSc7CiAgICAkTGFuZy0+eydhY2NlcHRlZCd9ICAgID0gJ0FjZXB0YWRhJzsKICAgICRMYW5nLT57J3JlYWR5J30gICAgICAgPSAnTGlzdGEnOwogICAgJExhbmctPnsnaW4gcHJvZ3Jlc3MnfSA9ICdFbiBQcm9ncmVzbyc7CiAgICAkTGFuZy0+eydjbG9zZWQnfSAgICAgID0gJ0NlcnJhZGEnOwogICAgJExhbmctPnsnY2FuY2VsZWQnfSAgICA9ICdDYW5jZWxhZGEnOwoKICAgICMgQWRtaW4gSW50ZXJmYWNlCiAgICAkTGFuZy0+eydDYXRlZ29yeSA8LT4gSW1wYWN0IDwtPiBQcmlvcml0eSd9ICAgICAgPSAnQ2F0ZWdvcmlhIDwtPiBJbXBhY3RvIDwtPiBQcmlvcmlkYWQnOwogICAgJExhbmctPnsnTm90aWZpY2F0aW9uIChJVFNNIENoYW5nZSBNYW5hZ2VtZW50KSd9ID0gJ05vdGlmaWNhY2lvbmVzIGRlIENhbWJpb3MnOwoKICAgICMgQWRtaW4gU3RhdGVNYWNoaW5lCiAgICAkTGFuZy0+eydBZGQgYSBzdGF0ZSB0cmFuc2l0aW9uJ30gICAgICAgICAgICAgICA9ICdBZGljaW9uYXIgdW4gZXN0YWRvIGRlIHRyYW5zaWNp824nOwogICAgJExhbmctPnsnQWRkIGEgbmV3IHN0YXRlIHRyYW5zaXRpb24gZm9yJ30gICAgICAgPSAnQWRpY2lvbmFyIHVuIG51ZXZvIGVzdGFkbyBkZSB0cmFuc2ljafNuIHBhcmEnOwogICAgJExhbmctPnsnRWRpdCBhIHN0YXRlIHRyYW5zaXRpb24gZm9yJ30gICAgICAgICAgPSAnRWRpdGFyIHVuIGVzdGFkbyBkZSB0cmFuc2ljafNuIHBhcmEnOwogICAgJExhbmctPnsnT3ZlcnZpZXcgb3ZlciBzdGF0ZSB0cmFuc2l0aW9ucyBmb3InfSAgPSAnVmlzdGEgZGUgbGFzIHRyYW5zaWNpb25lcyBkZSBlc3RhZG8gcGFyYSc7CiAgICAkTGFuZy0+eydPYmplY3QgTmFtZSd9ICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdOb21icmUgZGVsIE9iamV0byc7CiAgICAkTGFuZy0+eydQbGVhc2Ugc2VsZWN0IGZpcnN0IGEgY2F0YWxvZyBjbGFzcyEnfSA9ICdQb3IgZmF2b3Igc2VsZWNjaW9uZSBwcmltZXJvIHVuYSBjbGFzZSBkZSBjYXThbG9nbyc7CgogICAgIyB3b3Jrb3JkZXIgdHlwZXMKICAgICRMYW5nLT57J2FwcHJvdmFsJ30gID0gJ0Fwcm9iYWNp824nOwogICAgJExhbmctPnsnZGVjaXNpb24nfSAgPSAnRGVjaXNp824nOwogICAgJExhbmctPnsnd29ya29yZGVyJ30gPSAnT3JkZW4gZGUgdHJhYmFqbyc7CiAgICAkTGFuZy0+eydiYWNrb3V0J30gICA9ICdQbGFuIGRlIFZ1ZWx0YSBBdHLhcyc7CiAgICAkTGFuZy0+eydwaXInfSAgICAgICA9ICdSZXZpc2nzbiBQb3N0LUltcGxlbWVudGFjafNuJzsKCiAgICAjIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBpbiBjb25kaXRpb24gZXhwcmVzc2lvbnMgYW5kIGFjdGlvbnMKICAgICRMYW5nLT57J0lUU01DaGFuZ2UnfSAgICA9ICdDYW1iaW8nOwogICAgJExhbmctPnsnSVRTTVdvcmtPcmRlcid9ID0gJ09yZGVuIGRlIFRyYWJham8nOwogICAgJExhbmctPnsnSVRTTUNvbmRpdGlvbid9ID0gJ0NvbmRpY2nzbic7CgogICAgIyBPdmVydmlld3MKICAgICRMYW5nLT57J0NoYW5nZSBTY2hlZHVsZSd9ID0gJ0NhbWJpYXIgUHJvZ3JhbWFjafNuJzsKCiAgICAjIFdvcmtvcmRlciBkZWxldGUKICAgICRMYW5nLT57J0RvIHlvdSByZWFsbHkgd2FudCB0byBkZWxldGUgdGhpcyB3b3Jrb3JkZXI/J30gPSAnUmVhbG1lbnRlIGRlc2VhIGJvcnJhciBlc3RhIG9yZGVuIGRlIHRyYWJham8nOwogICAgJExhbmctPnsnWW91IGNhbiBub3QgZGVsZXRlIHRoaXMgV29ya29yZGVyLiBJdCBpcyB1c2VkIGluIGF0IGxlYXN0IG9uZSBDb25kaXRpb24hJ30gPSAnTm8gZXMgcG9zaWJsZSBib3JyYXIgZXN0YSBvcmRlbiBkZSB0cmFiYWpvIHB1ZXMgZXN04SBzaWVuZG8gdXNhZGEgZW4gYWwgbWVub3MgdW5hIENvbmRpY2nzbic7CiAgICAkTGFuZy0+eydUaGlzIFdvcmtvcmRlciBpcyB1c2VkIGluIHRoZSBmb2xsb3dpbmcgQ29uZGl0aW9uKHMpJ30gPSAnRXN0YSBvcmRlbiBkZSB0cmFiYWpvIGVzIHVzYWRhIGVuIGxhcyBzaWd1aWVudGUocykgY29uZGljaW9uKGVzKSc7CgogICAgIyBUYWtlIHdvcmtvcmRlcgogICAgJExhbmctPnsnVGFrZSBXb3Jrb3JkZXInfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnVG9tYXIgT3JkZW4gZGUgVHJhYmFqbyc7CiAgICAkTGFuZy0+eydUYWtlIHRoZSB3b3Jrb3JkZXInfSAgICAgICAgICAgICAgICAgICAgICAgICA9ICdUb21hciBMYSBPcmRlbiBkZSBUcmFiYWpvJzsKICAgICRMYW5nLT57J0N1cnJlbnQgQWdlbnQnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0FnZW50ZSBhY3R1YWwnOwogICAgJExhbmctPnsnRG8geW91IHJlYWxseSB3YW50IHRvIHRha2UgdGhpcyB3b3Jrb3JkZXI/J30gPSAnUmVhbG1lbnRlIHF1aWVyZSB0b21hciBlc3RhIE9yZGVuIGRlIFRyYWJham8/JzsKCiAgICAjIENvbmRpdGlvbiBPdmVydmlldyBhbmQgRWRpdAogICAgJExhbmctPnsnQ29uZGl0aW9uJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0NvbmRpY2nzbic7CiAgICAkTGFuZy0+eydDb25kaXRpb25zJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQ29uZGljaW9uZXMnOwogICAgJExhbmctPnsnRXhwcmVzc2lvbid9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0V4cHJlc2nzbic7CiAgICAkTGFuZy0+eydFeHByZXNzaW9ucyd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnRXhwcmVzaW9uZXMnOwogICAgJExhbmctPnsnQWN0aW9uJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0FjY2nzbic7CiAgICAkTGFuZy0+eydBY3Rpb25zJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQWNjaW9uZXMnOwogICAgJExhbmctPnsnTWF0Y2hpbmcnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0NvaW5jaWRlbnRlcyc7CiAgICAkTGFuZy0+eydDb25kaXRpb25zIGFuZCBBY3Rpb25zJ30gICAgICAgICAgICAgICAgICAgPSAnQ29uZGljaW9uZXMgeSBBY2Npb25lcyc7CiAgICAkTGFuZy0+eydBZGQgbmV3IGNvbmRpdGlvbiBhbmQgYWN0aW9uIHBhaXInfSAgICAgICAgPSAnQWRpY2lvbmFyIG51ZXZvIHBhciBjb25kaWNp824tYWNjafNuJzsKICAgICRMYW5nLT57J0EgY29uZGl0aW9uIG11c3QgaGF2ZSBhIG5hbWUhJ30gICAgICAgICAgICA9ICdDYWRhIGNvbmRpY2nzbiBkZWJlIHRlbmVyIHVuIG5vbWJyZSEnOwogICAgJExhbmctPnsnQ29uZGl0aW9uIEVkaXQnfSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0VkaXRhciBDb25kaWNp824nOwogICAgJExhbmctPnsnQWRkIG5ldyBleHByZXNzaW9uJ30gICAgICAgICAgICAgICAgICAgICAgID0gJ0FkaWNpb25hciBudWV2YSBleHByZXNp824nOwogICAgJExhbmctPnsnQWRkIG5ldyBhY3Rpb24nfSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0FkaWNpb25hciBudWV2YSBhY2Np824nOwogICAgJExhbmctPnsnQW55IGV4cHJlc3Npb24nfSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0N1YWxxdWllciBleHByZXNp824nOwogICAgJExhbmctPnsnQWxsIGV4cHJlc3Npb25zJ30gICAgICAgICAgICAgICAgICAgICAgICAgID0gJ1RvZGFzIGxhcyBleHByZXNpb25lcyc7CiAgICAkTGFuZy0+eydhbnknfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnQ3VhbHF1aWVyYSc7CiAgICAkTGFuZy0+eydhbGwnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnVG9kbyc7CiAgICAkTGFuZy0+eydpcyd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnZXMnOwogICAgJExhbmctPnsnaXMgbm90J30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ25vIGVzJzsKICAgICRMYW5nLT57J2lzIGVtcHR5J30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdlc3ThIHZhY+1hJzsKICAgICRMYW5nLT57J2lzIG5vdCBlbXB0eSd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdubyBlc3ThIHZhY+1hJzsKICAgICRMYW5nLT57J2lzIGdyZWF0ZXIgdGhhbid9ICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdlcyBt4XMgZ3JhbmRlIHF1ZSc7CiAgICAkTGFuZy0+eydpcyBsZXNzIHRoYW4nfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnZXMgbWVub3IgcXVlJzsKICAgICRMYW5nLT57J2lzIGJlZm9yZSd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdlc3ThIGFudGVzJzsKICAgICRMYW5nLT57J2lzIGFmdGVyJ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdlc3ThIGRlc3B16XMnOwogICAgJExhbmctPnsnY29udGFpbnMnfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2NvbnRpZW5lJzsKICAgICRMYW5nLT57J25vdCBjb250YWlucyd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdubyBjb250aWVuZSc7CiAgICAkTGFuZy0+eydiZWdpbnMgd2l0aCd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAnY29taWVuemEgY29uJzsKICAgICRMYW5nLT57J2VuZHMgd2l0aCd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdmaW5hbGl6YSBjb24nOwogICAgJExhbmctPnsnc2V0J30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ2NvbmZpZ3VyYWRhJzsKICAgICRMYW5nLT57J2xvY2snfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICdibG9xdWVhZGEnOwoKICAgICMgQ2hhbmdlIFpvb20KICAgICRMYW5nLT57J0NoYW5nZSBJbml0aWF0b3IocyknfSA9ICdJbmljaWFkb3IoZXMpIGRlbCBjYW1iaW9zJzsKCiAgICAjIEFnZW50SVRTTUNoYW5nZVByaW50CiAgICAkTGFuZy0+eydMaW5rZWQgT2JqZWN0cyd9ID0gJ09iamV0b3MgVmluY3VsYWRvcyc7CiAgICAkTGFuZy0+eydGdWxsLVRleHQgU2VhcmNoIGluIENoYW5nZSBhbmQgV29ya29yZGVyJ30gPSAnQvpzcXVlZGEgZGUgdGV4dG8gY29tcGxldG8gZW4gdW4gQ2FtYmlvIG8gdW5hIE9yZGVuIGRlIFRyYWJham8nOwoKICAgICMgQWdlbnRJVFNNQ2hhbmdlU2VhcmNoCiAgICAkTGFuZy0+eydObyBYWFggc2V0dGluZ3MnfSA9ICJObyBoYXkgY29uZmlndXJhY2lvbmVzICclcycgIjsKCiAgICByZXR1cm4gMTsKfQoKMTsK</File>
        <File Location="Kernel/Modules/AdminITSMChangeCIPAllocate.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AdminITSMChangeNotification.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AdminITSMStateMachine.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMCABMemberSearch.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTUNBQk1lbWJlclNlYXJjaC5wbSAtIGEgbW9kdWxlIHVzZWQgZm9yIHRoZSBhdXRvY29tcGxldGUgZmVhdHVyZQojIENvcHlyaWdodCAoQykgMjAwMS0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLm9yZy8KIyAtLQojICRJZDogQWdlbnRJVFNNQ0FCTWVtYmVyU2VhcmNoLnBtLHYgMS4xMSAyMDEwLzA1LzExIDE1OjIxOjI2IHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRJVFNNQ0FCTWVtYmVyU2VhcmNoOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXI7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjExICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBhbGwgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhQYXJhbU9iamVjdCBEQk9iamVjdCBMYXlvdXRPYmplY3QgQ29uZmlnT2JqZWN0IExvZ09iamVjdCBVc2VyT2JqZWN0IEdyb3VwT2JqZWN0KQogICAgICAgICkKICAgIHsKICAgICAgICBpZiAoICEkU2VsZi0+eyRPYmplY3R9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkZhdGFsRXJyb3IoIE1lc3NhZ2UgPT4gIkdvdCBubyAkT2JqZWN0ISIgKTsKICAgICAgICB9CiAgICB9CgogICAgIyBjcmVhdGUgbmVlZGVkIG9iamVjdHMKICAgICRTZWxmLT57Q3VzdG9tZXJVc2VyT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXItPm5ldyglUGFyYW0pOwoKICAgICMgZ2V0IGNvbmZpZyBmb3IgZnJvbnRlbmQKICAgICRTZWxmLT57Q29uZmlnfSA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCJJVFNNQ2hhbmdlOjpGcm9udGVuZDo6JFNlbGYtPntBY3Rpb259Iik7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJEpTT04gPSAnJzsKCiAgICAjIHNlYXJjaCBmb3IgcG9zc2libGUgQ0FCIG1lbWJlcnMKICAgIGlmICggISRTZWxmLT57U3ViYWN0aW9ufSApIHsKCiAgICAgICAgIyBnZXQgbmVlZGVkIHBhcmFtcwogICAgICAgIG15ICRTZWFyY2ggPSAkU2VsZi0+e1BhcmFtT2JqZWN0fS0+R2V0UGFyYW0oIFBhcmFtID0+ICdTZWFyY2gnICkgfHwgJyc7CiAgICAgICAgbXkgJEdyb3VwcyA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ0dyb3VwcycgKSB8fCAnJzsKCiAgICAgICAgIyBnZXQgYWxsIG1lbWJlcnMgb2YgdGhlIGdyb3VwcwogICAgICAgIG15ICVHcm91cFVzZXJzOwogICAgICAgIGlmICgkR3JvdXBzKSB7CiAgICAgICAgICAgIG15IEBHcm91cE5hbWVzID0gc3BsaXQgLyxccysvLCAkR3JvdXBzOwoKICAgICAgICAgICAgZm9yIG15ICRHcm91cE5hbWUgKEBHcm91cE5hbWVzKSB7CiAgICAgICAgICAgICAgICBteSAkR3JvdXBJRCA9ICRTZWxmLT57R3JvdXBPYmplY3R9LT5Hcm91cExvb2t1cCgKICAgICAgICAgICAgICAgICAgICBHcm91cCA9PiAkR3JvdXBOYW1lLAogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICAjIGdldCB1c2VyIGdyb3VwcwogICAgICAgICAgICAgICAgbXkgJVVzZXJzID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICAgICAgICAgICAgICBHcm91cElEID0+ICRHcm91cElELAogICAgICAgICAgICAgICAgICAgIFR5cGUgICAgPT4gJ3JvJywKICAgICAgICAgICAgICAgICAgICBSZXN1bHQgID0+ICdIQVNIJywKICAgICAgICAgICAgICAgICAgICBDYWNoZWQgID0+IDEsCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIG15IEBVc2VySURzID0ga2V5cyAlVXNlcnM7CiAgICAgICAgICAgICAgICBAR3JvdXBVc2Vyc3tAVXNlcklEc30gPSBAVXNlcklEczsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyB3b3JrYXJvdW5kLCBhbGwgYXV0byBjb21wbGV0aW9uIHJlcXVlc3RzIGdldCBwb3N0ZWQgYnkgdXRmOCBhbnl3YXkKICAgICAgICAjIGNvbnZlcnQgYW55IHRvIDhiaXQgc3RyaW5nIGlmIGFwcGxpY2F0aW9uIGlzIG5vdCBydW5uaW5nIGluIHV0ZjgKICAgICAgICBpZiAoICEkU2VsZi0+e0VuY29kZU9iamVjdH0tPkVuY29kZUludGVybmFsVXNlZCgpICkgewogICAgICAgICAgICAkU2VhcmNoID0gJFNlbGYtPntFbmNvZGVPYmplY3R9LT5Db252ZXJ0KAogICAgICAgICAgICAgICAgVGV4dCA9PiAkU2VhcmNoLAogICAgICAgICAgICAgICAgRnJvbSA9PiAndXRmLTgnLAogICAgICAgICAgICAgICAgVG8gICA9PiAkU2VsZi0+e0xheW91dE9iamVjdH0tPntVc2VyQ2hhcnNldH0sCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAjIGdldCBhZ2VudCBsaXN0CiAgICAgICAgbXkgJVVzZXJMaXN0ID0gJFNlbGYtPntVc2VyT2JqZWN0fS0+VXNlclNlYXJjaCgKICAgICAgICAgICAgU2VhcmNoID0+ICRTZWFyY2gsCiAgICAgICAgICAgIFZhbGlkICA9PiAxLAogICAgICAgICk7CgogICAgICAgICMgVXNlclNlYXJjaCgpIHJldHVybnMgdmFsdWVzIHdpdGggYSB0cmFpbGluZyBzcGFjZSwgZ2V0IHJpZCBvZiBpdAogICAgICAgIGZvciBteSAkTmFtZSAoIHZhbHVlcyAlVXNlckxpc3QgKSB7CiAgICAgICAgICAgICROYW1lID1+IHN7IFxzKyBceiB9e314bXM7CiAgICAgICAgfQoKICAgICAgICAjIHRoZSBkYXRhIHRoYXQgd2lsbCBiZSBzZW50IGFzIHJlc3BvbnNlCiAgICAgICAgbXkgQERhdGE7CgogICAgICAgIFVTRVJJRDoKICAgICAgICBmb3IgbXkgJFVzZXJJRCAoIHNvcnQgeyAkVXNlckxpc3R7JGF9IGNtcCAkVXNlckxpc3R7JGJ9IH0ga2V5cyAlVXNlckxpc3QgKSB7CgogICAgICAgICAgICAjIGlmIGdyb3VwcyBhcmUgcmVxdWlyZWQgYW5kIHVzZXIgaXMgbm90IG1lbWJlciBvZiBvbmUgb2YgdGhlIGdyb3VwcwogICAgICAgICAgICAjIHRoZSBza2lwIHRoZSB1c2VyCiAgICAgICAgICAgIG5leHQgVVNFUklEIGlmICRHcm91cHMgJiYgISRHcm91cFVzZXJzeyRVc2VySUR9OwoKICAgICAgICAgICAgIyBUaGUgdmFsdWVzIGluICVVc2VyTGlzdCBhcmUgaW4gdGhlIGZvcm06ICdtbSBNYXggTXVzdGVybWFubicuCiAgICAgICAgICAgICMgU28gYXNzZW1ibGUgYSBuZWF0ZXIgc3RyaW5nIGZvciBkaXNwbGF5LgogICAgICAgICAgICAjIChBY3R1YWxseSBVc2VyU2VhcmNoKCkgY29udGFpbnMgY29kZSBmb3IgZm9ybWF0aW5nLCBidXQgdGhhdCBpcyB1c3VhbGx5IG5vdCBjYWxsZWQuKQogICAgICAgICAgICBteSAlVXNlciA9ICRTZWxmLT57VXNlck9iamVjdH0tPkdldFVzZXJEYXRhKAogICAgICAgICAgICAgICAgVXNlcklEID0+ICRVc2VySUQsCiAgICAgICAgICAgICAgICBWYWxpZCAgPT4gJFBhcmFte1ZhbGlkfSwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgbXkgJFVzZXJWYWx1ZVBsYWluID0gc3ByaW50ZiAnIiVzICVzIiA8JXM+JywKICAgICAgICAgICAgICAgICRVc2Vye1VzZXJGaXJzdG5hbWV9LAogICAgICAgICAgICAgICAgJFVzZXJ7VXNlckxhc3RuYW1lfSwKICAgICAgICAgICAgICAgICRVc2Vye1VzZXJFbWFpbH07CgogICAgICAgICAgICAjIGh0bWwgcXVvdGUgY2hhcmFjdGVycyBsaWtlIDw+CiAgICAgICAgICAgIG15ICRVc2VyVmFsdWUgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkFzY2lpMkh0bWwoCiAgICAgICAgICAgICAgICBUZXh0ID0+ICRVc2VyVmFsdWVQbGFpbiwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIHB1c2ggQERhdGEsIHsKICAgICAgICAgICAgICAgIFVzZXJLZXkgICAgICAgID0+ICRVc2VySUQsCiAgICAgICAgICAgICAgICBVc2VyVmFsdWUgICAgICA9PiAkVXNlclZhbHVlLAogICAgICAgICAgICAgICAgVXNlclZhbHVlUGxhaW4gPT4gJFVzZXJWYWx1ZVBsYWluLAogICAgICAgICAgICAgICAgVXNlclR5cGUgICAgICAgPT4gJ0NBQkFnZW50cycsCiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICAjIGdldCBjdXN0b21lciBsaXN0CiAgICAgICAgbXkgJUN1c3RvbWVyVXNlckxpc3QgPSAkU2VsZi0+e0N1c3RvbWVyVXNlck9iamVjdH0tPkN1c3RvbWVyU2VhcmNoKAogICAgICAgICAgICBTZWFyY2ggPT4gJFNlYXJjaCwKICAgICAgICAgICAgVmFsaWQgID0+IDEsCiAgICAgICAgKTsKCiAgICAgICAgQ1VTVE9NRVJVU0VSTE9HSU46CiAgICAgICAgZm9yIG15ICRDdXN0b21lclVzZXJMb2dpbiAoCiAgICAgICAgICAgIHNvcnQgeyAkQ3VzdG9tZXJVc2VyTGlzdHskYX0gY21wICRDdXN0b21lclVzZXJMaXN0eyRifSB9CiAgICAgICAgICAgIGtleXMgJUN1c3RvbWVyVXNlckxpc3QKICAgICAgICAgICAgKQogICAgICAgIHsKCiAgICAgICAgICAgICMgaWYgZ3JvdXBzIGFyZSByZXF1aXJlZCBhbmQgdXNlciBpcyBub3QgbWVtYmVyIG9mIG9uZSBvZiB0aGUgZ3JvdXBzCiAgICAgICAgICAgICMgdGhlIHNraXAgdGhlIHVzZXIKICAgICAgICAgICAgbmV4dCBVU0VSSUQgaWYgJEdyb3VwcyAmJiAhJEdyb3VwVXNlcnN7JEN1c3RvbWVyVXNlckxvZ2lufTsKCiAgICAgICAgICAgICMgaHRtbCBxdW90ZSBjaGFyYWN0ZXJzIGxpa2UgPD4KICAgICAgICAgICAgbXkgJEN1c3RvbWVyVXNlclZhbHVlUGxhaW4gPSAkQ3VzdG9tZXJVc2VyTGlzdHskQ3VzdG9tZXJVc2VyTG9naW59OwogICAgICAgICAgICAkQ3VzdG9tZXJVc2VyTGlzdHskQ3VzdG9tZXJVc2VyTG9naW59ID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Bc2NpaTJIdG1sKAogICAgICAgICAgICAgICAgVGV4dCA9PiAkQ3VzdG9tZXJVc2VyTGlzdHskQ3VzdG9tZXJVc2VyTG9naW59LAogICAgICAgICAgICApOwoKICAgICAgICAgICAgcHVzaCBARGF0YSwgewogICAgICAgICAgICAgICAgVXNlcktleSAgICAgICAgPT4gJEN1c3RvbWVyVXNlckxvZ2luLAogICAgICAgICAgICAgICAgVXNlclZhbHVlICAgICAgPT4gJEN1c3RvbWVyVXNlckxpc3R7JEN1c3RvbWVyVXNlckxvZ2lufSwKICAgICAgICAgICAgICAgIFVzZXJWYWx1ZVBsYWluID0+ICRDdXN0b21lclVzZXJWYWx1ZVBsYWluLAogICAgICAgICAgICAgICAgVXNlclR5cGUgICAgICAgPT4gJ0NBQkN1c3RvbWVycycsCiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICAjIGJ1aWxkIEpTT04gb3V0cHV0CiAgICAgICAgJEpTT04gPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkpTT04oCiAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgUmVzcG9uc2UgPT4gewogICAgICAgICAgICAgICAgICAgIFJlc3VsdHMgPT4gXEBEYXRhLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICApOwogICAgfQoKICAgICMgc2VuZCBKU09OIHJlc3BvbnNlCiAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5BdHRhY2htZW50KAogICAgICAgIENvbnRlbnRUeXBlID0+ICd0ZXh0L3BsYWluOyBjaGFyc2V0PScgLiAkU2VsZi0+e0xheW91dE9iamVjdH0tPntDaGFyc2V0fSwKICAgICAgICBDb250ZW50ICAgICA9PiAkSlNPTiB8fCAnJywKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgKTsKCn0KCjE7Cg==</File>
        <File Location="Kernel/Modules/AgentITSMChange.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeAdd.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeCABTemplate.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTUNoYW5nZUNBQlRlbXBsYXRlLnBtIC0gdGhlIE9UUlM6OklUU006OkNoYW5nZU1hbmFnZW1lbnQgYWRkIENBQiB0ZW1wbGF0ZSBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTUNoYW5nZUNBQlRlbXBsYXRlLnBtLHYgMS4zIDIwMTAvMDIvMDMgMTI6MTY6MDMgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRJVFNNQ2hhbmdlQ0FCVGVtcGxhdGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7CnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6VGVtcGxhdGU7CnVzZSBLZXJuZWw6OlN5c3RlbTo6VmFsaWQ7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjMgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAocXcoUGFyYW1PYmplY3QgREJPYmplY3QgTGF5b3V0T2JqZWN0IExvZ09iamVjdCBDb25maWdPYmplY3QpKSB7CiAgICAgICAgaWYgKCAhJFNlbGYtPnskT2JqZWN0fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5GYXRhbEVycm9yKCBNZXNzYWdlID0+ICJHb3Qgbm8gJE9iamVjdCEiICk7CiAgICAgICAgfQogICAgfQoKICAgICMgY3JlYXRlIGFkZGl0aW9uYWwgb2JqZWN0cwogICAgJFNlbGYtPntDaGFuZ2VPYmplY3R9ICAgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZS0+bmV3KCVQYXJhbSk7CiAgICAkU2VsZi0+e1RlbXBsYXRlT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpUZW1wbGF0ZS0+bmV3KCVQYXJhbSk7CiAgICAkU2VsZi0+e1ZhbGlkT2JqZWN0fSAgICA9IEtlcm5lbDo6U3lzdGVtOjpWYWxpZC0+bmV3KCVQYXJhbSk7CgogICAgIyBnZXQgY29uZmlnIG9mIGZyb250ZW5kIG1vZHVsZQogICAgJFNlbGYtPntDb25maWd9ID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoIklUU01DaGFuZ2U6OkZyb250ZW5kOjokU2VsZi0+e0FjdGlvbn0iKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGdldCBuZWVkZWQgQ2hhbmdlSUQKICAgIG15ICRDaGFuZ2VJRCA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ0NoYW5nZUlEJyApOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkQ2hhbmdlSUQgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ05vIENoYW5nZUlEIGlzIGdpdmVuIScsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBjaGVjayBwZXJtaXNzaW9ucwogICAgbXkgJEFjY2VzcyA9ICRTZWxmLT57Q2hhbmdlT2JqZWN0fS0+UGVybWlzc2lvbigKICAgICAgICBUeXBlICAgICA9PiAkU2VsZi0+e0NvbmZpZ30tPntQZXJtaXNzaW9ufSwKICAgICAgICBDaGFuZ2VJRCA9PiAkQ2hhbmdlSUQsCiAgICAgICAgVXNlcklEICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICAjIGVycm9yIHNjcmVlbgogICAgaWYgKCAhJEFjY2VzcyApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Ob1Blcm1pc3Npb24oCiAgICAgICAgICAgIE1lc3NhZ2UgICAgPT4gIllvdSBuZWVkICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259IHBlcm1pc3Npb25zISIsCiAgICAgICAgICAgIFdpdGhIZWFkZXIgPT4gJ3llcycsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCBjaGFuZ2UKICAgIG15ICRDaGFuZ2UgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUdldCgKICAgICAgICBDaGFuZ2VJRCA9PiAkQ2hhbmdlSUQsCiAgICAgICAgVXNlcklEICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICAjIGVycm9yIHNjcmVlbgogICAgaWYgKCAhJENoYW5nZSApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgTWVzc2FnZSA9PiAiTm8gY2hhbmdlIGZvdW5kIGZvciBjaGFuZ2UgSUQgJENoYW5nZUlELiIsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBzdG9yZSBuZWVkZWQgcGFyYW1ldGVycyBpbiAlR2V0UGFyYW0gdG8gbWFrZSBpdCByZWxvYWRhYmxlCiAgICBteSAlR2V0UGFyYW07CiAgICBmb3IgbXkgJFBhcmFtTmFtZSAocXcoVGVtcGxhdGVOYW1lIENvbW1lbnQgVmFsaWRJRCkpIHsKICAgICAgICAkR2V0UGFyYW17JFBhcmFtTmFtZX0gPSAkU2VsZi0+e1BhcmFtT2JqZWN0fS0+R2V0UGFyYW0oIFBhcmFtID0+ICRQYXJhbU5hbWUgKTsKICAgIH0KCiAgICAjIFJlbWVtYmVyIHRoZSByZWFzb24gd2h5IHNhdmluZyB3YXMgbm90IGF0dGVtcHRlZC4KICAgICMgVGhlIGl0ZW1zIGFyZSB0aGUgbmFtZXMgb2YgdGhlIGR0bCB2YWxpZGF0aW9uIGVycm9yIGJsb2Nrcy4KICAgIG15IEBWYWxpZGF0aW9uRXJyb3JzOwoKICAgICMgYWRkIGEgdGVtcGxhdGUKICAgIGlmICggJFNlbGYtPntTdWJhY3Rpb259IGVxICdBZGRUZW1wbGF0ZScgKSB7CgogICAgICAgICMgY2hlY2sgdmFsaWRpdHkgb2YgdGhlIHRlbXBsYXRlIG5hbWUKICAgICAgICBpZiAoICEkR2V0UGFyYW17VGVtcGxhdGVOYW1lfSApIHsKICAgICAgICAgICAgcHVzaCBAVmFsaWRhdGlvbkVycm9ycywgJ0ludmFsaWRUZW1wbGF0ZU5hbWUnOwogICAgICAgIH0KCiAgICAgICAgaWYgKCAhQFZhbGlkYXRpb25FcnJvcnMgKSB7CgogICAgICAgICAgICAjIHNlcmlhbGl6ZSB0aGUgY2hhbmdlCiAgICAgICAgICAgIG15ICRUZW1wbGF0ZUNvbnRlbnQgPSAkU2VsZi0+e1RlbXBsYXRlT2JqZWN0fS0+VGVtcGxhdGVTZXJpYWxpemUoCiAgICAgICAgICAgICAgICBUZW1wbGF0ZVR5cGUgPT4gJ0NBQicsCiAgICAgICAgICAgICAgICBDaGFuZ2VJRCAgICAgPT4gJENoYW5nZUlELAogICAgICAgICAgICAgICAgVXNlcklEICAgICAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICMgc2hvdyBlcnJvciBtZXNzYWdlCiAgICAgICAgICAgIGlmICggISRUZW1wbGF0ZUNvbnRlbnQgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgICAgICAgICBNZXNzYWdlID0+ICJUaGUgQ0FCIG9mIGNoYW5nZSAnJENoYW5nZUlEJyBjb3VsZCBub3QgYmUgc2VyaWFsaXplZC4iLAogICAgICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBzdG9yZSB0aGUgc2VyaWFsaXplZCBjaGFuZ2UKICAgICAgICAgICAgbXkgJFRlbXBsYXRlSUQgPSAkU2VsZi0+e1RlbXBsYXRlT2JqZWN0fS0+VGVtcGxhdGVBZGQoCiAgICAgICAgICAgICAgICBOYW1lICAgICAgICAgPT4gJEdldFBhcmFte1RlbXBsYXRlTmFtZX0sCiAgICAgICAgICAgICAgICBDb21tZW50ICAgICAgPT4gJEdldFBhcmFte0NvbW1lbnR9LAogICAgICAgICAgICAgICAgVmFsaWRJRCAgICAgID0+ICRHZXRQYXJhbXtWYWxpZElEfSwKICAgICAgICAgICAgICAgIFRlbXBsYXRlVHlwZSA9PiAnQ0FCJywKICAgICAgICAgICAgICAgIENvbnRlbnQgICAgICA9PiAkVGVtcGxhdGVDb250ZW50LAogICAgICAgICAgICAgICAgVXNlcklEICAgICAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICMgc2hvdyBlcnJvciBtZXNzYWdlCiAgICAgICAgICAgIGlmICggISRUZW1wbGF0ZUlEICkgewogICAgICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZSA9PiAiQ291bGQgbm90IGFkZCB0aGUgdGVtcGxhdGUuIiwKICAgICAgICAgICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgZXZlcnl0aGluZyB3ZW50IHdlbGwsIHJlZGlyZWN0IHRvIHpvb20gbWFzawogICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5SZWRpcmVjdCgKICAgICAgICAgICAgICAgIE9QID0+ICJBY3Rpb249QWdlbnRJVFNNQ2hhbmdlSW52b2x2ZWRQZXJzb25zJkNoYW5nZUlEPSRDaGFuZ2VJRCIsCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CgogICAgICAgICMgbm8gc3ViYWN0aW9uLAogICAgfQoKICAgICMgb3V0cHV0IGhlYWRlcgogICAgbXkgJE91dHB1dCA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+SGVhZGVyKAogICAgICAgIFRpdGxlID0+ICdUZW1wbGF0ZScsCiAgICApOwogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk5hdmlnYXRpb25CYXIoKTsKCiAgICBteSAkVmFsaWRTZWxlY3Rpb25TdHJpbmcgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJ1aWxkU2VsZWN0aW9uKAogICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAkU2VsZi0+e1ZhbGlkT2JqZWN0fS0+VmFsaWRMaXN0KCksCiAgICAgICAgfSwKICAgICAgICBOYW1lICAgICAgID0+ICdWYWxpZElEJywKICAgICAgICBTZWxlY3RlZElEID0+ICRHZXRQYXJhbXtWYWxpZElEfSB8fCAoICRTZWxmLT57VmFsaWRPYmplY3R9LT5WYWxpZElEc0dldCgpIClbMF0sCiAgICAgICAgU29ydCAgICAgICA9PiAnTnVtZXJpY0tleScsCiAgICApOwoKICAgICMgYWRkIHRoZSB2YWxpZGF0aW9uIGVycm9yIG1lc3NhZ2VzCiAgICBmb3IgbXkgJEJsb2NrTmFtZSAoQFZhbGlkYXRpb25FcnJvcnMpIHsKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKCBOYW1lID0+ICRCbG9ja05hbWUgKTsKICAgIH0KCiAgICAjIHN0YXJ0IHRlbXBsYXRlIG91dHB1dAogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50SVRTTUNoYW5nZUNBQlRlbXBsYXRlJywKICAgICAgICBEYXRhICAgICAgICAgPT4gewogICAgICAgICAgICAlR2V0UGFyYW0sCiAgICAgICAgICAgIENoYW5nZUlEICAgICAgICAgICAgID0+ICRDaGFuZ2VJRCwKICAgICAgICAgICAgVmFsaWRTZWxlY3Rpb25TdHJpbmcgPT4gJFZhbGlkU2VsZWN0aW9uU3RyaW5nLAogICAgICAgICAgICBDaGFuZ2VOdW1iZXIgICAgICAgICA9PiAkQ2hhbmdlLT57Q2hhbmdlTnVtYmVyfSwKICAgICAgICAgICAgQ2hhbmdlVGl0bGUgICAgICAgICAgPT4gJENoYW5nZS0+e0NoYW5nZVRpdGxlfSwKICAgICAgICB9LAogICAgKTsKCiAgICAjIGFkZCBmb290ZXIKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Gb290ZXIoKTsKCiAgICByZXR1cm4gJE91dHB1dDsKfQoKMTsK</File>
        <File Location="Kernel/Modules/AgentITSMChangeCondition.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTUNoYW5nZUNvbmRpdGlvbi5wbSAtIHRoZSBPVFJTOjpJVFNNOjpDaGFuZ2VNYW5hZ2VtZW50IGNvbmRpdGlvbiBvdmVydmlldyBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTUNoYW5nZUNvbmRpdGlvbi5wbSx2IDEuNSAyMDEwLzAyLzA0IDIzOjU2OjM4IHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRJVFNNQ2hhbmdlQ29uZGl0aW9uOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOwp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Db25kaXRpb247CnVzZSBLZXJuZWw6OlN5c3RlbTo6VmFsaWQ7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjUgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAocXcoQ29uZmlnT2JqZWN0IFBhcmFtT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBMb2dPYmplY3QpKSB7CiAgICAgICAgaWYgKCAhJFNlbGYtPnskT2JqZWN0fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5GYXRhbEVycm9yKCBNZXNzYWdlID0+ICJHb3Qgbm8gJE9iamVjdCEiICk7CiAgICAgICAgfQogICAgfQoKICAgICMgY3JlYXRlIG5lZWRlZCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gICAgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZS0+bmV3KCVQYXJhbSk7CiAgICAkU2VsZi0+e0NvbmRpdGlvbk9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTUNvbmRpdGlvbi0+bmV3KCVQYXJhbSk7CiAgICAkU2VsZi0+e1ZhbGlkT2JqZWN0fSAgICAgPSBLZXJuZWw6OlN5c3RlbTo6VmFsaWQtPm5ldyglUGFyYW0pOwoKICAgICMgZ2V0IGNvbmZpZyBvZiBmcm9udGVuZCBtb2R1bGUKICAgICRTZWxmLT57Q29uZmlnfSA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCJJVFNNQ2hhbmdlOjpGcm9udGVuZDo6JFNlbGYtPntBY3Rpb259Iik7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBzdG9yZSBuZWVkZWQgcGFyYW1ldGVycyBpbiAlR2V0UGFyYW0gdG8gbWFrZSB0aGlzIHBhZ2UgcmVsb2FkYWJsZQogICAgbXkgJUdldFBhcmFtOwogICAgZm9yIG15ICRQYXJhbU5hbWUgKHF3KENoYW5nZUlEIENvbmRpdGlvbklEIEFkZENvbmRpdGlvbikpIHsKICAgICAgICAkR2V0UGFyYW17JFBhcmFtTmFtZX0gPSAkU2VsZi0+e1BhcmFtT2JqZWN0fS0+R2V0UGFyYW0oIFBhcmFtID0+ICRQYXJhbU5hbWUgKTsKICAgIH0KCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJEdldFBhcmFte0NoYW5nZUlEfSApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgTWVzc2FnZSA9PiAnTm8gQ2hhbmdlSUQgaXMgZ2l2ZW4hJywKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGNoZWNrIHBlcm1pc3Npb25zCiAgICBteSAkQWNjZXNzID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5QZXJtaXNzaW9uKAogICAgICAgIFR5cGUgICAgID0+ICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259LAogICAgICAgIENoYW5nZUlEID0+ICRHZXRQYXJhbXtDaGFuZ2VJRH0sCiAgICAgICAgVXNlcklEICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICAjIGVycm9yIHNjcmVlbgogICAgaWYgKCAhJEFjY2VzcyApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Ob1Blcm1pc3Npb24oCiAgICAgICAgICAgIE1lc3NhZ2UgICAgPT4gIllvdSBuZWVkICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259IHBlcm1pc3Npb25zISIsCiAgICAgICAgICAgIFdpdGhIZWFkZXIgPT4gJ3llcycsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCBjaGFuZ2UgZGF0YQogICAgbXkgJENoYW5nZURhdGEgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUdldCgKICAgICAgICBDaGFuZ2VJRCA9PiAkR2V0UGFyYW17Q2hhbmdlSUR9LAogICAgICAgIFVzZXJJRCAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICk7CgogICAgIyBjaGVjayBpZiBjaGFuZ2UgaXMgZm91bmQKICAgIGlmICggISRDaGFuZ2VEYXRhICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICBNZXNzYWdlID0+ICJDaGFuZ2UgJyRHZXRQYXJhbXtDaGFuZ2VJRH0nIG5vdCBmb3VuZCBpbiBkYXRhYmFzZSEiLAogICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICApOwogICAgfQoKICAgICMgZ2V0IHZhbGlkIGxpc3QKICAgIG15ICVWYWxpZExpc3QgPSAkU2VsZi0+e1ZhbGlkT2JqZWN0fS0+VmFsaWRMaXN0KCk7CgogICAgIyBhZGQgY29uZGl0aW9uIGJ1dHRvbiB3YXMgcHJlc3NlZAogICAgaWYgKCAkR2V0UGFyYW17QWRkQ29uZGl0aW9ufSApIHsKCiAgICAgICAgIyByZWRpcmVjdCB0byBjb25kaXRpb24gZWRpdCBtYXNrCiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+UmVkaXJlY3QoCiAgICAgICAgICAgIE9QID0+CiAgICAgICAgICAgICAgICAiQWN0aW9uPUFnZW50SVRTTUNoYW5nZUNvbmRpdGlvbkVkaXQ7Q2hhbmdlSUQ9JEdldFBhcmFte0NoYW5nZUlEfTtDb25kaXRpb25JRD1ORVciLAogICAgICAgICk7CiAgICB9CgogICAgIyBnZXQgYWxsIGNvbmRpdGlvbiBpZHMgZm9yIHRoZSBnaXZlbiBjaGFuZ2UgaWQsIGluY2x1ZGluZyBpbnZhbGlkIGNvbmRpdGlvbnMKICAgIG15ICRDb25kaXRpb25JRHNSZWYgPSAkU2VsZi0+e0NvbmRpdGlvbk9iamVjdH0tPkNvbmRpdGlvbkxpc3QoCiAgICAgICAgQ2hhbmdlSUQgPT4gJEdldFBhcmFte0NoYW5nZUlEfSwKICAgICAgICBWYWxpZCAgICA9PiAwLAogICAgICAgIFVzZXJJRCAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICk7CgogICAgIyBjaGVjayBpZiBhIGNvbmRpdGlvbiBzaG91bGQgYmUgZGVsZXRlZAogICAgZm9yIG15ICRDb25kaXRpb25JRCAoIEB7JENvbmRpdGlvbklEc1JlZn0gKSB7CiAgICAgICAgaWYgKCAkU2VsZi0+e1BhcmFtT2JqZWN0fS0+R2V0UGFyYW0oIFBhcmFtID0+ICdEZWxldGVDb25kaXRpb25JRDo6JyAuICRDb25kaXRpb25JRCApICkgewoKICAgICAgICAgICAgIyBkZWxldGUgdGhlIGNvbmRpdGlvbgogICAgICAgICAgICBteSAkU3VjY2VzcyA9ICRTZWxmLT57Q29uZGl0aW9uT2JqZWN0fS0+Q29uZGl0aW9uRGVsZXRlKAogICAgICAgICAgICAgICAgQ29uZGl0aW9uSUQgPT4gJENvbmRpdGlvbklELAogICAgICAgICAgICAgICAgVXNlcklEICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICApOwoKICAgICAgICAgICAgIyBjaGVjayBlcnJvcgogICAgICAgICAgICBpZiAoICEkU3VjY2VzcyApIHsKICAgICAgICAgICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2UgPT4gIkNvdWxkIG5vdCBkZWxldGUgQ29uZGl0aW9uSUQgJENvbmRpdGlvbklEISIsCiAgICAgICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CgogICAgICAgICAgICAjIHJlZGlyZWN0IHRvIG92ZXJ2aWV3CiAgICAgICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPlJlZGlyZWN0KAogICAgICAgICAgICAgICAgT1AgPT4gIkFjdGlvbj0kU2VsZi0+e0FjdGlvbn07Q2hhbmdlSUQ9JEdldFBhcmFte0NoYW5nZUlEfSIsCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQoKICAgICMgb25seSBzaG93IHRoZSB0YWJsZSBoZWFkbGluZSBpZiB0aGVyZSBjb25kaXRpb25zIHRvIGJlIHNob3duCiAgICBpZiAoIEB7JENvbmRpdGlvbklEc1JlZn0gKSB7CgogICAgICAgICMgb3V0cHV0IG92ZXJ2aWV3CiAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXcnLAogICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgICAgICV7JENoYW5nZURhdGF9LAogICAgICAgICAgICB9LAogICAgICAgICk7CiAgICB9CgogICAgbXkgJENzc0NsYXNzID0gJyc7CiAgICBmb3IgbXkgJENvbmRpdGlvbklEICggQHskQ29uZGl0aW9uSURzUmVmfSApIHsKCiAgICAgICAgIyBzZXQgb3V0cHV0IG9iamVjdAogICAgICAgICRDc3NDbGFzcyA9ICRDc3NDbGFzcyBlcSAnc2VhcmNoYWN0aXZlJyA/ICdzZWFyY2hwYXNzaXZlJyA6ICdzZWFyY2hhY3RpdmUnOwoKICAgICAgICAjIGdldCBjb25kaXRpb24gZGF0YQogICAgICAgIG15ICRDb25kaXRpb25EYXRhID0gJFNlbGYtPntDb25kaXRpb25PYmplY3R9LT5Db25kaXRpb25HZXQoCiAgICAgICAgICAgIENvbmRpdGlvbklEID0+ICRDb25kaXRpb25JRCwKICAgICAgICAgICAgVXNlcklEICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICk7CgogICAgICAgICMgb3V0cHV0IG92ZXJ2aWV3IHJvdwogICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgIE5hbWUgPT4gJ092ZXJ2aWV3Um93JywKICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICBDc3NDbGFzcyA9PiAkQ3NzQ2xhc3MsCiAgICAgICAgICAgICAgICBWYWxpZCAgICA9PiAkVmFsaWRMaXN0eyAkQ29uZGl0aW9uRGF0YS0+e1ZhbGlkSUR9IH0sCiAgICAgICAgICAgICAgICAleyRDb25kaXRpb25EYXRhfSwKICAgICAgICAgICAgfSwKICAgICAgICApOwogICAgfQoKICAgICMgb3V0cHV0IGhlYWRlcgogICAgbXkgJE91dHB1dCA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+SGVhZGVyKAogICAgICAgIFRpdGxlID0+ICdPdmVydmlldycsCiAgICApOwogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk5hdmlnYXRpb25CYXIoKTsKCiAgICAjIGdlbmVyYXRlIG91dHB1dAogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50SVRTTUNoYW5nZUNvbmRpdGlvbicsCiAgICAgICAgRGF0YSAgICAgICAgID0+IHsKICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAleyRDaGFuZ2VEYXRhfSwKICAgICAgICB9LAogICAgKTsKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Gb290ZXIoKTsKCiAgICByZXR1cm4gJE91dHB1dDsKfQoKMTsK</File>
        <File Location="Kernel/Modules/AgentITSMChangeConditionEdit.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeEdit.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeHistory.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeHistoryZoom.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTUNoYW5nZUhpc3Rvcnlab29tLnBtIC0gdGhlIE9UUlM6OklUU006OkNoYW5nZU1hbmFnZW1lbnQgY2hhbmdlIGhpc3Rvcnkgem9vbSBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTUNoYW5nZUhpc3Rvcnlab29tLnBtLHYgMS43IDIwMTAvMDEvMzEgMTM6NTE6MDEgbWFlIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRJVFNNQ2hhbmdlSGlzdG9yeVpvb207Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7CnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjsKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpIaXN0b3J5OwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS43ICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKHF3KFBhcmFtT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBMb2dPYmplY3QgQ29uZmlnT2JqZWN0KSkgewogICAgICAgIGlmICggISRTZWxmLT57JE9iamVjdH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RmF0YWxFcnJvciggTWVzc2FnZSA9PiAiR290IG5vICRPYmplY3QhIiApOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNyZWF0ZSBuZWVkZWQgb2JqZWN0cwogICAgJFNlbGYtPntDaGFuZ2VPYmplY3R9ICAgID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2UtPm5ldyglUGFyYW0pOwogICAgJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXItPm5ldyglUGFyYW0pOwogICAgJFNlbGYtPntIaXN0b3J5T2JqZWN0fSAgID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6Okhpc3RvcnktPm5ldyglUGFyYW0pOwoKICAgICMgZ2V0IGNvbmZpZyBvZiBmcm9udGVuZCBtb2R1bGUKICAgICRTZWxmLT57Q29uZmlnfSA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCJJVFNNQ2hhbmdlOjpGcm9udGVuZDo6JFNlbGYtPntBY3Rpb259Iik7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBnZXQgbmVlZGVkIGNoYW5nZSBpZAogICAgbXkgJEhpc3RvcnlFbnRyeUlEID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnSGlzdG9yeUVudHJ5SUQnICk7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRIaXN0b3J5RW50cnlJRCApIHsKCiAgICAgICAgIyBlcnJvciBwYWdlCiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIkNhbid0IHNob3cgaGlzdG9yeSB6b29tLCBubyBIaXN0b3J5RW50cnlJRCBpcyBnaXZlbiEiLAogICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICApOwogICAgfQoKICAgICMgZ2V0IGhpc3RvcnkgZW50cmllcwogICAgbXkgJEhpc3RvcnlFbnRyeSA9ICRTZWxmLT57SGlzdG9yeU9iamVjdH0tPkhpc3RvcnlFbnRyeUdldCgKICAgICAgICBIaXN0b3J5RW50cnlJRCA9PiAkSGlzdG9yeUVudHJ5SUQsCiAgICAgICAgVXNlcklEICAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICBpZiAoICEkSGlzdG9yeUVudHJ5ICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICBNZXNzYWdlID0+ICJIaXN0b3J5RW50cnkgJyRIaXN0b3J5RW50cnlJRCcgbm90IGZvdW5kIGluIGRhdGFiYXNlISIsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBjaGVjayBwZXJtaXNzaW9ucwogICAgbXkgJEFjY2VzcyA9ICRTZWxmLT57Q2hhbmdlT2JqZWN0fS0+UGVybWlzc2lvbigKICAgICAgICBUeXBlICAgICA9PiAkU2VsZi0+e0NvbmZpZ30tPntQZXJtaXNzaW9ufSwKICAgICAgICBDaGFuZ2VJRCA9PiAkSGlzdG9yeUVudHJ5LT57Q2hhbmdlSUR9LAogICAgICAgIFVzZXJJRCAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICk7CgogICAgIyBlcnJvciBzY3JlZW4KICAgIGlmICggISRBY2Nlc3MgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+Tm9QZXJtaXNzaW9uKAogICAgICAgICAgICBNZXNzYWdlICAgID0+ICJZb3UgbmVlZCAkU2VsZi0+e0NvbmZpZ30tPntQZXJtaXNzaW9ufSBwZXJtaXNzaW9ucyEiLAogICAgICAgICAgICBXaXRoSGVhZGVyID0+ICd5ZXMnLAogICAgICAgICk7CiAgICB9CgogICAgIyBnZXQgY2hhbmdlIGluZm9ybWF0aW9uCiAgICBteSAkQ2hhbmdlID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5DaGFuZ2VHZXQoCiAgICAgICAgQ2hhbmdlSUQgPT4gJEhpc3RvcnlFbnRyeS0+e0NoYW5nZUlEfSwKICAgICAgICBVc2VySUQgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgZXJyb3IKICAgIGlmICggISRDaGFuZ2UgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIkNoYW5nZSAnJEhpc3RvcnlFbnRyeS0+e0NoYW5nZUlEfScgbm90IGZvdW5kIGluIGRhdGFiYXNlISIsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBzaG93IGRhc2ggKCctJykgd2hlbiB0aGUgZmllbGQgaXMgZW1wdHkKICAgIGZvciBteSAkRmllbGQgKHF3KENvbnRlbnROZXcgQ29udGVudE9sZCkpIHsKICAgICAgICAkSGlzdG9yeUVudHJ5LT57JEZpZWxkfSB8fD0gJy0nCiAgICB9CgogICAgIyBvdXRwdXQgaGVhZGVyCiAgICBteSAkT3V0cHV0ID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5IZWFkZXIoCiAgICAgICAgVGl0bGUgPT4gJ0NoYW5nZUhpc3Rvcnlab29tJywKICAgICk7CiAgICAkT3V0cHV0IC49ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+TmF2aWdhdGlvbkJhcigpOwoKICAgICMgaGFuZGxlIGNvbmRpdGlvbiB1cGRhdGUKICAgIGlmICggJEhpc3RvcnlFbnRyeS0+e0hpc3RvcnlUeXBlfSBlcSAnQ29uZGl0aW9uVXBkYXRlJyApIHsKICAgICAgICAkSGlzdG9yeUVudHJ5LT57Q29udGVudE5ld30gPX4gc3sgXEEgXGQrICUlICguKykgXHogfXskMX14bXM7CiAgICAgICAgJEhpc3RvcnlFbnRyeS0+e0NvbnRlbnRPbGR9ID1+IHN7IFxBIFxkKyAlJSAoLispIFx6IH17JDF9eG1zOwogICAgfQoKICAgICMgc3RhcnQgdGVtcGxhdGUgb3V0cHV0CiAgICAkT3V0cHV0IC49ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+T3V0cHV0KAogICAgICAgIFRlbXBsYXRlRmlsZSA9PiAnQWdlbnRJVFNNQ2hhbmdlSGlzdG9yeVpvb20nLAogICAgICAgIERhdGEgICAgICAgICA9PiB7CiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgJXskQ2hhbmdlfSwKICAgICAgICAgICAgJXskSGlzdG9yeUVudHJ5fSwKICAgICAgICB9LAogICAgKTsKCiAgICAjIGFkZCBmb290ZXIKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Gb290ZXIoKTsKCiAgICByZXR1cm4gJE91dHB1dDsKfQoKMTsK</File>
        <File Location="Kernel/Modules/AgentITSMChangeInvolvedPersons.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeManager.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeMyCAB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeMyChanges.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeMyWorkOrders.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangePIR.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangePrint.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTUNoYW5nZVByaW50LnBtIC0gdGhlIE9UUlM6OklUU006OkNoYW5nZU1hbmFnZW1lbnQgY2hhbmdlIHByaW50IG1vZHVsZQojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQWdlbnRJVFNNQ2hhbmdlUHJpbnQucG0sdiAxLjQwIDIwMTAvMDQvMjcgMjA6MzY6NTcgdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudElUU01DaGFuZ2VQcmludDsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBMaXN0OjpVdGlsIHF3KG1heCk7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7CnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjsKdXNlIEtlcm5lbDo6U3lzdGVtOjpMaW5rT2JqZWN0Owp1c2UgS2VybmVsOjpTeXN0ZW06OlBERjsKdXNlIEtlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXI7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjQwICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KFBhcmFtT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBMb2dPYmplY3QgQ29uZmlnT2JqZWN0IFVzZXJPYmplY3QpCiAgICAgICAgKQogICAgewogICAgICAgIGlmICggISRTZWxmLT57JE9iamVjdH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RmF0YWxFcnJvciggTWVzc2FnZSA9PiAiR290IG5vICRPYmplY3QhIiApOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNyZWF0ZSBhZGRpdGlvbmFsIG9iamVjdHMKICAgICRTZWxmLT57Q2hhbmdlT2JqZWN0fSAgICAgICA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoJVBhcmFtKTsKICAgICRTZWxmLT57V29ya09yZGVyT2JqZWN0fSAgICA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyLT5uZXcoJVBhcmFtKTsKICAgICRTZWxmLT57Q3VzdG9tZXJVc2VyT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXItPm5ldyglUGFyYW0pOwogICAgJFNlbGYtPntMaW5rT2JqZWN0fSAgICAgICAgID0gS2VybmVsOjpTeXN0ZW06OkxpbmtPYmplY3QtPm5ldyglUGFyYW0pOwoKICAgICMgd2hlbiB0aGVyZSBpcyBubyBQREYtU3VwcG9ydCwgJFNlbGYtPntQREZPYmplY3R9IHdpbGwgYmUgdW5kZWZpbmVkCiAgICAkU2VsZi0+e1BERk9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6UERGLT5uZXcoJVBhcmFtKTsKCiAgICAjIGdldCBjb25maWcgb2YgZnJvbnRlbmQgbW9kdWxlCiAgICAkU2VsZi0+e0NvbmZpZ30gPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTUNoYW5nZTo6RnJvbnRlbmQ6OiRTZWxmLT57QWN0aW9ufSIpOwoKICAgICMgUGFnZSBjb250cm9scyB0aGUgUERGLWdlbmVyYXRpb24KICAgICMgaXQgd29uJ3QgYmUgdXNlZCB3aGVuIHRoZXJlIGlzIG5vIFBERi1TdXBwb3J0CiAgICAkU2VsZi0+e1BhZ2V9ID0ge307CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBGaW5kIG91dCB3aGV0aGVyIGEgY2hhbmdlIG9yIGEgd29ya29yZGVyIHNob3VsZCBiZSBwcmludGVkLgogICAgIyBBIHdvcmtvcmRlciBpcyB0byBiZSBwcmludGVkIHdoZW4gdGhlIFdvcmtPcmRlcklEIGlzIHBhc3NlZC4KICAgICMgT3RoZXJ3aXNlIGEgY2hhbmdlIHNob3VsZCBiZSBwcmludGVkLgogICAgbXkgJFdvcmtPcmRlcklEID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnV29ya09yZGVySUQnICk7CiAgICBteSAkUHJpbnRXb3JrT3JkZXIgPSAkV29ya09yZGVySUQgPyAxIDogMDsKICAgIG15ICRQcmludENoYW5nZSAgICA9ICEkV29ya09yZGVySUQ7CiAgICBteSAkV29ya09yZGVyICAgICAgPSB7fTsKICAgIG15ICRDaGFuZ2VJRDsKCiAgICBpZiAoJFByaW50V29ya09yZGVyKSB7CgogICAgICAgICMgY2hlY2sgcGVybWlzc2lvbiBvbiB0aGUgd29ya29yZGVyCiAgICAgICAgbXkgJEFjY2VzcyA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+UGVybWlzc2lvbigKICAgICAgICAgICAgVHlwZSAgICAgICAgPT4gJFNlbGYtPntDb25maWd9LT57UGVybWlzc2lvbn0sCiAgICAgICAgICAgIFdvcmtPcmRlcklEID0+ICRXb3JrT3JkZXJJRCwKICAgICAgICAgICAgVXNlcklEICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICk7CgogICAgICAgICMgZXJyb3Igc2NyZWVuCiAgICAgICAgaWYgKCAhJEFjY2VzcyApIHsKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+Tm9QZXJtaXNzaW9uKAogICAgICAgICAgICAgICAgTWVzc2FnZSAgICA9PiAiWW91IG5lZWQgJFNlbGYtPntDb25maWd9LT57UGVybWlzc2lvbn0gcGVybWlzc2lvbnMhIiwKICAgICAgICAgICAgICAgIFdpdGhIZWFkZXIgPT4gJ3llcycsCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAjIGdldCB3b3Jrb3JkZXIgaW5mb3JtYXRpb24KICAgICAgICAkV29ya09yZGVyID0gJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9LT5Xb3JrT3JkZXJHZXQoCiAgICAgICAgICAgIFdvcmtPcmRlcklEID0+ICRXb3JrT3JkZXJJRCwKICAgICAgICAgICAgVXNlcklEICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICk7CgogICAgICAgICMgY2hlY2sgZXJyb3IKICAgICAgICBpZiAoICEkV29ya09yZGVyICkgewogICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgICAgIE1lc3NhZ2UgPT4gIldvcmtPcmRlciAnJFdvcmtPcmRlcklEJyBub3QgZm91bmQgaW4gZGF0YWJhc2UhIiwKICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgIyBpbmZlciB0aGUgY2hhbmdlIGlkIGZyb20gdGhlIHdvcmtvcmRlcgogICAgICAgICRDaGFuZ2VJRCA9ICRXb3JrT3JkZXItPntDaGFuZ2VJRH07CgogICAgICAgIGlmICggISRDaGFuZ2VJRCApIHsKCiAgICAgICAgICAgICMgZXJyb3IgcGFnZQogICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgICAgIE1lc3NhZ2UgPT4gIkNhbid0IGNyZWF0ZSBvdXRwdXQsIGFzIHRoZSB3b3Jrb3JkZXIgaXMgbm90IGF0dGFjaGVkIHRvIGEgY2hhbmdlISIsCiAgICAgICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKCiAgICAgICAgIyB0aGUgY2hhbmdlIGlkIGlzIHJlcXVpcmVkLCBhcyB3ZSBoYXZlIG5vIHdvcmtvcmRlciBpZAogICAgICAgICRDaGFuZ2VJRCA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ0NoYW5nZUlEJyApOwoKICAgICAgICBpZiAoICEkQ2hhbmdlSUQgKSB7CgogICAgICAgICAgICAjIGVycm9yIHBhZ2UKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgICAgICBNZXNzYWdlID0+ICJDYW4ndCBjcmVhdGUgb3V0cHV0LCBhcyBubyBDaGFuZ2VJRCBpcyBnaXZlbiEiLAogICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAjIGNoZWNrIHBlcm1pc3Npb24gb24gdGhlIGNoYW5nZQogICAgICAgIG15ICRBY2Nlc3MgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPlBlcm1pc3Npb24oCiAgICAgICAgICAgIFR5cGUgICAgID0+ICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259LAogICAgICAgICAgICBDaGFuZ2VJRCA9PiAkQ2hhbmdlSUQsCiAgICAgICAgICAgIFVzZXJJRCAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwoKICAgICAgICAjIGVycm9yIHNjcmVlbgogICAgICAgIGlmICggISRBY2Nlc3MgKSB7CiAgICAgICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPk5vUGVybWlzc2lvbigKICAgICAgICAgICAgICAgIE1lc3NhZ2UgICAgPT4gIllvdSBuZWVkICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259IHBlcm1pc3Npb25zISIsCiAgICAgICAgICAgICAgICBXaXRoSGVhZGVyID0+ICd5ZXMnLAogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KCiAgICAjIGdldCBjaGFuZ2UgaW5mb3JtYXRpb24KICAgIG15ICRDaGFuZ2UgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUdldCgKICAgICAgICBDaGFuZ2VJRCA9PiAkQ2hhbmdlSUQsCiAgICAgICAgVXNlcklEICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICAjIGNoZWNrIGVycm9yCiAgICBpZiAoICEkQ2hhbmdlICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICBNZXNzYWdlID0+ICJDaGFuZ2UgJyRDaGFuZ2VJRCcgbm90IGZvdW5kIGluIGRhdGFiYXNlISIsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBzb21lIGluaXQgZm9yIFBERi1PdXRwdXQKICAgIGlmICggJFNlbGYtPntQREZPYmplY3R9ICkgewoKICAgICAgICBteSAkUGFnZSA9ICRTZWxmLT57UGFnZX07CgogICAgICAgICMgZ2V0IG1heGltdW0gbnVtYmVyIG9mIHBhZ2VzCiAgICAgICAgJFBhZ2UtPntNYXhQYWdlc30gPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnUERGOjpNYXhQYWdlcycpOwogICAgICAgIGlmICggISRQYWdlLT57TWF4UGFnZXN9IHx8ICRQYWdlLT57TWF4UGFnZXN9IDwgMSB8fCAkUGFnZS0+e01heFBhZ2VzfSA+IDEwMDAgKSB7CiAgICAgICAgICAgICRQYWdlLT57TWF4UGFnZXN9ID0gMTAwOwogICAgICAgIH0KCiAgICAgICAgIyBwYWdlIGxheW91dCBzZXR0aW5ncwogICAgICAgICRQYWdlLT57TWFyZ2luVG9wfSAgICA9IDMwOwogICAgICAgICRQYWdlLT57TWFyZ2luUmlnaHR9ICA9IDQwOwogICAgICAgICRQYWdlLT57TWFyZ2luQm90dG9tfSA9IDQwOwogICAgICAgICRQYWdlLT57TWFyZ2luTGVmdH0gICA9IDQwOwogICAgfQoKICAgICMgdGhlIHNlY29uZCBpdGVtIGluIHRoZSBwYWdlIHRpdGxlIGlzIHRoZSBhcmVhIGluIHRoZSBwcm9kdWN0ICdJVFNNIENoYW5nZSBNYW5hZ2VtZW50JwogICAgbXkgJEhlYWRlckFyZWEgPSAkUHJpbnRDaGFuZ2UgPyAnSVRTTSBDaGFuZ2UnIDogJ0lUU00gV29ya29yZGVyJzsKICAgICRIZWFkZXJBcmVhID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJEhlYWRlckFyZWEpOwoKICAgICMgdGhlIGxhc3QgaXRlbSBpbiB0aGUgcGFnZSB0aXRsZSBpcyBlaXRoZXIgdGhlIGNoYW5nZSBudW1iZXIgb2YgdGhlIGZ1bGwgd29ya29yZGVyIG51bWJlcgogICAgbXkgJEhlYWRlclZhbHVlID0gJFByaW50Q2hhbmdlCiAgICAgICAgPwogICAgICAgICRDaGFuZ2UtPntDaGFuZ2VOdW1iZXJ9CiAgICAgICAgOgogICAgICAgIGpvaW4oICctJywgJENoYW5nZS0+e0NoYW5nZU51bWJlcn0sICRXb3JrT3JkZXItPntXb3JrT3JkZXJOdW1iZXJ9ICk7CgogICAgIyBzdGFydCB0aGUgZG9jdW1lbnQKICAgICMgJE91dHB1dCByZWNlaXZlcyBnZW5lcmF0ZWQgSFRNTCBpbiB0aGUgbm9uLVBERiBjYXNlCiAgICBteSAkT3V0cHV0ID0gJFNlbGYtPl9TdGFydERvY3VtZW50KAogICAgICAgIEhlYWRlckFyZWEgID0+ICRIZWFkZXJBcmVhLAogICAgICAgIEhlYWRlclZhbHVlID0+ICRIZWFkZXJWYWx1ZSwKICAgICk7CgogICAgIyB0aGUgbGluayB0eXBlcyBhcmUgbmVlZGVkIGZvciBzaG93aW5nIHRoZSBsaW5rZWQgb2JqZWN0cwogICAgbXkgJUxpbmtUeXBlTGlzdCA9ICRTZWxmLT57TGlua09iamVjdH0tPlR5cGVMaXN0KAogICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgcHJpbnQgdGhlIGNoYW5nZSBzcGVjaWZpYyBzdHVmZgogICAgaWYgKCRQcmludENoYW5nZSkgewoKICAgICAgICAjIHN0YXJ0IHRoZSBmaXJzdCBwYWdlCiAgICAgICAgaWYgKCAhJFNlbGYtPntQREZPYmplY3R9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKCBOYW1lID0+ICdDaGFuZ2UnICk7CiAgICAgICAgfQogICAgICAgICRPdXRwdXQgLj0gJFNlbGYtPl9PdXRwdXRIZWFkbGluZSgKICAgICAgICAgICAgSGVhZGVyQXJlYSAgICAgPT4gJEhlYWRlckFyZWEsCiAgICAgICAgICAgIEhlYWRlclZhbHVlICAgID0+ICRIZWFkZXJWYWx1ZSwKICAgICAgICAgICAgVGl0bGUgICAgICAgICAgPT4gJENoYW5nZS0+e0NoYW5nZVRpdGxlfSB8fCAndW5rbm93biBjaGFuZ2UgdGl0bGUnLAogICAgICAgICAgICBUZW1wbGF0ZVByZWZpeCA9PiAnQ2hhbmdlJywKICAgICAgICApOwoKICAgICAgICAjIG91dHB1dCBjaGFuZ2UgaW5mbwogICAgICAgICRPdXRwdXQgLj0gJFNlbGYtPl9PdXRwdXRDaGFuZ2VJbmZvKAogICAgICAgICAgICBDaGFuZ2UgICAgICAgICA9PiAkQ2hhbmdlLAogICAgICAgICAgICBQcmludFdvcmtPcmRlciA9PiAkUHJpbnRXb3JrT3JkZXIsCiAgICAgICAgKTsKCiAgICAgICAgIyBvdXRwdXQgY2hhbmdlIGRlc2NyaXB0aW9uIGFuZCBqdXN0aWZpY2F0aW9uCiAgICAgICAgIyB0aGUgcGxhaW4gY29udGVudCB3aWxsIGJlIGRpc3BsYXllZAogICAgICAgIGZvciBteSAkQXR0cmlidXRlIChxdyhEZXNjcmlwdGlvbiBKdXN0aWZpY2F0aW9uKSkgewogICAgICAgICAgICAkT3V0cHV0IC49ICRTZWxmLT5fT3V0cHV0TG9uZ1RleHQoCiAgICAgICAgICAgICAgICBQcmludENoYW5nZSAgICA9PiAkUHJpbnRDaGFuZ2UsCiAgICAgICAgICAgICAgICBQcmludFdvcmtPcmRlciA9PiAkUHJpbnRXb3JrT3JkZXIsCiAgICAgICAgICAgICAgICBUaXRsZSA9PgogICAgICAgICAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCRBdHRyaWJ1dGUpLAogICAgICAgICAgICAgICAgTG9uZ1RleHQgPT4gJENoYW5nZS0+eyAkQXR0cmlidXRlIC4gJ1BsYWluJyB9LAogICAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgIyBnZXQgbGlua2VkIG9iamVjdHMgd2hpY2ggYXJlIGRpcmVjdGx5IGxpbmtlZCB3aXRoIHRoaXMgY2hhbmdlIG9iamVjdAogICAgICAgIG15ICRMaW5rTGlzdFdpdGhEYXRhID0gJFNlbGYtPntMaW5rT2JqZWN0fS0+TGlua0xpc3RXaXRoRGF0YSgKICAgICAgICAgICAgT2JqZWN0ID0+ICdJVFNNQ2hhbmdlJywKICAgICAgICAgICAgS2V5ICAgID0+ICRDaGFuZ2VJRCwKICAgICAgICAgICAgU3RhdGUgID0+ICdWYWxpZCcsCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgKTsKCiAgICAgICAgIyBnZXQgdGhlIGNvbWJpbmVkIGxpbmtlZCBvYmplY3RzIGZyb20gYWxsIHdvcmtvcmRlcnMgb2YgdGhpcyBjaGFuZ2UKICAgICAgICBteSAkTGlua0xpc3RXaXRoRGF0YUNvbWJpbmVkV29ya09yZGVycyA9IHt9OwogICAgICAgIGZvciBteSAkV29ya09yZGVySUQgKCBAeyAkQ2hhbmdlLT57V29ya09yZGVySURzfSB9ICkgewoKICAgICAgICAgICAgIyBnZXQgbGlua2VkIG9iamVjdHMgb2YgdGhpcyB3b3Jrb3JkZXIKICAgICAgICAgICAgbXkgJExpbmtMaXN0V2l0aERhdGFXb3JrT3JkZXIgPSAkU2VsZi0+e0xpbmtPYmplY3R9LT5MaW5rTGlzdFdpdGhEYXRhKAogICAgICAgICAgICAgICAgT2JqZWN0ID0+ICdJVFNNV29ya09yZGVyJywKICAgICAgICAgICAgICAgIEtleSAgICA9PiAkV29ya09yZGVySUQsCiAgICAgICAgICAgICAgICBTdGF0ZSAgPT4gJ1ZhbGlkJywKICAgICAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBPQkpFQ1Q6CiAgICAgICAgICAgIGZvciBteSAkT2JqZWN0ICgga2V5cyAleyRMaW5rTGlzdFdpdGhEYXRhV29ya09yZGVyfSApIHsKCiAgICAgICAgICAgICAgICAjIG9ubHkgc2hvdyBsaW5rZWQgc2VydmljZXMgYW5kIGNvbmZpZyBpdGVtcyBvZiB3b3Jrb3JkZXIKICAgICAgICAgICAgICAgIGlmICggJE9iamVjdCBuZSAnU2VydmljZScgJiYgJE9iamVjdCBuZSAnSVRTTUNvbmZpZ0l0ZW0nICkgewogICAgICAgICAgICAgICAgICAgIG5leHQgT0JKRUNUOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIExJTktUWVBFOgogICAgICAgICAgICAgICAgZm9yIG15ICRMaW5rVHlwZSAoIGtleXMgJXsgJExpbmtMaXN0V2l0aERhdGFXb3JrT3JkZXItPnskT2JqZWN0fSB9ICkgewoKICAgICAgICAgICAgICAgICAgICBESVJFQ1RJT046CiAgICAgICAgICAgICAgICAgICAgZm9yIG15ICREaXJlY3Rpb24gKAogICAgICAgICAgICAgICAgICAgICAgICBrZXlzICV7ICRMaW5rTGlzdFdpdGhEYXRhV29ya09yZGVyLT57JE9iamVjdH0tPnskTGlua1R5cGV9IH0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgSUQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBteSAkSUQgKAogICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cyAlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMaW5rTGlzdFdpdGhEYXRhV29ya09yZGVyLT57JE9iamVjdH0tPnskTGlua1R5cGV9LT57JERpcmVjdGlvbn0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgY29tYmluZSB0aGUgbGlua2VkIG9iamVjdCBkYXRhIGZyb20gYWxsIHdvcmtvcmRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMaW5rTGlzdFdpdGhEYXRhQ29tYmluZWRXb3JrT3JkZXJzLT57JE9iamVjdH0tPnskTGlua1R5cGV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT57JERpcmVjdGlvbn0tPnskSUR9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAkTGlua0xpc3RXaXRoRGF0YVdvcmtPcmRlci0+eyRPYmplY3R9LT57JExpbmtUeXBlfS0+eyREaXJlY3Rpb259CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT57JElEfTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBhZGQgY29tYmluZWQgbGlua2VkIG9iamVjdHMgZnJvbSB3b3Jrb3JkZXIgdG8gbGlua2VkIG9iamVjdHMgZnJvbSBjaGFuZ2Ugb2JqZWN0CiAgICAgICAgJExpbmtMaXN0V2l0aERhdGEgPSB7CiAgICAgICAgICAgICV7JExpbmtMaXN0V2l0aERhdGF9LAogICAgICAgICAgICAleyRMaW5rTGlzdFdpdGhEYXRhQ29tYmluZWRXb3JrT3JkZXJzfSwKICAgICAgICB9OwoKICAgICAgICAjIGdldCB0aGUgbGluayBkYXRhCiAgICAgICAgaWYgKCAkTGlua0xpc3RXaXRoRGF0YSAmJiByZWYgJExpbmtMaXN0V2l0aERhdGEgZXEgJ0hBU0gnICYmICV7JExpbmtMaXN0V2l0aERhdGF9ICkgewogICAgICAgICAgICBteSAlTGlua0RhdGEgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkxpbmtPYmplY3RUYWJsZUNyZWF0ZSgKICAgICAgICAgICAgICAgIExpbmtMaXN0V2l0aERhdGEgPT4gJExpbmtMaXN0V2l0aERhdGEsCiAgICAgICAgICAgICAgICBWaWV3TW9kZSAgICAgICAgID0+ICdTaW1wbGVSYXcnLAogICAgICAgICAgICApOwoKICAgICAgICAgICAgJE91dHB1dCAuPSAkU2VsZi0+X091dHB1dExpbmtlZE9iamVjdHMoCiAgICAgICAgICAgICAgICBQcmludENoYW5nZSAgICA9PiAkUHJpbnRDaGFuZ2UsCiAgICAgICAgICAgICAgICBQcmludFdvcmtPcmRlciA9PiAkUHJpbnRXb3JrT3JkZXIsCiAgICAgICAgICAgICAgICBMaW5rRGF0YSAgICAgICA9PiBcJUxpbmtEYXRhLAogICAgICAgICAgICAgICAgTGlua1R5cGVMaXN0ICAgPT4gXCVMaW5rVHlwZUxpc3QsCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAjIG91dHB1dCBhbiBvdmVydmlldyBvdmVyIHdvcmtvcmRlcnMKICAgICAgICBteSBAV29ya09yZGVyT3ZlcnZpZXc7CiAgICAgICAgZm9yIG15ICRXb3JrT3JkZXJJRCAoIEB7ICRDaGFuZ2UtPntXb3JrT3JkZXJJRHN9IH0gKSB7CgogICAgICAgICAgICAjIGdldCB3b3Jrb3JkZXIgaW5mbwogICAgICAgICAgICBteSAkV29ya09yZGVyID0gJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9LT5Xb3JrT3JkZXJHZXQoCiAgICAgICAgICAgICAgICBXb3JrT3JkZXJJRCA9PiAkV29ya09yZGVySUQsCiAgICAgICAgICAgICAgICBVc2VySUQgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgICk7CgogICAgICAgICAgICAjIGNoZWNrIGVycm9yCiAgICAgICAgICAgIGlmICggISRXb3JrT3JkZXIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgICAgICAgICBNZXNzYWdlID0+ICJXb3JrT3JkZXIgJyRXb3JrT3JkZXJJRCcgbm90IGZvdW5kIGluIGRhdGFiYXNlISIsCiAgICAgICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBwdXNoIEBXb3JrT3JkZXJPdmVydmlldywKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICRXb3JrT3JkZXItPntXb3JrT3JkZXJOdW1iZXJ9LAogICAgICAgICAgICAgICAgJFdvcmtPcmRlci0+e1dvcmtPcmRlclRpdGxlfSwKICAgICAgICAgICAgICAgICRXb3JrT3JkZXItPntXb3JrT3JkZXJTdGF0ZX0sCiAgICAgICAgICAgICAgICAkV29ya09yZGVyLT57UGxhbm5lZFN0YXJ0VGltZX0sCiAgICAgICAgICAgICAgICAkV29ya09yZGVyLT57UGxhbm5lZEVuZFRpbWV9LAogICAgICAgICAgICAgICAgJFdvcmtPcmRlci0+e0FjdHVhbFN0YXJ0VGltZX0sCiAgICAgICAgICAgICAgICAkV29ya09yZGVyLT57QWN0dWFsRW5kVGltZX0sCiAgICAgICAgICAgICAgICBdOwogICAgICAgIH0KCiAgICAgICAgJE91dHB1dCAuPSAkU2VsZi0+X091dHB1dFdvcmtPcmRlck92ZXJ2aWV3KAogICAgICAgICAgICBXb3JrT3JkZXJPdmVydmlldyA9PiBcQFdvcmtPcmRlck92ZXJ2aWV3LAogICAgICAgICk7CiAgICB9CgogICAgIyBvdXRwdXQgZWl0aGVyIGEgc2luZ2xlIHdvcmtvcmRlciBvciBhbGwgd29ya29yZGVycyBvZiBhIGNoYW5nZQogICAgbXkgQFdvcmtPcmRlcklEcyA9ICRQcmludENoYW5nZQogICAgICAgID8KICAgICAgICBAeyAkQ2hhbmdlLT57V29ya09yZGVySURzfSB8fCBbXSB9CiAgICAgICAgOgogICAgICAgICgkV29ya09yZGVySUQpOwoKICAgIGlmICggISRTZWxmLT57UERGT2JqZWN0fSApIHsKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKCBOYW1lID0+ICdXb3JrT3JkZXJzJyApOwogICAgfQoKICAgIGZvciBteSAkV29ya09yZGVySUQgKEBXb3JrT3JkZXJJRHMpIHsKCiAgICAgICAgIyBnZXQgd29ya29yZGVyIGluZm8KICAgICAgICBteSAkV29ya09yZGVyID0gJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9LT5Xb3JrT3JkZXJHZXQoCiAgICAgICAgICAgIFdvcmtPcmRlcklEID0+ICRXb3JrT3JkZXJJRCwKICAgICAgICAgICAgVXNlcklEICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICk7CgogICAgICAgICMgY2hlY2sgZXJyb3IKICAgICAgICBpZiAoICEkV29ya09yZGVyICkgewogICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgICAgIE1lc3NhZ2UgPT4gIldvcmtPcmRlciAnJFdvcmtPcmRlcklEJyBub3QgZm91bmQgaW4gZGF0YWJhc2UhIiwKICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgIyBzdGFydCBhIG5ldyBwYWdlIGZvciBldmVyeSB3b3Jrb3JkZXIKICAgICAgICBteSAkSGVhZGVyQXJlYSA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdJVFNNIFdvcmtvcmRlcicpOwogICAgICAgIG15ICRIZWFkZXJWYWx1ZSA9IGpvaW4gJy0nLCAkQ2hhbmdlLT57Q2hhbmdlTnVtYmVyfSwgJFdvcmtPcmRlci0+e1dvcmtPcmRlck51bWJlcn07CiAgICAgICAgaWYgKCAhJFNlbGYtPntQREZPYmplY3R9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKCBOYW1lID0+ICdXb3JrT3JkZXInICk7CiAgICAgICAgfQogICAgICAgICRPdXRwdXQgLj0gJFNlbGYtPl9PdXRwdXRIZWFkbGluZSgKICAgICAgICAgICAgSGVhZGVyQXJlYSAgICAgPT4gJEhlYWRlckFyZWEsCiAgICAgICAgICAgIEhlYWRlclZhbHVlICAgID0+ICRIZWFkZXJWYWx1ZSwKICAgICAgICAgICAgVGl0bGUgICAgICAgICAgPT4gJFdvcmtPcmRlci0+e1dvcmtPcmRlclRpdGxlfSB8fCAndW5rbm93biB3b3Jrb3JkZXIgdGl0bGUnLAogICAgICAgICAgICBUZW1wbGF0ZVByZWZpeCA9PiAnV29ya09yZGVyJywKICAgICAgICApOwoKICAgICAgICAkT3V0cHV0IC49ICRTZWxmLT5fT3V0cHV0V29ya09yZGVySW5mbygKICAgICAgICAgICAgQ2hhbmdlICAgID0+ICRDaGFuZ2UsCiAgICAgICAgICAgIFdvcmtPcmRlciA9PiAkV29ya09yZGVyLAogICAgICAgICk7CgogICAgICAgICMgb3V0cHV0IHdvcmtvcmRlciBpbnN0cnVjdGlvbiBhbmQgcmVwb3J0CiAgICAgICAgIyBUaGUgcGxhaW4gY29udGVudCB3aWxsIGJlIGRpc3BsYXllZAogICAgICAgIGZvciBteSAkQXR0cmlidXRlIChxdyhJbnN0cnVjdGlvbiBSZXBvcnQpKSB7CiAgICAgICAgICAgICRPdXRwdXQgLj0gJFNlbGYtPl9PdXRwdXRMb25nVGV4dCgKICAgICAgICAgICAgICAgIFByaW50Q2hhbmdlICAgID0+IDAsCiAgICAgICAgICAgICAgICBQcmludFdvcmtPcmRlciA9PiAxLAogICAgICAgICAgICAgICAgVGl0bGUgPT4KICAgICAgICAgICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPntMYW5ndWFnZU9iamVjdH0tPkdldCgkQXR0cmlidXRlKSwKICAgICAgICAgICAgICAgIExvbmdUZXh0ID0+ICRXb3JrT3JkZXItPnsgJEF0dHJpYnV0ZSAuICdQbGFpbicgfSwKICAgICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgICMgZ2V0IGxpbmtlZCBvYmplY3RzCiAgICAgICAgbXkgJExpbmtMaXN0V2l0aERhdGEgPSAkU2VsZi0+e0xpbmtPYmplY3R9LT5MaW5rTGlzdFdpdGhEYXRhKAogICAgICAgICAgICBPYmplY3QgPT4gJ0lUU01Xb3JrT3JkZXInLAogICAgICAgICAgICBLZXkgICAgPT4gJFdvcmtPcmRlcklELAogICAgICAgICAgICBTdGF0ZSAgPT4gJ1ZhbGlkJywKICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwoKICAgICAgICAjIGdldCB0aGUgbGluayBkYXRhCiAgICAgICAgaWYgKCAkTGlua0xpc3RXaXRoRGF0YSAmJiByZWYgJExpbmtMaXN0V2l0aERhdGEgZXEgJ0hBU0gnICYmICV7JExpbmtMaXN0V2l0aERhdGF9ICkgewogICAgICAgICAgICBteSAlTGlua0RhdGEgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkxpbmtPYmplY3RUYWJsZUNyZWF0ZSgKICAgICAgICAgICAgICAgIExpbmtMaXN0V2l0aERhdGEgPT4gJExpbmtMaXN0V2l0aERhdGEsCiAgICAgICAgICAgICAgICBWaWV3TW9kZSAgICAgICAgID0+ICdTaW1wbGVSYXcnLAogICAgICAgICAgICApOwoKICAgICAgICAgICAgJE91dHB1dCAuPSAkU2VsZi0+X091dHB1dExpbmtlZE9iamVjdHMoCiAgICAgICAgICAgICAgICBQcmludENoYW5nZSAgICA9PiAwLAogICAgICAgICAgICAgICAgUHJpbnRXb3JrT3JkZXIgPT4gMSwKICAgICAgICAgICAgICAgIExpbmtEYXRhICAgICAgID0+IFwlTGlua0RhdGEsCiAgICAgICAgICAgICAgICBMaW5rVHlwZUxpc3QgICA9PiBcJUxpbmtUeXBlTGlzdCwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CgogICAgIyBnZW5lcmF0ZSBQREYgb3V0cHV0CiAgICBpZiAoICRTZWxmLT57UERGT2JqZWN0fSApIHsKCiAgICAgICAgIyBnZW5lcmF0ZSBhIGZpbGVuYW1lCiAgICAgICAgbXkgKCAkcywgJG0sICRoLCAkRCwgJE0sICRZICkgPSAkU2VsZi0+e1RpbWVPYmplY3R9LT5TeXN0ZW1UaW1lMkRhdGUoCiAgICAgICAgICAgIFN5c3RlbVRpbWUgPT4gJFNlbGYtPntUaW1lT2JqZWN0fS0+U3lzdGVtVGltZSgpLAogICAgICAgICk7CiAgICAgICAgbXkgJEZpbGVuYW1lID0gJFByaW50Q2hhbmdlCiAgICAgICAgICAgID8KICAgICAgICAgICAgc3ByaW50ZigKICAgICAgICAgICAgJ2NoYW5nZV8lc18lMDJkLSUwMmQtJTAyZF8lMDJkLSUwMmQucGRmJywKICAgICAgICAgICAgJENoYW5nZS0+e0NoYW5nZU51bWJlcn0sICRZLCAkTSwgJEQsICRoLCAkbQogICAgICAgICAgICApCiAgICAgICAgICAgIDoKICAgICAgICAgICAgc3ByaW50ZigKICAgICAgICAgICAgJ3dvcmtvcmRlcl8lcy0lc18lMDJkLSUwMmQtJTAyZF8lMDJkLSUwMmQucGRmJywKICAgICAgICAgICAgJENoYW5nZS0+e0NoYW5nZU51bWJlcn0sICRXb3JrT3JkZXItPntXb3JrT3JkZXJOdW1iZXJ9LCAkWSwgJE0sICRELCAkaCwgJG0KICAgICAgICAgICAgKTsKCiAgICAgICAgIyByZXR1cm4gdGhlIFBERiBkb2N1bWVudAogICAgICAgIG15ICRQREZTdHJpbmcgPSAkU2VsZi0+e1BERk9iamVjdH0tPkRvY3VtZW50T3V0cHV0KCk7CgogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkF0dGFjaG1lbnQoCiAgICAgICAgICAgIEZpbGVuYW1lICAgID0+ICRGaWxlbmFtZSwKICAgICAgICAgICAgQ29udGVudFR5cGUgPT4gJ2FwcGxpY2F0aW9uL3BkZicsCiAgICAgICAgICAgIENvbnRlbnQgICAgID0+ICRQREZTdHJpbmcsCiAgICAgICAgICAgIFR5cGUgICAgICAgID0+ICdhdHRhY2htZW50JywKICAgICAgICApOwogICAgfQogICAgZWxzZSB7CgogICAgICAgICMgZ2VuZXJhdGUgaHRtbCBvdXRwdXQgd2hlbiB0aGVyZSBpcyBubyBQREYtc3VwcG9ydAoKICAgICAgICAjIHN0YXJ0IHRlbXBsYXRlIG91dHB1dAogICAgICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5PdXRwdXQoCiAgICAgICAgICAgIFRlbXBsYXRlRmlsZSA9PiAnQWdlbnRJVFNNQ2hhbmdlUHJpbnQnLAogICAgICAgICAgICBEYXRhICAgICAgICAgPT4gewogICAgICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAgICAgJXskQ2hhbmdlfSwKICAgICAgICAgICAgICAgICV7JFdvcmtPcmRlcn0sCiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKCiAgICAgICAgIyBhZGQgZm9vdGVyCiAgICAgICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPlByaW50Rm9vdGVyKCk7CgogICAgICAgICMgcmV0dXJuIG91dHB1dAogICAgICAgIHJldHVybiAkT3V0cHV0OwogICAgfQp9CgojIHN0YXJ0IHRoZSBkb2N1bWVudApzdWIgX1N0YXJ0RG9jdW1lbnQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoSGVhZGVyQXJlYSBIZWFkZXJWYWx1ZSkpIHsKICAgICAgICBpZiAoICFkZWZpbmVkKCAkUGFyYW17JEFyZ3VtZW50fSApICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkXyEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIGlmICggJFNlbGYtPntQREZPYmplY3R9ICkgewoKICAgICAgICAjIFRpdGxlIG9mIHRoZSBQREYtRG9jdW1lbnQsIG9yIHRoZSBIVE1MLVBhZ2UKICAgICAgICBteSAkUHJvZHVjdCA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdQcm9kdWN0Jyk7CiAgICAgICAgbXkgJFRpdGxlID0gc3ByaW50ZiAnJXM6ICVzIyVzJywgJFByb2R1Y3QsICRQYXJhbXtIZWFkZXJBcmVhfSwgJFBhcmFte0hlYWRlclZhbHVlfTsKCiAgICAgICAgIyBjcmVhdGUgbmV3IFBERiBkb2N1bWVudAogICAgICAgICRTZWxmLT57UERGT2JqZWN0fS0+RG9jdW1lbnROZXcoCiAgICAgICAgICAgIFRpdGxlICA9PiAkVGl0bGUsCiAgICAgICAgICAgIEVuY29kZSA9PiAkU2VsZi0+e0xheW91dE9iamVjdH0tPntVc2VyQ2hhcnNldH0sCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuICcnOwogICAgfQogICAgZWxzZSB7CgogICAgICAgICMgb3V0cHV0IGhlYWRlcgogICAgICAgIG15ICRPdXRwdXQgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPlByaW50SGVhZGVyKAogICAgICAgICAgICBBcmVhICA9PiAkUGFyYW17SGVhZGVyQXJlYX0sCiAgICAgICAgICAgIFZhbHVlID0+ICRQYXJhbXtIZWFkZXJWYWx1ZX0sCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuICRPdXRwdXQ7CiAgICB9Cn0KCiMgb3V0cHV0IHRoZSBoZWFkbGluZSwgY3JlYXRlIGEgbmV3IHBhZ2UKc3ViIF9PdXRwdXRIZWFkbGluZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhIZWFkZXJBcmVhIEhlYWRlclZhbHVlIFRpdGxlIFRlbXBsYXRlUHJlZml4KSkgewogICAgICAgIGlmICggIWRlZmluZWQoICRQYXJhbXskQXJndW1lbnR9ICkgKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRfISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgaWYgKCAkU2VsZi0+e1BERk9iamVjdH0gKSB7CiAgICAgICAgbXkgJFByaW50ZWRCeSA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdwcmludGVkIGJ5Jyk7CiAgICAgICAgbXkgJFRpbWUgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk91dHB1dCggVGVtcGxhdGUgPT4gJyRFbnZ7IlRpbWUifScgKTsKICAgICAgICBteSAkVXJsCiAgICAgICAgICAgID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0h0dHBUeXBlJykgLiAnOi8vJwogICAgICAgICAgICAuICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdGUUROJykKICAgICAgICAgICAgLiAkU2VsZi0+e0xheW91dE9iamVjdH0tPntCYXNlbGlua30KICAgICAgICAgICAgLiAkU2VsZi0+e1JlcXVlc3RlZFVSTH07CgogICAgICAgICMgcGFnZSBoZWFkZXJzIGFuZCBmb290ZXIKICAgICAgICBteSAkUGFnZSA9ICRTZWxmLT57UGFnZX07CiAgICAgICAgJFBhZ2UtPntIZWFkZXJSaWdodH0gPSBzcHJpbnRmICclcyMlcycsICRQYXJhbXtIZWFkZXJBcmVhfSwgJFBhcmFte0hlYWRlclZhbHVlfTsKICAgICAgICAkUGFnZS0+e0hlYWRsaW5lTGVmdH0gPSAkUGFyYW17VGl0bGV9OwogICAgICAgICRQYWdlLT57SGVhZGxpbmVSaWdodH0KICAgICAgICAgICAgPSAkUHJpbnRlZEJ5IC4gJyAnCiAgICAgICAgICAgIC4gJFNlbGYtPntVc2VyRmlyc3RuYW1lfSAuICcgJwogICAgICAgICAgICAuICRTZWxmLT57VXNlckxhc3RuYW1lfSAuICcgKCcKICAgICAgICAgICAgLiAkU2VsZi0+e1VzZXJFbWFpbH0gLiAnKSAnCiAgICAgICAgICAgIC4gJFRpbWU7CiAgICAgICAgJFBhZ2UtPntGb290ZXJMZWZ0fSA9ICRVcmw7CiAgICAgICAgJFBhZ2UtPntQYWdlVGV4dH0gICA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdQYWdlJyk7CiAgICAgICAgJFBhZ2UtPntQYWdlQ291bnR9ICA9IDE7CgogICAgICAgICMgY3JlYXRlIG5ldyBQREYgcGFnZQogICAgICAgICRTZWxmLT57UERGT2JqZWN0fS0+UGFnZU5ldygKICAgICAgICAgICAgJXskUGFnZX0sCiAgICAgICAgICAgIEZvb3RlclJpZ2h0ID0+ICRQYWdlLT57UGFnZVRleHR9IC4gJyAnIC4gJFBhZ2UtPntQYWdlQ291bnR9LAogICAgICAgICk7CiAgICAgICAgJFBhZ2UtPntQYWdlQ291bnR9Kys7CgogICAgICAgIHJldHVybiAnJzsKICAgIH0KICAgIGVsc2UgewoKICAgICAgICAjIGhlYWRsaW5lIGluIHRoZSB1c2VyIHZpc2libGUgSFRNTCBvdXRwdXQKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICRQYXJhbXtUZW1wbGF0ZVByZWZpeH0gLiAnSGVhZGxpbmUnLAogICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgIEhlYWRlckFyZWEgID0+ICRQYXJhbXtIZWFkZXJBcmVhfSwKICAgICAgICAgICAgICAgIEhlYWRlclZhbHVlID0+ICRQYXJhbXtIZWFkZXJWYWx1ZX0sCiAgICAgICAgICAgICAgICBUaXRsZSAgICAgICA9PiAkUGFyYW17VGl0bGV9LAogICAgICAgICAgICB9LAogICAgICAgICk7CgogICAgICAgIHJldHVybiAnJzsKICAgIH0KfQoKIyBhIGhlbHBlciBmb3IgcHJlcGFyaW5nIGEgdGFibGUgcm93IGZvciBQREYgZ2VuZXJhdGlvbgpzdWIgX1ByZXBhcmVBbmRBZGRJbmZvUm93IHsKCiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhSb3dTcGVjIERhdGEpKSB7CiAgICAgICAgaWYgKCAhZGVmaW5lZCggJFBhcmFteyRBcmd1bWVudH0gKSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJF8hIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICBteSAoICRSb3dTcGVjLCAkRGF0YSApID0gQFBhcmFte3F3KFJvd1NwZWMgRGF0YSl9OwoKICAgICMgc2hvcnQgbmFtZSwganVzdCBmb3IgY29udmVuaWVuY2UKICAgIG15ICRBdHRyaWJ1dGUgPSAkUm93U3BlYy0+e0F0dHJpYnV0ZX07CgogICAgIyBza2lwIGlmIHJvdyBpcyBzd2l0Y2hlZCBvZmYgaW4gU3lzQ29uZmlnCiAgICByZXR1cm4gaWYgJFJvd1NwZWMtPntJc09wdGlvbmFsfSAmJiAhJFNlbGYtPntDb25maWd9LT57JEF0dHJpYnV0ZX07CgogICAgIyBrZXlzIGFyZSBhbHdheXMgdHJhbnNsYXRhYmxlCiAgICBteSAkS2V5ID0gJFJvd1NwZWMtPntLZXl9IHx8ICRBdHRyaWJ1dGU7CiAgICAkS2V5ID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJEtleSk7CgogICAgIyBkZXRlcm1pbmUgdGhlIHZhbHVlCiAgICBteSAkVmFsdWU7CiAgICBpZiAoICRSb3dTcGVjLT57VmFsdWVJc1RpbWV9ICkgewoKICAgICAgICAjIGZvcm1hdCB0aGUgdGltZSB2YWx1ZQogICAgICAgICRWYWx1ZSA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+T3V0cHV0KAogICAgICAgICAgICBUZW1wbGF0ZSA9PiBxcShcJFRpbWVMb25neyJcJERhdGF7IiRBdHRyaWJ1dGUifSJ9KSwKICAgICAgICAgICAgRGF0YSAgICAgPT4gJERhdGEsCiAgICAgICAgKTsKICAgIH0KICAgIGVsc2lmICggJFJvd1NwZWMtPntWYWx1ZUlzVXNlcn0gKSB7CgogICAgICAgICMgZm9ybWF0IHRoZSB1c2VyIGlkCiAgICAgICAgaWYgKCAkRGF0YS0+eyAkQXR0cmlidXRlIC4gJ0lEJyB9ICkgewogICAgICAgICAgICBteSAlVXNlckRhdGEgPSAkU2VsZi0+e1VzZXJPYmplY3R9LT5HZXRVc2VyRGF0YSgKICAgICAgICAgICAgICAgIFVzZXJJRCA9PiAkRGF0YS0+eyAkQXR0cmlidXRlIC4gJ0lEJyB9LAogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoJVVzZXJEYXRhKSB7CiAgICAgICAgICAgICAgICAkVmFsdWUgPSBzcHJpbnRmICclcyAoJXMgJXMpJywKICAgICAgICAgICAgICAgICAgICAkVXNlckRhdGF7VXNlckxvZ2lufSwKICAgICAgICAgICAgICAgICAgICAkVXNlckRhdGF7VXNlckZpcnN0bmFtZX0sCiAgICAgICAgICAgICAgICAgICAgJFVzZXJEYXRhe1VzZXJMYXN0bmFtZX07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkVmFsdWUgPSAiSUQ9JERhdGEtPnskQXR0cmlidXRlfSI7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKCiAgICAgICAgIyB0YWtlIHZhbHVlIGZyb20gdGhlIHBhc3NlZCBpbiBkYXRhCiAgICAgICAgJFZhbHVlID0gJERhdGEtPnskQXR0cmlidXRlfTsKICAgIH0KCiAgICAjIHRyYW5zbGF0ZSB0aGUgdmFsdWUKICAgIGlmICggJFZhbHVlICYmICRSb3dTcGVjLT57VmFsdWVJc1RyYW5zbGF0YWJsZX0gKSB7CiAgICAgICAgJFZhbHVlID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJFZhbHVlKSwKICAgIH0KCiAgICAjIGFkZCBzZXBhcmF0b3IgYmV0d2VlbiBrZXkgYW5kIHZhbHVlCiAgICAkS2V5IC49ICc6JzsKCiAgICAjIHNob3cgcm93CiAgICBwdXNoIEB7ICRSb3dTcGVjLT57VGFibGV9IH0sCiAgICAgICAgeyBLZXkgPT4gJEtleSwgVmFsdWUgPT4gJFZhbHVlLCB9OwoKICAgIHJldHVybjsKfQoKIyBlbWl0IGluZm9ybWF0aW9uIGFib3V0IGEgY2hhbmdlCnN1YiBfT3V0cHV0Q2hhbmdlSW5mbyB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhDaGFuZ2UgUHJpbnRXb3JrT3JkZXIpKSB7CiAgICAgICAgaWYgKCAhZGVmaW5lZCggJFBhcmFteyRBcmd1bWVudH0gKSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJF8hIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGp1c3QgZm9yIGhhdmluZyBzaG9ydGVyIG5hbWVzCiAgICBteSAkQ2hhbmdlID0gJFBhcmFte0NoYW5nZX07CgogICAgIyBmaWxsIHRoZSB0d28gdGFibGVzIG9uIHRvcCwKICAgICMgYm90aCB0YWJsZXMgaGF2ZSB0d28gY29sdW1zOiBLZXkgYW5kIFZhbHVlCiAgICBteSAoIEBUYWJsZUxlZnQsIEBUYWJsZVJpZ2h0ICk7CgogICAgIyBkZXRlcm1pbmUgdmFsdWVzIHRoYXQgY2FuJ3QgZWFzaWx5IGJlIGRldGVybWluZWQgaW4gX1ByZXBhcmVBbmRBZGRJbmZvUm93KCkKICAgIG15ICVDb21wbGljYXRlZFZhbHVlOwoKICAgICMgVmFsdWVzIGZvciBDQUIKICAgIGZvciBteSAkQXR0cmlidXRlIChxdyhDQUJBZ2VudHMgQ0FCQ3VzdG9tZXJzKSkgewogICAgICAgIG15IEBMb25nTmFtZXM7CiAgICAgICAgaWYgKCAkQXR0cmlidXRlIGVxICdDQUJBZ2VudHMnICYmICRDaGFuZ2UtPnskQXR0cmlidXRlfSApIHsKICAgICAgICAgICAgZm9yIG15ICRDQUJBZ2VudCAoIEB7ICRDaGFuZ2UtPnskQXR0cmlidXRlfSB9ICkgewogICAgICAgICAgICAgICAgbXkgJVVzZXJEYXRhID0gJFNlbGYtPntVc2VyT2JqZWN0fS0+R2V0VXNlckRhdGEoCiAgICAgICAgICAgICAgICAgICAgVXNlcklEID0+ICRDQUJBZ2VudCwKICAgICAgICAgICAgICAgICAgICBDYWNoZSAgPT4gMSwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpZiAoJVVzZXJEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgcHVzaCBATG9uZ05hbWVzLCBzcHJpbnRmICclcyAoJXMgJXMpJywKICAgICAgICAgICAgICAgICAgICAgICAgQFVzZXJEYXRhe3F3KFVzZXJMb2dpbiBVc2VyRmlyc3RuYW1lIFVzZXJMYXN0bmFtZSl9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcHVzaCBATG9uZ05hbWVzLCAiSUQ9JENBQkFnZW50IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNpZiAoICRBdHRyaWJ1dGUgZXEgJ0NBQkN1c3RvbWVycycgJiYgJENoYW5nZS0+eyRBdHRyaWJ1dGV9ICkgewogICAgICAgICAgICBmb3IgbXkgJENBQkN1c3RvbWVyICggQHsgJENoYW5nZS0+eyRBdHRyaWJ1dGV9IH0gKSB7CiAgICAgICAgICAgICAgICBteSAlVXNlckRhdGEgPSAkU2VsZi0+e0N1c3RvbWVyVXNlck9iamVjdH0tPkN1c3RvbWVyVXNlckRhdGFHZXQoCiAgICAgICAgICAgICAgICAgICAgVXNlciAgPT4gJENBQkN1c3RvbWVyLAogICAgICAgICAgICAgICAgICAgIENhY2hlID0+IDEsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgaWYgKCVVc2VyRGF0YSkgewogICAgICAgICAgICAgICAgICAgIHB1c2ggQExvbmdOYW1lcywgc3ByaW50ZiAnJXMgKCVzICVzKScsCiAgICAgICAgICAgICAgICAgICAgICAgIEBVc2VyRGF0YXtxdyhVc2VyTG9naW4gVXNlckZpcnN0bmFtZSBVc2VyTGFzdG5hbWUpfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHB1c2ggQExvbmdOYW1lcywgIklEPSRDQUJDdXN0b21lciI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMgcmVtZW1iZXIgdGhlIHZhbHVlCiAgICAgICAgJENvbXBsaWNhdGVkVmFsdWV7ICRBdHRyaWJ1dGUgLiAnTG9uZycgfSA9IGpvaW4oICJcbiIsIEBMb25nTmFtZXMgKSB8fCAnLSc7CiAgICB9CgogICAgIyB2YWx1ZSBmb3IgYXR0YWNobWVudHMKICAgIHsKICAgICAgICBteSAlQXR0YWNobWVudHMgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUF0dGFjaG1lbnRMaXN0KAogICAgICAgICAgICBDaGFuZ2VJRCA9PiAkQ2hhbmdlLT57Q2hhbmdlSUR9LAogICAgICAgICk7CgogICAgICAgIG15IEBWYWx1ZXM7CgogICAgICAgIEFUVEFDSE1FTlRfSUQ6CiAgICAgICAgZm9yIG15ICRBdHRhY2htZW50SUQgKCBrZXlzICVBdHRhY2htZW50cyApIHsKCiAgICAgICAgICAgICMgZ2V0IGluZm8gYWJvdXQgZmlsZQogICAgICAgICAgICBteSAkQXR0YWNobWVudERhdGEgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUF0dGFjaG1lbnRHZXQoCiAgICAgICAgICAgICAgICBGaWxlSUQgPT4gJEF0dGFjaG1lbnRJRCwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICMgY2hlY2sgZm9yIGF0dGFjaG1lbnQgaW5mb3JtYXRpb24KICAgICAgICAgICAgbmV4dCBBVFRBQ0hNRU5USUQgaWYgISRBdHRhY2htZW50RGF0YTsKCiAgICAgICAgICAgIHB1c2ggQFZhbHVlcywgc3ByaW50ZiAnJXMgJXMnLAogICAgICAgICAgICAgICAgJEF0dGFjaG1lbnREYXRhLT57RmlsZW5hbWV9LAogICAgICAgICAgICAgICAgJEF0dGFjaG1lbnREYXRhLT57RmlsZXNpemV9OwogICAgICAgIH0KCiAgICAgICAgIyBzaG93IHJvdwogICAgICAgICRDb21wbGljYXRlZFZhbHVle0F0dGFjaG1lbnRzfSA9IGpvaW4oICJcbiIsIEBWYWx1ZXMgKSB8fCAnLSc7CiAgICB9CgogICAgbXkgQFJvd1NwZWMgPSAoCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICAgICAgICAgID0+ICdDaGFuZ2VTdGF0ZScsCiAgICAgICAgICAgIFRhYmxlICAgICAgICAgICAgICAgPT4gXEBUYWJsZUxlZnQsCiAgICAgICAgICAgIFZhbHVlSXNUcmFuc2xhdGFibGUgPT4gMSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlICA9PiAnUGxhbm5lZEVmZm9ydCcsCiAgICAgICAgICAgIElzT3B0aW9uYWwgPT4gMSwKICAgICAgICAgICAgVGFibGUgICAgICA9PiBcQFRhYmxlTGVmdCwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlICA9PiAnQWNjb3VudGVkVGltZScsCiAgICAgICAgICAgIElzT3B0aW9uYWwgPT4gMSwKICAgICAgICAgICAgVGFibGUgICAgICA9PiBcQFRhYmxlTGVmdCwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlICAgICAgICAgICA9PiAnQ2F0ZWdvcnknLAogICAgICAgICAgICBLZXkgICAgICAgICAgICAgICAgID0+ICdDYXRlZ29yeScsCiAgICAgICAgICAgIFRhYmxlICAgICAgICAgICAgICAgPT4gXEBUYWJsZUxlZnQsCiAgICAgICAgICAgIFZhbHVlSXNUcmFuc2xhdGFibGUgPT4gMSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlICAgICAgICAgICA9PiAnSW1wYWN0JywKICAgICAgICAgICAgS2V5ICAgICAgICAgICAgICAgICA9PiAnSW1wYWN0JywKICAgICAgICAgICAgVGFibGUgICAgICAgICAgICAgICA9PiBcQFRhYmxlTGVmdCwKICAgICAgICAgICAgVmFsdWVJc1RyYW5zbGF0YWJsZSA9PiAxLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICAgICAgICAgID0+ICdQcmlvcml0eScsCiAgICAgICAgICAgIEtleSAgICAgICAgICAgICAgICAgPT4gJ1ByaW9yaXR5JywKICAgICAgICAgICAgVGFibGUgICAgICAgICAgICAgICA9PiBcQFRhYmxlTGVmdCwKICAgICAgICAgICAgVmFsdWVJc1RyYW5zbGF0YWJsZSA9PiAxLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnQ2hhbmdlTWFuYWdlcicsCiAgICAgICAgICAgIFRhYmxlICAgICAgID0+IFxAVGFibGVMZWZ0LAogICAgICAgICAgICBWYWx1ZUlzVXNlciA9PiAxLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnQ2hhbmdlQnVpbGRlcicsCiAgICAgICAgICAgIFRhYmxlICAgICAgID0+IFxAVGFibGVMZWZ0LAogICAgICAgICAgICBWYWx1ZUlzVXNlciA9PiAxLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgPT4gJ0NBQkFnZW50c0xvbmcnLAogICAgICAgICAgICBLZXkgICAgICAgPT4gJ0NBQiBBZ2VudHMnLAogICAgICAgICAgICBUYWJsZSAgICAgPT4gXEBUYWJsZUxlZnQsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIEF0dHJpYnV0ZSA9PiAnQ0FCQ3VzdG9tZXJzTG9uZycsCiAgICAgICAgICAgIEtleSAgICAgICA9PiAnQ0FCIEN1c3RvbWVycycsCiAgICAgICAgICAgIFRhYmxlICAgICA9PiBcQFRhYmxlTGVmdCwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlID0+ICdBdHRhY2htZW50cycsCiAgICAgICAgICAgIEtleSAgICAgICA9PiAnQXR0YWNobWVudHMnLAogICAgICAgICAgICBUYWJsZSAgICAgPT4gXEBUYWJsZUxlZnQsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIEF0dHJpYnV0ZSAgID0+ICdSZXF1ZXN0ZWRUaW1lJywKICAgICAgICAgICAgSXNPcHRpb25hbCAgPT4gMSwKICAgICAgICAgICAgVGFibGUgICAgICAgPT4gXEBUYWJsZVJpZ2h0LAogICAgICAgICAgICBWYWx1ZUlzVGltZSA9PiAxLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnUGxhbm5lZFN0YXJ0VGltZScsCiAgICAgICAgICAgIFRhYmxlICAgICAgID0+IFxAVGFibGVSaWdodCwKICAgICAgICAgICAgVmFsdWVJc1RpbWUgPT4gMSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlICAgPT4gJ1BsYW5uZWRFbmRUaW1lJywKICAgICAgICAgICAgVGFibGUgICAgICAgPT4gXEBUYWJsZVJpZ2h0LAogICAgICAgICAgICBWYWx1ZUlzVGltZSA9PiAxLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnQWN0dWFsU3RhcnRUaW1lJywKICAgICAgICAgICAgVGFibGUgICAgICAgPT4gXEBUYWJsZVJpZ2h0LAogICAgICAgICAgICBWYWx1ZUlzVGltZSA9PiAxLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnQWN0dWFsRW5kVGltZScsCiAgICAgICAgICAgIFRhYmxlICAgICAgID0+IFxAVGFibGVSaWdodCwKICAgICAgICAgICAgVmFsdWVJc1RpbWUgPT4gMSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlICAgPT4gJ0NyZWF0ZVRpbWUnLAogICAgICAgICAgICBLZXkgICAgICAgICA9PiAnQ3JlYXRlZCcsCiAgICAgICAgICAgIFRhYmxlICAgICAgID0+IFxAVGFibGVSaWdodCwKICAgICAgICAgICAgVmFsdWVJc1RpbWUgPT4gMSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlICAgPT4gJ0NoYW5nZVRpbWUnLAogICAgICAgICAgICBLZXkgICAgICAgICA9PiAnQ2hhbmdlZCcsCiAgICAgICAgICAgIFRhYmxlICAgICAgID0+IFxAVGFibGVSaWdodCwKICAgICAgICAgICAgVmFsdWVJc1RpbWUgPT4gMSwKICAgICAgICB9LAogICAgKTsKCiAgICBmb3IgbXkgJFJvd1NwZWMgKEBSb3dTcGVjKSB7CgogICAgICAgICMgZmlsbCBAVGFibGVMZWZ0IGFuZCBAVGFibGVSaWdodAogICAgICAgICRTZWxmLT5fUHJlcGFyZUFuZEFkZEluZm9Sb3coCiAgICAgICAgICAgIFJvd1NwZWMgPT4gJFJvd1NwZWMsCiAgICAgICAgICAgIERhdGEgPT4geyAleyRDaGFuZ2V9LCAlQ29tcGxpY2F0ZWRWYWx1ZSB9LAogICAgICAgICk7CiAgICB9CgogICAgIyBudW1iZXIgb2Ygcm93cyBpbiB0aGUgY2hhbmdlIGluZm8gdGFibGUKICAgIG15ICRSb3dzID0gbWF4KCBzY2FsYXIoQFRhYmxlTGVmdCksIHNjYWxhcihAVGFibGVSaWdodCkgKTsKCiAgICBpZiAoICRTZWxmLT57UERGT2JqZWN0fSApIHsKCiAgICAgICAgbXkgJVRhYmxlOwogICAgICAgIGZvciBteSAkUm93ICggMCAuLiAkUm93cyAtIDEgKSB7CiAgICAgICAgICAgICRUYWJsZXtDZWxsRGF0YX1bJFJvd11bMF17Q29udGVudH0gICAgICAgICA9ICRUYWJsZUxlZnRbJFJvd10tPntLZXl9OwogICAgICAgICAgICAkVGFibGV7Q2VsbERhdGF9WyRSb3ddWzBde0ZvbnR9ICAgICAgICAgICAgPSAnUHJvcG9ydGlvbmFsQm9sZCc7CiAgICAgICAgICAgICRUYWJsZXtDZWxsRGF0YX1bJFJvd11bMV17Q29udGVudH0gICAgICAgICA9ICRUYWJsZUxlZnRbJFJvd10tPntWYWx1ZX07CiAgICAgICAgICAgICRUYWJsZXtDZWxsRGF0YX1bJFJvd11bMl17Q29udGVudH0gICAgICAgICA9ICcgJzsKICAgICAgICAgICAgJFRhYmxle0NlbGxEYXRhfVskUm93XVsyXXtCYWNrZ3JvdW5kQ29sb3J9ID0gJyNGRkZGRkYnOwogICAgICAgICAgICAkVGFibGV7Q2VsbERhdGF9WyRSb3ddWzNde0NvbnRlbnR9ICAgICAgICAgPSAkVGFibGVSaWdodFskUm93XS0+e0tleX07CiAgICAgICAgICAgICRUYWJsZXtDZWxsRGF0YX1bJFJvd11bM117Rm9udH0gICAgICAgICAgICA9ICdQcm9wb3J0aW9uYWxCb2xkJzsKICAgICAgICAgICAgJFRhYmxle0NlbGxEYXRhfVskUm93XVs0XXtDb250ZW50fSAgICAgICAgID0gJFRhYmxlUmlnaHRbJFJvd10tPntWYWx1ZX07CiAgICAgICAgfQoKICAgICAgICAkVGFibGV7Q29sdW1uRGF0YX1bMF17V2lkdGh9ID0gODA7CiAgICAgICAgJFRhYmxle0NvbHVtbkRhdGF9WzFde1dpZHRofSA9IDE3MC41OwogICAgICAgICRUYWJsZXtDb2x1bW5EYXRhfVsyXXtXaWR0aH0gPSA0OwogICAgICAgICRUYWJsZXtDb2x1bW5EYXRhfVszXXtXaWR0aH0gPSA4MDsKICAgICAgICAkVGFibGV7Q29sdW1uRGF0YX1bNF17V2lkdGh9ID0gMTcwLjU7CgogICAgICAgICRUYWJsZXtUeXBlfSAgICAgICAgICAgICAgICA9ICdDdXQnOwogICAgICAgICRUYWJsZXtCb3JkZXJ9ICAgICAgICAgICAgICA9IDA7CiAgICAgICAgJFRhYmxle0ZvbnRTaXplfSAgICAgICAgICAgID0gNjsKICAgICAgICAkVGFibGV7QmFja2dyb3VuZENvbG9yRXZlbn0gPSAnI0FBQUFBQSc7CiAgICAgICAgJFRhYmxle0JhY2tncm91bmRDb2xvck9kZH0gID0gJyNEREREREQnOwogICAgICAgICRUYWJsZXtQYWRkaW5nfSAgICAgICAgICAgICA9IDE7CiAgICAgICAgJFRhYmxle1BhZGRpbmdUb3B9ICAgICAgICAgID0gMzsKICAgICAgICAkVGFibGV7UGFkZGluZ0JvdHRvbX0gICAgICAgPSAzOwoKICAgICAgICAjIG91dHB1dCB0YWJsZQogICAgICAgICRTZWxmLT5fUERGT3V0cHV0VGFibGUoCiAgICAgICAgICAgIFRhYmxlID0+IFwlVGFibGUsCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuICcnOwogICAgfQogICAgZWxzZSB7CgogICAgICAgICMgc2hvdyBsZWZ0IHRhYmxlCiAgICAgICAgZm9yIG15ICRSb3cgKEBUYWJsZUxlZnQpIHsKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ0NoYW5nZUluZm9MZWZ0JywKICAgICAgICAgICAgICAgIERhdGEgPT4gJFJvdywKICAgICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgICMgc2hvdyByaWdodCB0YWJsZQogICAgICAgIGZvciBteSAkUm93IChAVGFibGVSaWdodCkgewogICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICAgICAgTmFtZSA9PiAnQ2hhbmdlSW5mb1JpZ2h0JywKICAgICAgICAgICAgICAgIERhdGEgPT4gJFJvdywKICAgICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAnJzsKICAgIH0KfQoKIyBlbWl0IGluZm9ybWF0aW9uIGFib3V0IGEgd29ya29yZGVyCnN1YiBfT3V0cHV0V29ya09yZGVySW5mbyB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhDaGFuZ2UgV29ya09yZGVyKSkgewogICAgICAgIGlmICggIWRlZmluZWQoICRQYXJhbXskQXJndW1lbnR9ICkgKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRfISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbXkgKCAkV29ya09yZGVyLCAkQ2hhbmdlICkgPSBAUGFyYW17cXcoV29ya09yZGVyIENoYW5nZSl9OwoKICAgIG15ICRQcmludFdvcmtPcmRlciA9ICRQYXJhbXtQcmludFdvcmtPcmRlcn0gfHwgMDsKCiAgICAjIGZpbGwgdGhlIHR3byB0YWJsZXMgb24gdG9wLAogICAgIyBib3RoIHRhYmxlcyBoYXZlIHR3byBjb2x1bXM6IEtleSBhbmQgVmFsdWUKICAgIG15ICggQFRhYmxlTGVmdCwgQFRhYmxlUmlnaHQgKTsKCiAgICAjIGRldGVybWluZSB2YWx1ZXMgdGhhdCBjYW4ndCBiZSBkZXRlcm1pbmVkIGluIF9QcmVwYXJlQW5kQWRkSW5mb1JvdygpCiAgICBteSAlQ29tcGxpY2F0ZWRWYWx1ZTsKCiAgICAjIHZhbHVlIGZvciBhdHRhY2htZW50cwogICAgewogICAgICAgIG15ICVBdHRhY2htZW50cyA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+V29ya09yZGVyQXR0YWNobWVudExpc3QoCiAgICAgICAgICAgIFdvcmtPcmRlcklEID0+ICRXb3JrT3JkZXItPntXb3JrT3JkZXJJRH0sCiAgICAgICAgKTsKCiAgICAgICAgbXkgQFZhbHVlczsKCiAgICAgICAgQVRUQUNITUVOVF9JRDoKICAgICAgICBmb3IgbXkgJEF0dGFjaG1lbnRJRCAoIGtleXMgJUF0dGFjaG1lbnRzICkgewoKICAgICAgICAgICAgIyBnZXQgaW5mbyBhYm91dCBmaWxlCiAgICAgICAgICAgIG15ICRBdHRhY2htZW50RGF0YSA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+V29ya09yZGVyQXR0YWNobWVudEdldCgKICAgICAgICAgICAgICAgIEZpbGVJRCA9PiAkQXR0YWNobWVudElELAogICAgICAgICAgICApOwoKICAgICAgICAgICAgIyBjaGVjayBmb3IgYXR0YWNobWVudCBpbmZvcm1hdGlvbgogICAgICAgICAgICBuZXh0IEFUVEFDSE1FTlRJRCBpZiAhJEF0dGFjaG1lbnREYXRhOwoKICAgICAgICAgICAgcHVzaCBAVmFsdWVzLCBzcHJpbnRmICclcyAlcycsCiAgICAgICAgICAgICAgICAkQXR0YWNobWVudERhdGEtPntGaWxlbmFtZX0sCiAgICAgICAgICAgICAgICAkQXR0YWNobWVudERhdGEtPntGaWxlc2l6ZX07CiAgICAgICAgfQoKICAgICAgICAjIHNob3cgcm93CiAgICAgICAgJENvbXBsaWNhdGVkVmFsdWV7QXR0YWNobWVudHN9ID0gam9pbiggIlxuIiwgQFZhbHVlcyApIHx8ICctJzsKICAgIH0KCiAgICAjIGFsbG93IHdyYXBwaW5nIG9mIGxvbmcgd29yZHMgaW4gdGhlIGNoYW5nZSB0aXRsZQogICAgKCAkQ29tcGxpY2F0ZWRWYWx1ZXtXcmFwcGFibGVDaGFuZ2VUaXRsZX0gPSAkQ2hhbmdlLT57Q2hhbmdlVGl0bGV9ICkKICAgICAgICA9fiBzeyAoIFxTezI1fSApIH17JDEgfXhtc2c7CgogICAgbXkgQFJvd1NwZWMgPSAoCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgPT4gJ1dyYXBwYWJsZUNoYW5nZVRpdGxlJywKICAgICAgICAgICAgVGFibGUgICAgID0+IFxAVGFibGVMZWZ0LAogICAgICAgICAgICBLZXkgICAgICAgPT4gJ0NoYW5nZVRpdGxlJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlID0+ICdDaGFuZ2VOdW1iZXInLAogICAgICAgICAgICBUYWJsZSAgICAgPT4gXEBUYWJsZUxlZnQsCiAgICAgICAgICAgIEtleSAgICAgICA9PiAnQ2hhbmdlTnVtYmVyJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlICAgICAgICAgICA9PiAnV29ya09yZGVyU3RhdGUnLAogICAgICAgICAgICBUYWJsZSAgICAgICAgICAgICAgID0+IFxAVGFibGVMZWZ0LAogICAgICAgICAgICBWYWx1ZUlzVHJhbnNsYXRhYmxlID0+IDEsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIEF0dHJpYnV0ZSAgICAgICAgICAgPT4gJ1dvcmtPcmRlclR5cGUnLAogICAgICAgICAgICBUYWJsZSAgICAgICAgICAgICAgID0+IFxAVGFibGVMZWZ0LAogICAgICAgICAgICBWYWx1ZUlzVHJhbnNsYXRhYmxlID0+IDEsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIEF0dHJpYnV0ZSAgID0+ICdXb3JrT3JkZXJBZ2VudCcsCiAgICAgICAgICAgIFRhYmxlICAgICAgID0+IFxAVGFibGVMZWZ0LAogICAgICAgICAgICBWYWx1ZUlzVXNlciA9PiAxLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgID0+ICdQbGFubmVkRWZmb3J0JywKICAgICAgICAgICAgSXNPcHRpb25hbCA9PiAxLAogICAgICAgICAgICBUYWJsZSAgICAgID0+IFxAVGFibGVMZWZ0LAogICAgICAgICAgICBLZXkgICAgICAgID0+ICdQbGFubmVkRWZmb3J0JywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgQXR0cmlidXRlICA9PiAnQWNjb3VudGVkVGltZScsCiAgICAgICAgICAgIElzT3B0aW9uYWwgPT4gMSwKICAgICAgICAgICAgVGFibGUgICAgICA9PiBcQFRhYmxlTGVmdCwKICAgICAgICAgICAgS2V5ICAgICAgICA9PiAnQWNjb3VudGVkVGltZScsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIEF0dHJpYnV0ZSA9PiAnQXR0YWNobWVudHMnLAogICAgICAgICAgICBLZXkgICAgICAgPT4gJ0F0dGFjaG1lbnRzJywKICAgICAgICAgICAgVGFibGUgICAgID0+IFxAVGFibGVMZWZ0LAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnUGxhbm5lZFN0YXJ0VGltZScsCiAgICAgICAgICAgIFRhYmxlICAgICAgID0+IFxAVGFibGVSaWdodCwKICAgICAgICAgICAgVmFsdWVJc1RpbWUgPT4gMSwKICAgICAgICAgICAgS2V5ICAgICAgICAgPT4gJ1BsYW5uZWRTdGFydFRpbWUnLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnUGxhbm5lZEVuZFRpbWUnLAogICAgICAgICAgICBUYWJsZSAgICAgICA9PiBcQFRhYmxlUmlnaHQsCiAgICAgICAgICAgIFZhbHVlSXNUaW1lID0+IDEsCiAgICAgICAgICAgIEtleSAgICAgICAgID0+ICdQbGFubmVkRW5kVGltZScsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIEF0dHJpYnV0ZSAgID0+ICdBY3R1YWxTdGFydFRpbWUnLAogICAgICAgICAgICBUYWJsZSAgICAgICA9PiBcQFRhYmxlUmlnaHQsCiAgICAgICAgICAgIFZhbHVlSXNUaW1lID0+IDEsCiAgICAgICAgICAgIEtleSAgICAgICAgID0+ICdBY3R1YWxTdGFydFRpbWUnLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnQWN0dWFsRW5kVGltZScsCiAgICAgICAgICAgIFRhYmxlICAgICAgID0+IFxAVGFibGVSaWdodCwKICAgICAgICAgICAgVmFsdWVJc1RpbWUgPT4gMSwKICAgICAgICAgICAgS2V5ICAgICAgICAgPT4gJ0FjdHVhbEVuZFRpbWUnLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnQ3JlYXRlVGltZScsCiAgICAgICAgICAgIEtleSAgICAgICAgID0+ICdDcmVhdGVkJywKICAgICAgICAgICAgVGFibGUgICAgICAgPT4gXEBUYWJsZVJpZ2h0LAogICAgICAgICAgICBWYWx1ZUlzVGltZSA9PiAxLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICBBdHRyaWJ1dGUgICA9PiAnQ2hhbmdlVGltZScsCiAgICAgICAgICAgIEtleSAgICAgICAgID0+ICdDaGFuZ2VkJywKICAgICAgICAgICAgVGFibGUgICAgICAgPT4gXEBUYWJsZVJpZ2h0LAogICAgICAgICAgICBWYWx1ZUlzVGltZSA9PiAxLAogICAgICAgIH0sCiAgICApOwoKICAgIGZvciBteSAkUm93U3BlYyAoQFJvd1NwZWMpIHsKCiAgICAgICAgIyBmaWxsIEBUYWJsZUxlZnQgYW5kIEBUYWJsZVJpZ2h0CiAgICAgICAgIyB0aGUgd29ya29yZGVyIGRhdGEgb3ZlcnJpZGVzIHRoZSBjaGFuZ2UgZGF0YQogICAgICAgICRTZWxmLT5fUHJlcGFyZUFuZEFkZEluZm9Sb3coCiAgICAgICAgICAgIFJvd1NwZWMgPT4gJFJvd1NwZWMsCiAgICAgICAgICAgIERhdGEgPT4geyAleyRDaGFuZ2V9LCAleyRXb3JrT3JkZXJ9LCAlQ29tcGxpY2F0ZWRWYWx1ZSB9LAogICAgICAgICk7CiAgICB9CgogICAgbXkgJFJvd3MgPSBtYXgoIHNjYWxhcihAVGFibGVMZWZ0KSwgc2NhbGFyKEBUYWJsZVJpZ2h0KSApOwoKICAgIGlmICggJFNlbGYtPntQREZPYmplY3R9ICkgewogICAgICAgIG15ICVUYWJsZTsKICAgICAgICBmb3IgbXkgJFJvdyAoIDAgLi4gJFJvd3MgLSAxICkgewogICAgICAgICAgICAkVGFibGV7Q2VsbERhdGF9WyRSb3ddWzBde0NvbnRlbnR9ICAgICAgICAgPSAkVGFibGVMZWZ0WyRSb3ddLT57S2V5fTsKICAgICAgICAgICAgJFRhYmxle0NlbGxEYXRhfVskUm93XVswXXtGb250fSAgICAgICAgICAgID0gJ1Byb3BvcnRpb25hbEJvbGQnOwogICAgICAgICAgICAkVGFibGV7Q2VsbERhdGF9WyRSb3ddWzFde0NvbnRlbnR9ICAgICAgICAgPSAkVGFibGVMZWZ0WyRSb3ddLT57VmFsdWV9OwogICAgICAgICAgICAkVGFibGV7Q2VsbERhdGF9WyRSb3ddWzJde0NvbnRlbnR9ICAgICAgICAgPSAnICc7CiAgICAgICAgICAgICRUYWJsZXtDZWxsRGF0YX1bJFJvd11bMl17QmFja2dyb3VuZENvbG9yfSA9ICcjRkZGRkZGJzsKICAgICAgICAgICAgJFRhYmxle0NlbGxEYXRhfVskUm93XVszXXtDb250ZW50fSAgICAgICAgID0gJFRhYmxlUmlnaHRbJFJvd10tPntLZXl9OwogICAgICAgICAgICAkVGFibGV7Q2VsbERhdGF9WyRSb3ddWzNde0ZvbnR9ICAgICAgICAgICAgPSAnUHJvcG9ydGlvbmFsQm9sZCc7CiAgICAgICAgICAgICRUYWJsZXtDZWxsRGF0YX1bJFJvd11bNF17Q29udGVudH0gICAgICAgICA9ICRUYWJsZVJpZ2h0WyRSb3ddLT57VmFsdWV9OwogICAgICAgIH0KCiAgICAgICAgJFRhYmxle0NvbHVtbkRhdGF9WzBde1dpZHRofSA9IDgwOwogICAgICAgICRUYWJsZXtDb2x1bW5EYXRhfVsxXXtXaWR0aH0gPSAxNzAuNTsKICAgICAgICAkVGFibGV7Q29sdW1uRGF0YX1bMl17V2lkdGh9ID0gNDsKICAgICAgICAkVGFibGV7Q29sdW1uRGF0YX1bM117V2lkdGh9ID0gODA7CiAgICAgICAgJFRhYmxle0NvbHVtbkRhdGF9WzRde1dpZHRofSA9IDE3MC41OwoKICAgICAgICAkVGFibGV7VHlwZX0gICAgICAgICAgICAgICAgPSAnQ3V0JzsKICAgICAgICAkVGFibGV7Qm9yZGVyfSAgICAgICAgICAgICAgPSAwOwogICAgICAgICRUYWJsZXtGb250U2l6ZX0gICAgICAgICAgICA9IDY7CiAgICAgICAgJFRhYmxle0JhY2tncm91bmRDb2xvckV2ZW59ID0gJyNBQUFBQUEnOwogICAgICAgICRUYWJsZXtCYWNrZ3JvdW5kQ29sb3JPZGR9ICA9ICcjREREREREJzsKICAgICAgICAkVGFibGV7UGFkZGluZ30gICAgICAgICAgICAgPSAxOwogICAgICAgICRUYWJsZXtQYWRkaW5nVG9wfSAgICAgICAgICA9IDM7CiAgICAgICAgJFRhYmxle1BhZGRpbmdCb3R0b219ICAgICAgID0gMzsKCiAgICAgICAgIyBvdXRwdXQgdGFibGUKICAgICAgICAkU2VsZi0+X1BERk91dHB1dFRhYmxlKAogICAgICAgICAgICBUYWJsZSA9PiBcJVRhYmxlLAogICAgICAgICk7CgogICAgICAgIHJldHVybiAnJzsKICAgIH0KICAgIGVsc2UgewoKICAgICAgICAjIHNob3cgbGVmdCB0YWJsZQogICAgICAgIGZvciBteSAkUm93IChAVGFibGVMZWZ0KSB7CiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgICAgICBOYW1lID0+ICdXb3JrT3JkZXJJbmZvTGVmdCcsCiAgICAgICAgICAgICAgICBEYXRhID0+ICRSb3csCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAjIHNob3cgcmlnaHQgdGFibGUKICAgICAgICBmb3IgbXkgJFJvdyAoQFRhYmxlUmlnaHQpIHsKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1dvcmtPcmRlckluZm9SaWdodCcsCiAgICAgICAgICAgICAgICBEYXRhID0+ICRSb3csCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJyc7CiAgICB9Cn0KCiMgb3V0cHV0IGEgYm9keSBvZiB0ZXh0LCBzdWNoIGFzIGEgY2hhbmdlIGRlc2NyaXB0aW9uCnN1YiBfT3V0cHV0TG9uZ1RleHQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoUHJpbnRDaGFuZ2UgUHJpbnRXb3JrT3JkZXIgVGl0bGUgTG9uZ1RleHQpKSB7CiAgICAgICAgaWYgKCAhZGVmaW5lZCggJFBhcmFteyRBcmd1bWVudH0gKSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJF8hIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICBpZiAoICRTZWxmLT57UERGT2JqZWN0fSApIHsKCiAgICAgICAgIyBzb21lIHZlcnRpY2FsIHdoaXRlc3BhY2UKICAgICAgICAkU2VsZi0+e1BERk9iamVjdH0tPlBvc2l0aW9uU2V0KAogICAgICAgICAgICBNb3ZlID0+ICdyZWxhdGl2JywKICAgICAgICAgICAgWSAgICA9PiAtMTUsCiAgICAgICAgKTsKCiAgICAgICAgIyBvdXRwdXQgaGVhZGxpbmUgZm9yIHRoZSBzZWN0aW9uCiAgICAgICAgJFNlbGYtPntQREZPYmplY3R9LT5UZXh0KAogICAgICAgICAgICBUZXh0ICAgICA9PiAkUGFyYW17VGl0bGV9LAogICAgICAgICAgICBIZWlnaHQgICA9PiA3LAogICAgICAgICAgICBUeXBlICAgICA9PiAnQ3V0JywKICAgICAgICAgICAgRm9udCAgICAgPT4gJ1Byb3BvcnRpb25hbEJvbGRJdGFsaWMnLAogICAgICAgICAgICBGb250U2l6ZSA9PiA3LAogICAgICAgICAgICBDb2xvciAgICA9PiAnIzY2NjY2NicsCiAgICAgICAgKTsKCiAgICAgICAgIyB2ZXJ0aWNhbCB3aGl0ZXNwYWNlIGFmdGVyIHRpdGxlCiAgICAgICAgJFNlbGYtPntQREZPYmplY3R9LT5Qb3NpdGlvblNldCgKICAgICAgICAgICAgTW92ZSA9PiAncmVsYXRpdicsCiAgICAgICAgICAgIFkgICAgPT4gLTQsCiAgICAgICAgKTsKCiAgICAgICAgIyB0YWJsZSBwYXJhbXMgY29tbW9uIHRvIHByaW50aW5nIGEgYm9keSBvZiB0ZXh0LAogICAgICAgICMgYWN0dWFsbHkgYSB0YWJsZSBpcyBhIGJpdCBvZiBvdmVya2lsbCBmb3IgYSBzaW5nbGUgdGV4dCwKICAgICAgICBteSAlVGFibGUgPSAoCiAgICAgICAgICAgIFR5cGUgICAgICAgICAgICA9PiAnQ3V0JywKICAgICAgICAgICAgQm9yZGVyICAgICAgICAgID0+IDAsCiAgICAgICAgICAgIEZvbnQgICAgICAgICAgICA9PiAnTW9ub3NwYWNlZCcsCiAgICAgICAgICAgIEZvbnRTaXplICAgICAgICA9PiA3LAogICAgICAgICAgICBCYWNrZ3JvdW5kQ29sb3IgPT4gJyNEREREREQnLAogICAgICAgICAgICBQYWRkaW5nICAgICAgICAgPT4gNCwKICAgICAgICAgICAgUGFkZGluZ1RvcCAgICAgID0+IDgsCiAgICAgICAgICAgIFBhZGRpbmdCb3R0b20gICA9PiA4LAogICAgICAgICk7CgogICAgICAgICMgb3V0cHV0IHRhYmxlcwogICAgICAgICRUYWJsZXtDZWxsRGF0YX1bMF1bMF17Q29udGVudH0gPSAkUGFyYW17TG9uZ1RleHR9IHx8ICcnOwoKICAgICAgICAjIG91dHB1dCB0YWJsZQogICAgICAgICRTZWxmLT5fUERGT3V0cHV0VGFibGUoCiAgICAgICAgICAgIFRhYmxlID0+IFwlVGFibGUsCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuICcnOwogICAgfQogICAgZWxzZSB7CgogICAgICAgIG15ICRCbG9ja05hbWUgPSAkUGFyYW17UHJpbnRDaGFuZ2V9ID8gJ0NoYW5nZUxvbmdUZXh0JyA6ICdXb3JrT3JkZXJMb25nVGV4dCc7CiAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAkQmxvY2tOYW1lLAogICAgICAgICAgICBEYXRhID0+IFwlUGFyYW0sCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuICcnOwogICAgfQp9CgojIG91dHB1dCBvdmVydmlldyBvdmVyIHdvcmtvcmRlcnMKc3ViIF9PdXRwdXRXb3JrT3JkZXJPdmVydmlldyB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgKHF3KFdvcmtPcmRlck92ZXJ2aWV3KSkgewogICAgICAgIGlmICggIWRlZmluZWQoICRQYXJhbXskX30gKSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coIFByaW9yaXR5ID0+ICdlcnJvcicsIE1lc3NhZ2UgPT4gIk5lZWQgJF8hIiApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIGlmICggJFNlbGYtPntQREZPYmplY3R9ICkgewoKICAgICAgICAjIHZlcnRpY2FsIHdoaXRlc3BhY2UgYmVmb3JlIHNlY3Rpb24gaGVhZGxpbmUKICAgICAgICAkU2VsZi0+e1BERk9iamVjdH0tPlBvc2l0aW9uU2V0KAogICAgICAgICAgICBNb3ZlID0+ICdyZWxhdGl2JywKICAgICAgICAgICAgWSAgICA9PiAtMTUsCiAgICAgICAgKTsKCiAgICAgICAgIyBvdXRwdXQgaGVhZGxpbmUgZm9yIHRoZSBzZWN0aW9uCiAgICAgICAgbXkgJFRyYW5zbGF0aW9uID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9OwogICAgICAgIG15ICRTZWN0aW9uVGl0bGUgPQogICAgICAgICAgICAkVHJhbnNsYXRpb24tPkdldCgnSVRTTSBXb3Jrb3JkZXInKQogICAgICAgICAgICAuICcgJyAuICRUcmFuc2xhdGlvbi0+R2V0KCdPdmVydmlldycpCiAgICAgICAgICAgIC4gJyAoJyAuIHNjYWxhciBAeyAkUGFyYW17V29ya09yZGVyT3ZlcnZpZXd9IH0gLiAnKSc7CiAgICAgICAgJFNlbGYtPntQREZPYmplY3R9LT5UZXh0KAogICAgICAgICAgICBUZXh0ICAgICA9PiAkU2VjdGlvblRpdGxlLAogICAgICAgICAgICBIZWlnaHQgICA9PiA3LAogICAgICAgICAgICBUeXBlICAgICA9PiAnQ3V0JywKICAgICAgICAgICAgRm9udCAgICAgPT4gJ1Byb3BvcnRpb25hbEJvbGRJdGFsaWMnLAogICAgICAgICAgICBGb250U2l6ZSA9PiA3LAogICAgICAgICAgICBDb2xvciAgICA9PiAnIzY2NjY2NicsCiAgICAgICAgKTsKCiAgICAgICAgIyB2ZXJ0aWNhbCB3aGl0ZXNwYWNlIGFmdGVyIHNlY3Rpb24gaGVhZGxpbmUKICAgICAgICAkU2VsZi0+e1BERk9iamVjdH0tPlBvc2l0aW9uU2V0KAogICAgICAgICAgICBNb3ZlID0+ICdyZWxhdGl2JywKICAgICAgICAgICAgWSAgICA9PiAtNCwKICAgICAgICApOwoKICAgICAgICAjIG91dHB1dCB0aGUgb3ZlcnZpZXcgdGFibGUgb25seSBpZiB0aGVyZSBpcyBhdCBsZWFzdCBhIHNpbmdsZSB3b3Jrb3JkZXIsCiAgICAgICAgIyBwcmludGluZyBhbiBlbXB0eSB0YWJsZSBtaWdodCBjcmVhdGUgaGF2b2MKICAgICAgICBpZiAoIEB7ICRQYXJhbXtXb3JrT3JkZXJPdmVydmlld30gfSApIHsKCiAgICAgICAgICAgIG15ICVUYWJsZTsKICAgICAgICAgICAgbXkgJFJvdyA9IDA7CgogICAgICAgICAgICAjIGFkZCB0YWJsZSBoZWFkZXIKICAgICAgICAgICAgJFRhYmxle0NlbGxEYXRhfVsgJFJvdysrIF0gPSBbCiAgICAgICAgICAgICAgICB7IEZvbnQgPT4gJ1Byb3BvcnRpb25hbEJvbGQnLCBDb250ZW50ID0+ICcjJywgfSwKICAgICAgICAgICAgICAgIHsgRm9udCA9PiAnUHJvcG9ydGlvbmFsQm9sZCcsIENvbnRlbnQgPT4gJFRyYW5zbGF0aW9uLT5HZXQoJ1RpdGxlJyksIH0sCiAgICAgICAgICAgICAgICB7IEZvbnQgPT4gJ1Byb3BvcnRpb25hbEJvbGQnLCBDb250ZW50ID0+ICRUcmFuc2xhdGlvbi0+R2V0KCdTdGF0ZScpLCB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIEZvbnQgICAgPT4gJ1Byb3BvcnRpb25hbEJvbGQnLAogICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPT4gJFRyYW5zbGF0aW9uLT5HZXQoJ1BsYW5uZWRTdGFydFRpbWUnKSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgRm9udCAgICA9PiAnUHJvcG9ydGlvbmFsQm9sZCcsCiAgICAgICAgICAgICAgICAgICAgQ29udGVudCA9PiAkVHJhbnNsYXRpb24tPkdldCgnUGxhbm5lZEVuZFRpbWUnKSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgRm9udCAgICA9PiAnUHJvcG9ydGlvbmFsQm9sZCcsCiAgICAgICAgICAgICAgICAgICAgQ29udGVudCA9PiAkVHJhbnNsYXRpb24tPkdldCgnQWN0dWFsU3RhcnRUaW1lJyksCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIEZvbnQgICAgPT4gJ1Byb3BvcnRpb25hbEJvbGQnLAogICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPT4gJFRyYW5zbGF0aW9uLT5HZXQoJ0FjdHVhbEVuZFRpbWUnKSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF07CgogICAgICAgICAgICBmb3IgbXkgJFdvcmtPcmRlciAoIEB7ICRQYXJhbXtXb3JrT3JkZXJPdmVydmlld30gfSApIHsKICAgICAgICAgICAgICAgICRUYWJsZXtDZWxsRGF0YX1bICRSb3crKyBdID0gWyBtYXAgeyB7IENvbnRlbnQgPT4gJF8gfSB9IEB7JFdvcmtPcmRlcn0gXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJFRhYmxle0NvbHVtbkRhdGF9WzBde1dpZHRofSA9IDI7CiAgICAgICAgICAgICRUYWJsZXtDb2x1bW5EYXRhfVsxXXtXaWR0aH0gPSA2MzsKICAgICAgICAgICAgJFRhYmxle0NvbHVtbkRhdGF9WzJde1dpZHRofSA9IDI1OwogICAgICAgICAgICAkVGFibGV7Q29sdW1uRGF0YX1bM117V2lkdGh9ID0gNDA7CiAgICAgICAgICAgICRUYWJsZXtDb2x1bW5EYXRhfVs0XXtXaWR0aH0gPSA0MDsKICAgICAgICAgICAgJFRhYmxle0NvbHVtbkRhdGF9WzVde1dpZHRofSA9IDQwOwogICAgICAgICAgICAkVGFibGV7Q29sdW1uRGF0YX1bNl17V2lkdGh9ID0gNDA7CgogICAgICAgICAgICAjIHRhYmxlIHBhcmFtcwogICAgICAgICAgICAkVGFibGV7VHlwZX0gICAgICAgICAgICA9ICdDdXQnOwogICAgICAgICAgICAkVGFibGV7Qm9yZGVyfSAgICAgICAgICA9IDA7CiAgICAgICAgICAgICRUYWJsZXtGb250U2l6ZX0gICAgICAgID0gNjsKICAgICAgICAgICAgJFRhYmxle0JhY2tncm91bmRDb2xvcn0gPSAnI0RERERERCc7CiAgICAgICAgICAgICRUYWJsZXtQYWRkaW5nfSAgICAgICAgID0gMTsKICAgICAgICAgICAgJFRhYmxle1BhZGRpbmdUb3B9ICAgICAgPSAzOwogICAgICAgICAgICAkVGFibGV7UGFkZGluZ0JvdHRvbX0gICA9IDM7CgogICAgICAgICAgICAjIG91dHB1dCB0YWJsZQogICAgICAgICAgICAkU2VsZi0+X1BERk91dHB1dFRhYmxlKAogICAgICAgICAgICAgICAgVGFibGUgPT4gXCVUYWJsZSwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKCiAgICAgICAgIyBvdXRwdXQgd29ya29yZGVyIG92ZXJ2aWV3CiAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnV29ya09yZGVyT3ZlcnZpZXcnLAogICAgICAgICk7CgogICAgICAgICMgb3V0cHV0IGFsbCByb3dzCiAgICAgICAgZm9yIG15ICRXb3JrT3JkZXIgKCBAeyAkUGFyYW17V29ya09yZGVyT3ZlcnZpZXd9IH0gKSB7CiAgICAgICAgICAgIG15ICVEYXRhOwogICAgICAgICAgICBARGF0YXsKICAgICAgICAgICAgICAgIHF3KCBXb3JrT3JkZXJOdW1iZXIgV29ya09yZGVyVGl0bGUgV29ya09yZGVyU3RhdGUKICAgICAgICAgICAgICAgICAgICBQbGFubmVkU3RhcnRUaW1lIFBsYW5uZWRFbmRUaW1lIEFjdHVhbFN0YXJ0VGltZSBBY3R1YWxFbmRUaW1lICkKICAgICAgICAgICAgICAgIH0gPSBAeyRXb3JrT3JkZXJ9OwoKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1dvcmtPcmRlclJvdycsCiAgICAgICAgICAgICAgICBEYXRhID0+IFwlRGF0YSwKICAgICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAnJzsKICAgIH0KCiAgICByZXR1cm4gMTsKfQoKIyBvdXRwdXQgaW5mbyBhYm91dCBsaW5rZWQgb2JqZWN0cyBvZiBhIGNoYW5nZSBvciBhIHdvcmtvcmRlcgpzdWIgX091dHB1dExpbmtlZE9iamVjdHMgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIChxdyhQcmludENoYW5nZSBQcmludFdvcmtPcmRlciBMaW5rRGF0YSBMaW5rVHlwZUxpc3QpKSB7CiAgICAgICAgaWYgKCAhZGVmaW5lZCggJFBhcmFteyRffSApICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZyggUHJpb3JpdHkgPT4gJ2Vycm9yJywgTWVzc2FnZSA9PiAiTmVlZCAkXyEiICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbXkgJVR5cGVMaXN0ID0gJXsgJFBhcmFte0xpbmtUeXBlTGlzdH0gfTsKICAgIGlmICggJFNlbGYtPntQREZPYmplY3R9ICkgewoKICAgICAgICBteSAlVGFibGU7CiAgICAgICAgbXkgJFJvdyA9IDA7CiAgICAgICAgZm9yIG15ICRMaW5rVHlwZUxpbmtEaXJlY3Rpb24gKCBzb3J0IHsgbGMgJGEgY21wIGxjICRiIH0ga2V5cyAleyAkUGFyYW17TGlua0RhdGF9IH0gKSB7CgogICAgICAgICAgICAjIGludmVzdGlnYXRlIGxpbmsgdHlwZSBuYW1lCiAgICAgICAgICAgIG15IEBMaW5rRGF0YSA9IHNwbGl0IHF7Ojp9LCAkTGlua1R5cGVMaW5rRGlyZWN0aW9uOwogICAgICAgICAgICBteSAkTGlua1R5cGVOYW1lID0gJFR5cGVMaXN0eyAkTGlua0RhdGFbMF0gfS0+eyAkTGlua0RhdGFbMV0gLiAnTmFtZScgfTsKICAgICAgICAgICAgJExpbmtUeXBlTmFtZSA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCRMaW5rVHlwZU5hbWUpOwoKICAgICAgICAgICAgIyBkZWZpbmUgaGVhZGxpbmUKICAgICAgICAgICAgJFRhYmxle0NlbGxEYXRhfVskUm93XVswXXtDb250ZW50fSA9ICRMaW5rVHlwZU5hbWUgLiAnOic7CiAgICAgICAgICAgICRUYWJsZXtDZWxsRGF0YX1bJFJvd11bMF17Rm9udH0gICAgPSAnUHJvcG9ydGlvbmFsQm9sZCc7CiAgICAgICAgICAgICRUYWJsZXtDZWxsRGF0YX1bJFJvd11bMV17Q29udGVudH0gPSAnJzsKCiAgICAgICAgICAgICMgZXh0cmFjdCBvYmplY3QgbGlzdAogICAgICAgICAgICBteSAkT2JqZWN0TGlzdCA9ICRQYXJhbXtMaW5rRGF0YX0tPnskTGlua1R5cGVMaW5rRGlyZWN0aW9ufTsKCiAgICAgICAgICAgIGZvciBteSAkT2JqZWN0ICggc29ydCB7IGxjICRhIGNtcCBsYyAkYiB9IGtleXMgJXskT2JqZWN0TGlzdH0gKSB7CgogICAgICAgICAgICAgICAgZm9yIG15ICRJdGVtICggQHsgJE9iamVjdExpc3QtPnskT2JqZWN0fSB9ICkgewoKICAgICAgICAgICAgICAgICAgICAkVGFibGV7Q2VsbERhdGF9WyRSb3ddWzBde0NvbnRlbnR9IHx8PSAnJzsKICAgICAgICAgICAgICAgICAgICAkVGFibGV7Q2VsbERhdGF9WyRSb3ddWzFde0NvbnRlbnR9ID0gJEl0ZW0tPntUaXRsZX0gfHwgJyc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb250aW51ZSB7CiAgICAgICAgICAgICAgICAgICAgJFJvdysrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkVGFibGV7Q29sdW1uRGF0YX1bMF17V2lkdGh9ID0gODA7CiAgICAgICAgJFRhYmxle0NvbHVtbkRhdGF9WzFde1dpZHRofSA9IDQzMTsKCiAgICAgICAgIyBzZXQgbmV3IHBvc2l0aW9uCiAgICAgICAgJFNlbGYtPntQREZPYmplY3R9LT5Qb3NpdGlvblNldCgKICAgICAgICAgICAgTW92ZSA9PiAncmVsYXRpdicsCiAgICAgICAgICAgIFkgICAgPT4gLTE1LAogICAgICAgICk7CgogICAgICAgICMgb3V0cHV0IGhlYWRsaW5lCiAgICAgICAgJFNlbGYtPntQREZPYmplY3R9LT5UZXh0KAogICAgICAgICAgICBUZXh0ICAgICA9PiAkU2VsZi0+e0xheW91dE9iamVjdH0tPntMYW5ndWFnZU9iamVjdH0tPkdldCgnTGlua2VkIE9iamVjdHMnKSwKICAgICAgICAgICAgSGVpZ2h0ICAgPT4gNywKICAgICAgICAgICAgVHlwZSAgICAgPT4gJ0N1dCcsCiAgICAgICAgICAgIEZvbnQgICAgID0+ICdQcm9wb3J0aW9uYWxCb2xkSXRhbGljJywKICAgICAgICAgICAgRm9udFNpemUgPT4gNywKICAgICAgICAgICAgQ29sb3IgICAgPT4gJyM2NjY2NjYnLAogICAgICAgICk7CgogICAgICAgICMgc2V0IG5ldyBwb3NpdGlvbgogICAgICAgICRTZWxmLT57UERGT2JqZWN0fS0+UG9zaXRpb25TZXQoCiAgICAgICAgICAgIE1vdmUgPT4gJ3JlbGF0aXYnLAogICAgICAgICAgICBZICAgID0+IC00LAogICAgICAgICk7CgogICAgICAgICMgdGFibGUgcGFyYW1zCiAgICAgICAgJFRhYmxle1R5cGV9ICAgICAgICAgICAgPSAnQ3V0JzsKICAgICAgICAkVGFibGV7Qm9yZGVyfSAgICAgICAgICA9IDA7CiAgICAgICAgJFRhYmxle0ZvbnRTaXplfSAgICAgICAgPSA2OwogICAgICAgICRUYWJsZXtCYWNrZ3JvdW5kQ29sb3J9ID0gJyNEREREREQnOwogICAgICAgICRUYWJsZXtQYWRkaW5nfSAgICAgICAgID0gMTsKICAgICAgICAkVGFibGV7UGFkZGluZ1RvcH0gICAgICA9IDM7CiAgICAgICAgJFRhYmxle1BhZGRpbmdCb3R0b219ICAgPSAzOwoKICAgICAgICAjIG91dHB1dCB0YWJsZQogICAgICAgICRTZWxmLT5fUERGT3V0cHV0VGFibGUoCiAgICAgICAgICAgIFRhYmxlID0+IFwlVGFibGUsCiAgICAgICAgKTsKICAgIH0KICAgIGVsc2UgewoKICAgICAgICAjIGRldGVybWluZSB0aGUgbG9jYXRpb24gaW4gdGhlIHBhZ2UKICAgICAgICBteSAkQmxvY2tQcmVmaXggPSAkUGFyYW17UHJpbnRDaGFuZ2V9ID8gJ0NoYW5nZScgOiAnV29ya09yZGVyJzsKCiAgICAgICAgIyBvdXRwdXQgbGluayBkYXRhCiAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAkQmxvY2tQcmVmaXggLiAnTGlua2VkT2JqZWN0cycsCiAgICAgICAgKTsKCiAgICAgICAgZm9yIG15ICRMaW5rVHlwZUxpbmtEaXJlY3Rpb24gKCBzb3J0IHsgbGMgJGEgY21wIGxjICRiIH0ga2V5cyAleyAkUGFyYW17TGlua0RhdGF9IH0gKSB7CgogICAgICAgICAgICAjIGludmVzdGlnYXRlIGxpbmsgdHlwZSBuYW1lCiAgICAgICAgICAgIG15IEBMaW5rRGF0YSA9IHNwbGl0IHF7Ojp9LCAkTGlua1R5cGVMaW5rRGlyZWN0aW9uOwogICAgICAgICAgICBteSAkTGlua1R5cGVOYW1lID0gJFR5cGVMaXN0eyAkTGlua0RhdGFbMF0gfS0+eyAkTGlua0RhdGFbMV0gLiAnTmFtZScgfTsKCiAgICAgICAgICAgICMgb3V0cHV0IGxpbmsgdHlwZSBkYXRhCiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgICAgICBOYW1lID0+ICRCbG9ja1ByZWZpeCAuICdMaW5rVHlwZScsCiAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICBMaW5rVHlwZU5hbWUgPT4gJExpbmtUeXBlTmFtZSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICk7CgogICAgICAgICAgICAjIGV4dHJhY3Qgb2JqZWN0IGxpc3QKICAgICAgICAgICAgbXkgJE9iamVjdExpc3QgPSAkUGFyYW17TGlua0RhdGF9LT57JExpbmtUeXBlTGlua0RpcmVjdGlvbn07CgogICAgICAgICAgICBmb3IgbXkgJE9iamVjdCAoIHNvcnQgeyBsYyAkYSBjbXAgbGMgJGIgfSBrZXlzICV7JE9iamVjdExpc3R9ICkgewoKICAgICAgICAgICAgICAgIGZvciBteSAkSXRlbSAoIEB7ICRPYmplY3RMaXN0LT57JE9iamVjdH0gfSApIHsKCiAgICAgICAgICAgICAgICAgICAgIyBvdXRwdXQgbGluayB0eXBlIGRhdGEKICAgICAgICAgICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICRCbG9ja1ByZWZpeCAuICdMaW5rVHlwZVJvdycsCiAgICAgICAgICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlua1N0cmcgPT4gJEl0ZW0tPntUaXRsZX0sCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICcnOwogICAgfQoKICAgIHJldHVybiAxOwp9CgojIG91dHB1dCBhIHRhYmxlLCBhY2Nyb3NzIHNldmVyYWwgcGFnZXMgaWYgbmVjY2Vzc2FyeQpzdWIgX1BERk91dHB1dFRhYmxlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciAocXcoVGFibGUpKSB7CiAgICAgICAgaWYgKCAhZGVmaW5lZCggJFBhcmFteyRffSApICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZyggUHJpb3JpdHkgPT4gJ2Vycm9yJywgTWVzc2FnZSA9PiAiTmVlZCAkXyEiICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBqdXN0IGZvciBoYXZpbmcgc2hvcnRlciBuYW1lcwogICAgbXkgJFRhYmxlID0gJFBhcmFte1RhYmxlfTsKICAgIG15ICRQYWdlICA9ICRTZWxmLT57UGFnZX07CgogICAgZm9yICggJFBhZ2UtPntQYWdlQ291bnR9IC4uICRQYWdlLT57TWF4UGFnZXN9ICkgewoKICAgICAgICAjIG91dHB1dCB0YWJsZSAob3IgYSBmcmFnbWVudCBvZiBpdCkKICAgICAgICAleyRUYWJsZX0gPSAkU2VsZi0+e1BERk9iamVjdH0tPlRhYmxlKCAleyRUYWJsZX0gKTsKCiAgICAgICAgIyBzdG9wIG91dHB1dCBvciBvdXRwdXQgbmV4dCBwYWdlCiAgICAgICAgaWYgKCAkVGFibGUtPntTdGF0ZX0gKSB7CiAgICAgICAgICAgIGxhc3Q7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkU2VsZi0+e1BERk9iamVjdH0tPlBhZ2VOZXcoCiAgICAgICAgICAgICAgICAleyRQYWdlfSwKICAgICAgICAgICAgICAgIEZvb3RlclJpZ2h0ID0+IGpvaW4oICcgJywgJFBhZ2UtPntQYWdlVGV4dH0sICRQYWdlLT57UGFnZUNvdW50fSApLAogICAgICAgICAgICApOwogICAgICAgICAgICAkUGFnZS0+e1BhZ2VDb3VudH0rKzsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIDE7Cn0KCjE7Cg==</File>
        <File Location="Kernel/Modules/AgentITSMChangePSA.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeSchedule.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeSearch.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeTemplate.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTUNoYW5nZVRlbXBsYXRlLnBtIC0gdGhlIE9UUlM6OklUU006OkNoYW5nZU1hbmFnZW1lbnQgYWRkIHRlbXBsYXRlIG1vZHVsZQojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQWdlbnRJVFNNQ2hhbmdlVGVtcGxhdGUucG0sdiAxLjkgMjAxMC8wMi8wMyAxMjoxNjowMyBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudElUU01DaGFuZ2VUZW1wbGF0ZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTsKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpUZW1wbGF0ZTsKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYWxpZDsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuOSAkKSBbMV07CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0IChxdyhQYXJhbU9iamVjdCBEQk9iamVjdCBMYXlvdXRPYmplY3QgTG9nT2JqZWN0IENvbmZpZ09iamVjdCkpIHsKICAgICAgICBpZiAoICEkU2VsZi0+eyRPYmplY3R9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkZhdGFsRXJyb3IoIE1lc3NhZ2UgPT4gIkdvdCBubyAkT2JqZWN0ISIgKTsKICAgICAgICB9CiAgICB9CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gICA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoJVBhcmFtKTsKICAgICRTZWxmLT57VGVtcGxhdGVPYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OlRlbXBsYXRlLT5uZXcoJVBhcmFtKTsKICAgICRTZWxmLT57VmFsaWRPYmplY3R9ICAgID0gS2VybmVsOjpTeXN0ZW06OlZhbGlkLT5uZXcoJVBhcmFtKTsKCiAgICAjIGdldCBjb25maWcgb2YgZnJvbnRlbmQgbW9kdWxlCiAgICAkU2VsZi0+e0NvbmZpZ30gPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTUNoYW5nZTo6RnJvbnRlbmQ6OiRTZWxmLT57QWN0aW9ufSIpOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IG5lZWRlZCBDaGFuZ2VJRAogICAgbXkgJENoYW5nZUlEID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnQ2hhbmdlSUQnICk7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRDaGFuZ2VJRCApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgTWVzc2FnZSA9PiAnTm8gQ2hhbmdlSUQgaXMgZ2l2ZW4hJywKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGNoZWNrIHBlcm1pc3Npb25zCiAgICBteSAkQWNjZXNzID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5QZXJtaXNzaW9uKAogICAgICAgIFR5cGUgICAgID0+ICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259LAogICAgICAgIENoYW5nZUlEID0+ICRDaGFuZ2VJRCwKICAgICAgICBVc2VySUQgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgZXJyb3Igc2NyZWVuCiAgICBpZiAoICEkQWNjZXNzICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPk5vUGVybWlzc2lvbigKICAgICAgICAgICAgTWVzc2FnZSAgICA9PiAiWW91IG5lZWQgJFNlbGYtPntDb25maWd9LT57UGVybWlzc2lvbn0gcGVybWlzc2lvbnMhIiwKICAgICAgICAgICAgV2l0aEhlYWRlciA9PiAneWVzJywKICAgICAgICApOwogICAgfQoKICAgICMgZ2V0IGNoYW5nZQogICAgbXkgJENoYW5nZSA9ICRTZWxmLT57Q2hhbmdlT2JqZWN0fS0+Q2hhbmdlR2V0KAogICAgICAgIENoYW5nZUlEID0+ICRDaGFuZ2VJRCwKICAgICAgICBVc2VySUQgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgZXJyb3Igc2NyZWVuCiAgICBpZiAoICEkQ2hhbmdlICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICBNZXNzYWdlID0+ICJObyBjaGFuZ2UgZm91bmQgZm9yIGNoYW5nZSBJRCAkQ2hhbmdlSUQuIiwKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIHN0b3JlIG5lZWRlZCBwYXJhbWV0ZXJzIGluICVHZXRQYXJhbSB0byBtYWtlIGl0IHJlbG9hZGFibGUKICAgIG15ICVHZXRQYXJhbTsKICAgIGZvciBteSAkUGFyYW1OYW1lIChxdyhUZW1wbGF0ZU5hbWUgQ29tbWVudCBWYWxpZElEKSkgewogICAgICAgICRHZXRQYXJhbXskUGFyYW1OYW1lfSA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJFBhcmFtTmFtZSApOwogICAgfQoKICAgICMgUmVtZW1iZXIgdGhlIHJlYXNvbiB3aHkgc2F2aW5nIHdhcyBub3QgYXR0ZW1wdGVkLgogICAgIyBUaGUgaXRlbXMgYXJlIHRoZSBuYW1lcyBvZiB0aGUgZHRsIHZhbGlkYXRpb24gZXJyb3IgYmxvY2tzLgogICAgbXkgQFZhbGlkYXRpb25FcnJvcnM7CgogICAgIyBhZGQgYSB0ZW1wbGF0ZQogICAgaWYgKCAkU2VsZi0+e1N1YmFjdGlvbn0gZXEgJ0FkZFRlbXBsYXRlJyApIHsKCiAgICAgICAgIyBjaGVjayB2YWxpZGl0eSBvZiB0aGUgdGVtcGxhdGUgbmFtZQogICAgICAgIGlmICggISRHZXRQYXJhbXtUZW1wbGF0ZU5hbWV9ICkgewogICAgICAgICAgICBwdXNoIEBWYWxpZGF0aW9uRXJyb3JzLCAnSW52YWxpZFRlbXBsYXRlTmFtZSc7CiAgICAgICAgfQoKICAgICAgICBpZiAoICFAVmFsaWRhdGlvbkVycm9ycyApIHsKCiAgICAgICAgICAgICMgc2VyaWFsaXplIHRoZSBjaGFuZ2UKICAgICAgICAgICAgbXkgJFRlbXBsYXRlQ29udGVudCA9ICRTZWxmLT57VGVtcGxhdGVPYmplY3R9LT5UZW1wbGF0ZVNlcmlhbGl6ZSgKICAgICAgICAgICAgICAgIFRlbXBsYXRlVHlwZSA9PiAnSVRTTUNoYW5nZScsCiAgICAgICAgICAgICAgICBDaGFuZ2VJRCAgICAgPT4gJENoYW5nZUlELAogICAgICAgICAgICAgICAgVXNlcklEICAgICAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICMgc2hvdyBlcnJvciBtZXNzYWdlCiAgICAgICAgICAgIGlmICggISRUZW1wbGF0ZUNvbnRlbnQgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgICAgICAgICBNZXNzYWdlID0+ICJUaGUgY2hhbmdlICckQ2hhbmdlSUQnIGNvdWxkIG5vdCBiZSBzZXJpYWxpemVkLiIsCiAgICAgICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CgogICAgICAgICAgICAjIHN0b3JlIHRoZSBzZXJpYWxpemVkIGNoYW5nZQogICAgICAgICAgICBteSAkVGVtcGxhdGVJRCA9ICRTZWxmLT57VGVtcGxhdGVPYmplY3R9LT5UZW1wbGF0ZUFkZCgKICAgICAgICAgICAgICAgIE5hbWUgICAgICAgICA9PiAkR2V0UGFyYW17VGVtcGxhdGVOYW1lfSwKICAgICAgICAgICAgICAgIENvbW1lbnQgICAgICA9PiAkR2V0UGFyYW17Q29tbWVudH0sCiAgICAgICAgICAgICAgICBWYWxpZElEICAgICAgPT4gJEdldFBhcmFte1ZhbGlkSUR9LAogICAgICAgICAgICAgICAgVGVtcGxhdGVUeXBlID0+ICdJVFNNQ2hhbmdlJywKICAgICAgICAgICAgICAgIENvbnRlbnQgICAgICA9PiAkVGVtcGxhdGVDb250ZW50LAogICAgICAgICAgICAgICAgVXNlcklEICAgICAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICMgc2hvdyBlcnJvciBtZXNzYWdlCiAgICAgICAgICAgIGlmICggISRUZW1wbGF0ZUlEICkgewogICAgICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZSA9PiAiQ291bGQgbm90IGFkZCB0aGUgdGVtcGxhdGUuIiwKICAgICAgICAgICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgZXZlcnl0aGluZyB3ZW50IHdlbGwsIHJlZGlyZWN0IHRvIHpvb20gbWFzawogICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5SZWRpcmVjdCgKICAgICAgICAgICAgICAgIE9QID0+ICRTZWxmLT57TGFzdENoYW5nZVZpZXd9LAogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewoKICAgICAgICAjIG5vIHN1YmFjdGlvbiwKICAgIH0KCiAgICAjIG91dHB1dCBoZWFkZXIKICAgIG15ICRPdXRwdXQgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkhlYWRlcigKICAgICAgICBUaXRsZSA9PiAnVGVtcGxhdGUnLAogICAgKTsKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5OYXZpZ2F0aW9uQmFyKCk7CgogICAgbXkgJFZhbGlkU2VsZWN0aW9uU3RyaW5nID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CdWlsZFNlbGVjdGlvbigKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgJFNlbGYtPntWYWxpZE9iamVjdH0tPlZhbGlkTGlzdCgpLAogICAgICAgIH0sCiAgICAgICAgTmFtZSAgICAgICA9PiAnVmFsaWRJRCcsCiAgICAgICAgU2VsZWN0ZWRJRCA9PiAkR2V0UGFyYW17VmFsaWRJRH0gfHwgKCAkU2VsZi0+e1ZhbGlkT2JqZWN0fS0+VmFsaWRJRHNHZXQoKSApWzBdLAogICAgICAgIFNvcnQgICAgICAgPT4gJ051bWVyaWNLZXknLAogICAgKTsKCiAgICAjIGFkZCB0aGUgdmFsaWRhdGlvbiBlcnJvciBtZXNzYWdlcwogICAgZm9yIG15ICRCbG9ja05hbWUgKEBWYWxpZGF0aW9uRXJyb3JzKSB7CiAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jayggTmFtZSA9PiAkQmxvY2tOYW1lICk7CiAgICB9CgogICAgIyBzdGFydCB0ZW1wbGF0ZSBvdXRwdXQKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZ2VudElUU01DaGFuZ2VUZW1wbGF0ZScsCiAgICAgICAgRGF0YSAgICAgICAgID0+IHsKICAgICAgICAgICAgJUdldFBhcmFtLAogICAgICAgICAgICBDaGFuZ2VJRCAgICAgICAgICAgICA9PiAkQ2hhbmdlSUQsCiAgICAgICAgICAgIFZhbGlkU2VsZWN0aW9uU3RyaW5nID0+ICRWYWxpZFNlbGVjdGlvblN0cmluZywKICAgICAgICAgICAgQ2hhbmdlTnVtYmVyICAgICAgICAgPT4gJENoYW5nZS0+e0NoYW5nZU51bWJlcn0sCiAgICAgICAgICAgIENoYW5nZVRpdGxlICAgICAgICAgID0+ICRDaGFuZ2UtPntDaGFuZ2VUaXRsZX0sCiAgICAgICAgfSwKICAgICk7CgogICAgIyBhZGQgZm9vdGVyCiAgICAkT3V0cHV0IC49ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+Rm9vdGVyKCk7CgogICAgcmV0dXJuICRPdXRwdXQ7Cn0KCjE7Cg==</File>
        <File Location="Kernel/Modules/AgentITSMChangeTimeSlot.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMChangeZoom.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMTemplateDelete.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTVRlbXBsYXRlRGVsZXRlLnBtIC0gdGhlIE9UUlM6OklUU006OkNoYW5nZU1hbmFnZW1lbnQgdGVtcGxhdGUgZGVsZXRlIG1vZHVsZQojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQWdlbnRJVFNNVGVtcGxhdGVEZWxldGUucG0sdiAxLjIgMjAxMC8wMS8yOCAxMzo0NTozNSBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudElUU01UZW1wbGF0ZURlbGV0ZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTsKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpUZW1wbGF0ZTsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuMiAkKSBbMV07CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0IChxdyhQYXJhbU9iamVjdCBEQk9iamVjdCBMYXlvdXRPYmplY3QgTG9nT2JqZWN0IENvbmZpZ09iamVjdCkpIHsKICAgICAgICBpZiAoICEkU2VsZi0+eyRPYmplY3R9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkZhdGFsRXJyb3IoIE1lc3NhZ2UgPT4gIkdvdCBubyAkT2JqZWN0ISIgKTsKICAgICAgICB9CiAgICB9CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gICA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoJVBhcmFtKTsKICAgICRTZWxmLT57VGVtcGxhdGVPYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OlRlbXBsYXRlLT5uZXcoJVBhcmFtKTsKCiAgICAjIGdldCBjb25maWcgZm9yIGZyb250ZW5kCiAgICAkU2VsZi0+e0NvbmZpZ30gPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTUNoYW5nZTo6RnJvbnRlbmQ6OiRTZWxmLT57QWN0aW9ufSIpOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgcGVybWlzc2lvbnMKICAgIG15ICRBY2Nlc3MgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPlBlcm1pc3Npb24oCiAgICAgICAgVHlwZSAgID0+ICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259LAogICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgZXJyb3Igc2NyZWVuCiAgICBpZiAoICEkQWNjZXNzICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPk5vUGVybWlzc2lvbigKICAgICAgICAgICAgTWVzc2FnZSAgICA9PiAiWW91IG5lZWQgJFNlbGYtPntDb25maWd9LT57UGVybWlzc2lvbn0gcGVybWlzc2lvbiEiLAogICAgICAgICAgICBXaXRoSGVhZGVyID0+ICd5ZXMnLAogICAgICAgICk7CiAgICB9CgogICAgIyBnZXQgbmVlZGVkIFRlbXBsYXRlSUQKICAgIG15ICRUZW1wbGF0ZUlEID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnVGVtcGxhdGVJRCcgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFRlbXBsYXRlSUQgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ05vIFRlbXBsYXRlSUQgaXMgZ2l2ZW4hJywKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCB0ZW1wbGF0ZSBkYXRhCiAgICBteSAkVGVtcGxhdGUgPSAkU2VsZi0+e1RlbXBsYXRlT2JqZWN0fS0+VGVtcGxhdGVHZXQoCiAgICAgICAgVGVtcGxhdGVJRCA9PiAkVGVtcGxhdGVJRCwKICAgICAgICBVc2VySUQgICAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICk7CgogICAgIyBjaGVjayBlcnJvcgogICAgaWYgKCAhJFRlbXBsYXRlICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICBNZXNzYWdlID0+ICJUZW1wbGF0ZSAnJFRlbXBsYXRlSUQnIG5vdCBmb3VuZCBpbiBkYXRhYmFzZSEiLAogICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICApOwogICAgfQoKICAgIGlmICggJFNlbGYtPntTdWJhY3Rpb259IGVxICdUZW1wbGF0ZURlbGV0ZScgKSB7CgogICAgICAgIG15ICRDb3VsZERlbGV0ZVRlbXBsYXRlID0gJFNlbGYtPntUZW1wbGF0ZU9iamVjdH0tPlRlbXBsYXRlRGVsZXRlKAogICAgICAgICAgICBUZW1wbGF0ZUlEID0+ICRUZW1wbGF0ZUlELAogICAgICAgICAgICBVc2VySUQgICAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwoKICAgICAgICBpZiAoJENvdWxkRGVsZXRlVGVtcGxhdGUpIHsKCiAgICAgICAgICAgICMgcmVkaXJlY3QgdG8gY2hhbmdlIHpvb20gbWFzaywgd2hlbiB1cGRhdGUgd2FzIHN1Y2Nlc3NmdWwKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+UmVkaXJlY3QoCiAgICAgICAgICAgICAgICBPUCA9PiAiQWN0aW9uPUFnZW50SVRTTVRlbXBsYXRlT3ZlcnZpZXciLAogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKCiAgICAgICAgICAgICMgc2hvdyBlcnJvciBtZXNzYWdlLCB3aGVuIGRlbGV0ZSBmYWlsZWQKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgICAgICBNZXNzYWdlID0+ICJXYXMgbm90IGFibGUgdG8gZGVsZXRlIHRoZSB0ZW1wbGF0ZSAkVGVtcGxhdGVJRCEiLAogICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQoKICAgICMgb3V0cHV0IGhlYWRlcgogICAgbXkgJE91dHB1dCA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+SGVhZGVyKAogICAgICAgIFRpdGxlID0+ICdEZWxldGUnLAogICAgKTsKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5OYXZpZ2F0aW9uQmFyKCk7CgogICAgIyBzdGFydCB0ZW1wbGF0ZSBvdXRwdXQKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZ2VudElUU01UZW1wbGF0ZURlbGV0ZScsCiAgICAgICAgRGF0YSAgICAgICAgID0+IHsKICAgICAgICAgICAgJXskVGVtcGxhdGV9LAogICAgICAgIH0sCiAgICApOwoKICAgICMgYWRkIGZvb3RlcgogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkZvb3RlcigpOwoKICAgIHJldHVybiAkT3V0cHV0Owp9CgoxOwo=</File>
        <File Location="Kernel/Modules/AgentITSMTemplateEdit.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTVRlbXBsYXRlRWRpdC5wbSAtIHRoZSB0ZW1wbGF0ZSBlZGl0IG1vZHVsZQojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQWdlbnRJVFNNVGVtcGxhdGVFZGl0LnBtLHYgMS40IDIwMTAvMDEvMjggMTM6NDU6MzUgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRJVFNNVGVtcGxhdGVFZGl0OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOwp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OlRlbXBsYXRlOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS40ICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKHF3KFBhcmFtT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBMb2dPYmplY3QgQ29uZmlnT2JqZWN0KSkgewogICAgICAgIGlmICggISRTZWxmLT57JE9iamVjdH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RmF0YWxFcnJvciggTWVzc2FnZSA9PiAiR290IG5vICRPYmplY3QhIiApOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNyZWF0ZSBhZGRpdGlvbmFsIG9iamVjdHMKICAgICRTZWxmLT57Q2hhbmdlT2JqZWN0fSAgID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2UtPm5ldyglUGFyYW0pOwogICAgJFNlbGYtPntUZW1wbGF0ZU9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6VGVtcGxhdGUtPm5ldyglUGFyYW0pOwogICAgJFNlbGYtPntWYWxpZE9iamVjdH0gICAgPSBLZXJuZWw6OlN5c3RlbTo6VmFsaWQtPm5ldyglUGFyYW0pOwoKICAgICMgZ2V0IGNvbmZpZyBmb3IgZnJvbnRlbmQKICAgICRTZWxmLT57Q29uZmlnfSA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCJJVFNNQ2hhbmdlOjpGcm9udGVuZDo6JFNlbGYtPntBY3Rpb259Iik7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBwZXJtaXNzaW9ucwogICAgbXkgJEFjY2VzcyA9ICRTZWxmLT57Q2hhbmdlT2JqZWN0fS0+UGVybWlzc2lvbigKICAgICAgICBUeXBlICAgPT4gJFNlbGYtPntDb25maWd9LT57UGVybWlzc2lvbn0sCiAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKICAgICk7CgogICAgIyBlcnJvciBzY3JlZW4KICAgIGlmICggISRBY2Nlc3MgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+Tm9QZXJtaXNzaW9uKAogICAgICAgICAgICBNZXNzYWdlICAgID0+ICJZb3UgbmVlZCAkU2VsZi0+e0NvbmZpZ30tPntQZXJtaXNzaW9ufSBwZXJtaXNzaW9uISIsCiAgICAgICAgICAgIFdpdGhIZWFkZXIgPT4gJ3llcycsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCBuZWVkZWQgVGVtcGxhdGVJRAogICAgbXkgJFRlbXBsYXRlSUQgPSAkU2VsZi0+e1BhcmFtT2JqZWN0fS0+R2V0UGFyYW0oIFBhcmFtID0+ICdUZW1wbGF0ZUlEJyApOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkVGVtcGxhdGVJRCApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgTWVzc2FnZSA9PiAnTm8gVGVtcGxhdGVJRCBpcyBnaXZlbiEnLAogICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICApOwogICAgfQoKICAgICMgc3RvcmUgbmVlZGVkIHBhcmFtZXRlcnMgaW4gJUdldFBhcmFtIHRvIG1ha2UgaXQgcmVsb2FkYWJsZQogICAgbXkgJUdldFBhcmFtOwogICAgZm9yIG15ICRQYXJhbU5hbWUgKHF3KFRlbXBsYXRlTmFtZSBDb21tZW50IFZhbGlkSUQpKSB7CiAgICAgICAgJEdldFBhcmFteyRQYXJhbU5hbWV9ID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAkUGFyYW1OYW1lICk7CiAgICB9CgogICAgbXkgQFZhbGlkYXRpb25FcnJvcnM7CgogICAgIyB1cGRhdGUgdGhlIHRlbXBsYXRlCiAgICBpZiAoICRTZWxmLT57U3ViYWN0aW9ufSBlcSAnVXBkYXRlVGVtcGxhdGUnICkgewoKICAgICAgICAjIGNoZWNrIHZhbGlkaXR5IG9mIHRoZSB0ZW1wbGF0ZSBuYW1lCiAgICAgICAgbXkgJFRlbXBsYXRlTmFtZSA9ICRHZXRQYXJhbXtUZW1wbGF0ZU5hbWV9OwogICAgICAgIGlmICggISRUZW1wbGF0ZU5hbWUgKSB7CiAgICAgICAgICAgIHB1c2ggQFZhbGlkYXRpb25FcnJvcnMsICdJbnZhbGlkVGVtcGxhdGVOYW1lJzsKICAgICAgICB9CgogICAgICAgIGlmICggIUBWYWxpZGF0aW9uRXJyb3JzICkgewogICAgICAgICAgICBteSAkQ291bGRVcGRhdGVUZW1wbGF0ZSA9ICRTZWxmLT57VGVtcGxhdGVPYmplY3R9LT5UZW1wbGF0ZVVwZGF0ZSgKICAgICAgICAgICAgICAgIFRlbXBsYXRlSUQgPT4gJFRlbXBsYXRlSUQsCiAgICAgICAgICAgICAgICBOYW1lICAgICAgID0+ICRHZXRQYXJhbXtUZW1wbGF0ZU5hbWV9LAogICAgICAgICAgICAgICAgQ29tbWVudCAgICA9PiAkR2V0UGFyYW17Q29tbWVudH0sCiAgICAgICAgICAgICAgICBWYWxpZElEICAgID0+ICRHZXRQYXJhbXtWYWxpZElEfSwKICAgICAgICAgICAgICAgIFVzZXJJRCAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICApOwoKICAgICAgICAgICAgaWYgKCRDb3VsZFVwZGF0ZVRlbXBsYXRlKSB7CgogICAgICAgICAgICAgICAgIyByZWRpcmVjdCB0byB6b29tIG1hc2ssIFRPRE86IHVzZSB0aGUgc3RvcmVkIGxhc3QgdmlldwogICAgICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+UmVkaXJlY3QoCiAgICAgICAgICAgICAgICAgICAgT1AgPT4gIkFjdGlvbj1BZ2VudElUU01UZW1wbGF0ZU92ZXJ2aWV3IiwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CgogICAgICAgICAgICAgICAgIyBzaG93IGVycm9yIG1lc3NhZ2UKICAgICAgICAgICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2UgPT4gIldhcyBub3QgYWJsZSB0byB1cGRhdGUgVGVtcGxhdGUgJFRlbXBsYXRlSUQhIiwKICAgICAgICAgICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKCiAgICAgICAgIyBpbml0aWFsbHkgdXNlIHRoZSBkYXRhIGZyb20gJFRlbXBsYXRlCiAgICAgICAgJUdldFBhcmFtID0gKCk7CiAgICB9CgogICAgIyBnZXQgdGVtcGxhdGUgZGF0YQogICAgbXkgJFRlbXBsYXRlID0gJFNlbGYtPntUZW1wbGF0ZU9iamVjdH0tPlRlbXBsYXRlR2V0KAogICAgICAgIFRlbXBsYXRlSUQgPT4gJFRlbXBsYXRlSUQsCiAgICAgICAgVXNlcklEICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgZXJyb3IKICAgIGlmICggISRUZW1wbGF0ZSApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgTWVzc2FnZSA9PiAiVGVtcGxhdGUgJyRUZW1wbGF0ZUlEJyBub3QgZm91bmQgaW4gZGF0YWJhc2UhIiwKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGZpeCB1cCB0aGUgbmFtZQogICAgJFRlbXBsYXRlLT57VGVtcGxhdGVOYW1lfSA9ICRUZW1wbGF0ZS0+e05hbWV9OwoKICAgICMgb3V0cHV0IGhlYWRlcgogICAgbXkgJE91dHB1dCA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+SGVhZGVyKAogICAgICAgIFRpdGxlID0+ICRUZW1wbGF0ZS0+e1RlbXBsYXRlTmFtZX0sCiAgICApOwogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk5hdmlnYXRpb25CYXIoKTsKCiAgICBteSAkVmFsaWRTZWxlY3Rpb25TdHJpbmcgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJ1aWxkU2VsZWN0aW9uKAogICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAkU2VsZi0+e1ZhbGlkT2JqZWN0fS0+VmFsaWRMaXN0KCksCiAgICAgICAgfSwKICAgICAgICBOYW1lICAgICAgID0+ICdWYWxpZElEJywKICAgICAgICBTZWxlY3RlZElEID0+ICRHZXRQYXJhbXtWYWxpZElEfQogICAgICAgICAgICB8fCAkVGVtcGxhdGUtPntWYWxpZElEfQogICAgICAgICAgICB8fCAoICRTZWxmLT57VmFsaWRPYmplY3R9LT5WYWxpZElEc0dldCgpIClbMF0sCiAgICAgICAgU29ydCA9PiAnTnVtZXJpY0tleScsCiAgICApOwoKICAgICMgYWRkIHRoZSB2YWxpZGF0aW9uIGVycm9yIG1lc3NhZ2VzCiAgICBmb3IgbXkgJEJsb2NrTmFtZSAoQFZhbGlkYXRpb25FcnJvcnMpIHsKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKCBOYW1lID0+ICRCbG9ja05hbWUgKTsKICAgIH0KCiAgICAjIHN0YXJ0IHRlbXBsYXRlIG91dHB1dAogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50SVRTTVRlbXBsYXRlRWRpdCcsCiAgICAgICAgRGF0YSAgICAgICAgID0+IHsKICAgICAgICAgICAgJXskVGVtcGxhdGV9LAogICAgICAgICAgICAlR2V0UGFyYW0sCiAgICAgICAgICAgIFZhbGlkU2VsZWN0aW9uU3RyaW5nID0+ICRWYWxpZFNlbGVjdGlvblN0cmluZywKICAgICAgICB9LAogICAgKTsKCiAgICAjIGFkZCBmb290ZXIKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Gb290ZXIoKTsKCiAgICByZXR1cm4gJE91dHB1dDsKfQoKMTsK</File>
        <File Location="Kernel/Modules/AgentITSMTemplateOverview.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMUserSearch.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTVVzZXJTZWFyY2gucG0gLSBhIG1vZHVsZSB1c2VkIGZvciB0aGUgYXV0b2NvbXBsZXRlIGZlYXR1cmUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IEFnZW50SVRTTVVzZXJTZWFyY2gucG0sdiAxLjE1IDIwMTAvMDUvMTEgMTU6MjE6MjYgdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudElUU01Vc2VyU2VhcmNoOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xNSAkKSBbMV07CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgYWxsIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAoCiAgICAgICAgcXcoUGFyYW1PYmplY3QgREJPYmplY3QgTGF5b3V0T2JqZWN0IENvbmZpZ09iamVjdCBMb2dPYmplY3QgVXNlck9iamVjdCBHcm91cE9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgaWYgKCAhJFNlbGYtPnskT2JqZWN0fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5GYXRhbEVycm9yKCBNZXNzYWdlID0+ICJHb3Qgbm8gJE9iamVjdCEiICk7CiAgICAgICAgfQogICAgfQoKICAgICMgZ2V0IGNvbmZpZyBmb3IgZnJvbnRlbmQKICAgICRTZWxmLT57Q29uZmlnfSA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCJJVFNNQ2hhbmdlOjpGcm9udGVuZDo6JFNlbGYtPntBY3Rpb259Iik7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJEpTT04gPSAnJzsKCiAgICAjIHNlYXJjaCB1c2VycwogICAgaWYgKCAhJFNlbGYtPntTdWJhY3Rpb259ICkgewoKICAgICAgICAjIGdldCBuZWVkZWQgcGFyYW1zCiAgICAgICAgbXkgJFNlYXJjaCA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ1NlYXJjaCcgKSB8fCAnJzsKICAgICAgICBteSAkR3JvdXBzID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnR3JvdXBzJyApIHx8ICcnOwoKICAgICAgICAjIGdldCBhbGwgbWVtYmVycyBvZiB0aGUgZ3JvdXBzCiAgICAgICAgbXkgJUdyb3VwVXNlcnM7CiAgICAgICAgaWYgKCRHcm91cHMpIHsKICAgICAgICAgICAgbXkgQEdyb3VwTmFtZXMgPSBzcGxpdCAvLFxzKy8sICRHcm91cHM7CgogICAgICAgICAgICBHUk9VUE5BTUU6CiAgICAgICAgICAgIGZvciBteSAkR3JvdXBOYW1lIChAR3JvdXBOYW1lcykgewoKICAgICAgICAgICAgICAgICMgYWxsb3cgdHJhaWxpbmcgY29tbWEKICAgICAgICAgICAgICAgIG5leHQgR1JPVVBOQU1FIGlmICEkR3JvdXBOYW1lOwoKICAgICAgICAgICAgICAgIG15ICRHcm91cElEID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTG9va3VwKAogICAgICAgICAgICAgICAgICAgIEdyb3VwID0+ICRHcm91cE5hbWUsCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIG5leHQgR1JPVVBOQU1FIGlmICEkR3JvdXBJRDsKCiAgICAgICAgICAgICAgICAjIGdldCB1c2VycyBpbiBncm91cAogICAgICAgICAgICAgICAgbXkgJVVzZXJzID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICAgICAgICAgICAgICBHcm91cElEID0+ICRHcm91cElELAogICAgICAgICAgICAgICAgICAgIFR5cGUgICAgPT4gJ3JvJywKICAgICAgICAgICAgICAgICAgICBSZXN1bHQgID0+ICdIQVNIJywKICAgICAgICAgICAgICAgICAgICBDYWNoZWQgID0+IDEsCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIG15IEBVc2VySURzID0ga2V5cyAlVXNlcnM7CiAgICAgICAgICAgICAgICBAR3JvdXBVc2Vyc3tAVXNlcklEc30gPSBAVXNlcklEczsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyB3b3JrYXJvdW5kLCBhbGwgYXV0byBjb21wbGV0aW9uIHJlcXVlc3RzIGdldCBwb3N0ZWQgYnkgdXRmOCBhbnl3YXkKICAgICAgICAjIGNvbnZlcnQgYW55IHRvIDhiaXQgc3RyaW5nIGlmIGFwcGxpY2F0aW9uIGlzIG5vdCBydW5uaW5nIGluIHV0ZjgKICAgICAgICBpZiAoICEkU2VsZi0+e0VuY29kZU9iamVjdH0tPkVuY29kZUludGVybmFsVXNlZCgpICkgewogICAgICAgICAgICAkU2VhcmNoID0gJFNlbGYtPntFbmNvZGVPYmplY3R9LT5Db252ZXJ0KAogICAgICAgICAgICAgICAgVGV4dCA9PiAkU2VhcmNoLAogICAgICAgICAgICAgICAgRnJvbSA9PiAndXRmLTgnLAogICAgICAgICAgICAgICAgVG8gICA9PiAkU2VsZi0+e0xheW91dE9iamVjdH0tPntVc2VyQ2hhcnNldH0sCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAjIGdldCB1c2VyIGxpc3QKICAgICAgICBteSAlVXNlckxpc3QgPSAkU2VsZi0+e1VzZXJPYmplY3R9LT5Vc2VyU2VhcmNoKAogICAgICAgICAgICBTZWFyY2ggPT4gJFNlYXJjaCwKICAgICAgICAgICAgVmFsaWQgID0+IDEsCiAgICAgICAgKTsKCiAgICAgICAgIyB0aGUgZGF0YSB0aGF0IHdpbGwgYmUgc2VudCBhcyByZXNwb25zZQogICAgICAgIG15IEBEYXRhOwoKICAgICAgICBVU0VSSUQ6CiAgICAgICAgZm9yIG15ICRVc2VySUQgKCBzb3J0IHsgJFVzZXJMaXN0eyRhfSBjbXAgJFVzZXJMaXN0eyRifSB9IGtleXMgJVVzZXJMaXN0ICkgewoKICAgICAgICAgICAgIyBpZiBncm91cHMgYXJlIHJlcXVpcmVkIGFuZCB1c2VyIGlzIG5vdCBtZW1iZXIgb2Ygb25lIG9mIHRoZSBncm91cHMKICAgICAgICAgICAgIyB0aGVuIHNraXAgdGhlIHVzZXIKICAgICAgICAgICAgaWYgKCAkR3JvdXBzICYmICEkR3JvdXBVc2Vyc3skVXNlcklEfSApIHsKICAgICAgICAgICAgICAgIG5leHQgVVNFUklEOwogICAgICAgICAgICB9CgogICAgICAgICAgICAjIFRoZSB2YWx1ZXMgaW4gJVVzZXJMaXN0IGFyZSBpbiB0aGUgZm9ybTogJ21tIE1heCBNdXN0ZXJtYW5uJy4KICAgICAgICAgICAgIyBTbyBhc3NlbWJsZSBhIG5lYXRlciBzdHJpbmcgZm9yIGRpc3BsYXkuCiAgICAgICAgICAgICMgKEFjdHVhbGx5IFVzZXJTZWFyY2goKSBjb250YWlucyBjb2RlIGZvciBmb3JtYXRpbmcsIGJ1dCB0aGF0IGlzIHVzdWFsbHkgbm90IGNhbGxlZC4pCiAgICAgICAgICAgIG15ICVVc2VyID0gJFNlbGYtPntVc2VyT2JqZWN0fS0+R2V0VXNlckRhdGEoCiAgICAgICAgICAgICAgICBVc2VySUQgPT4gJFVzZXJJRCwKICAgICAgICAgICAgICAgIFZhbGlkICA9PiAkUGFyYW17VmFsaWR9LAogICAgICAgICAgICApOwogICAgICAgICAgICBteSAkVXNlclZhbHVlUGxhaW4gPSBzcHJpbnRmICciJXMgJXMiIDwlcz4nLAogICAgICAgICAgICAgICAgJFVzZXJ7VXNlckZpcnN0bmFtZX0sCiAgICAgICAgICAgICAgICAkVXNlcntVc2VyTGFzdG5hbWV9LAogICAgICAgICAgICAgICAgJFVzZXJ7VXNlckVtYWlsfTsKCiAgICAgICAgICAgICMgaHRtbCBxdW90ZSBjaGFyYWN0ZXJzIGxpa2UgPD4KICAgICAgICAgICAgbXkgJFVzZXJWYWx1ZSA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QXNjaWkySHRtbCgKICAgICAgICAgICAgICAgIFRleHQgPT4gJFVzZXJWYWx1ZVBsYWluLAogICAgICAgICAgICApOwoKICAgICAgICAgICAgcHVzaCBARGF0YSwgewogICAgICAgICAgICAgICAgVXNlcktleSAgICAgICAgPT4gJFVzZXJJRCwKICAgICAgICAgICAgICAgIFVzZXJWYWx1ZSAgICAgID0+ICRVc2VyVmFsdWUsCiAgICAgICAgICAgICAgICBVc2VyVmFsdWVQbGFpbiA9PiAkVXNlclZhbHVlUGxhaW4sCiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICAjIGJ1aWxkIEpTT04gb3V0cHV0CiAgICAgICAgJEpTT04gPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkpTT04oCiAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgUmVzcG9uc2UgPT4gewogICAgICAgICAgICAgICAgICAgIFJlc3VsdHMgPT4gXEBEYXRhLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICApOwogICAgfQoKICAgICMgc2VuZCBKU09OIHJlc3BvbnNlCiAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5BdHRhY2htZW50KAogICAgICAgIENvbnRlbnRUeXBlID0+ICd0ZXh0L3BsYWluOyBjaGFyc2V0PScgLiAkU2VsZi0+e0xheW91dE9iamVjdH0tPntDaGFyc2V0fSwKICAgICAgICBDb250ZW50ICAgICA9PiAkSlNPTiB8fCAnJywKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgKTsKCn0KCjE7Cg==</File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderAdd.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderAgent.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTVdvcmtPcmRlckFnZW50LnBtIC0gdGhlIE9UUlM6OklUU006OkNoYW5nZU1hbmFnZW1lbnQgd29ya29yZGVyIGFnZW50IGVkaXQgbW9kdWxlCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBBZ2VudElUU01Xb3JrT3JkZXJBZ2VudC5wbSx2IDEuMzcgMjAxMC8wMi8wNSAxODozNToxNCB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFnZW50SVRTTVdvcmtPcmRlckFnZW50OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOwp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjM3ICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KFBhcmFtT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBMb2dPYmplY3QgVXNlck9iamVjdCBHcm91cE9iamVjdCBDb25maWdPYmplY3QpCiAgICAgICAgKQogICAgewogICAgICAgIGlmICggISRTZWxmLT57JE9iamVjdH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RmF0YWxFcnJvciggTWVzc2FnZSA9PiAiR290IG5vICRPYmplY3QhIiApOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNyZWF0ZSBhZGRpdGlvbmFsIG9iamVjdHMKICAgICRTZWxmLT57Q2hhbmdlT2JqZWN0fSAgICA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoJVBhcmFtKTsKICAgICRTZWxmLT57V29ya09yZGVyT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyLT5uZXcoJVBhcmFtKTsKCiAgICAjIGdldCBjb25maWcgZm9yIGZyb250ZW5kCiAgICAkU2VsZi0+e0NvbmZpZ30gPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTVdvcmtPcmRlcjo6RnJvbnRlbmQ6OiRTZWxmLT57QWN0aW9ufSIpOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IG5lZWRlZCBXb3JrT3JkZXJJRAogICAgbXkgJFdvcmtPcmRlcklEID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnV29ya09yZGVySUQnICk7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRXb3JrT3JkZXJJRCApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgTWVzc2FnZSA9PiAnTm8gV29ya09yZGVySUQgaXMgZ2l2ZW4hJywKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCB3b3Jrb3JkZXIgZGF0YQogICAgbXkgJFdvcmtPcmRlciA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+V29ya09yZGVyR2V0KAogICAgICAgIFdvcmtPcmRlcklEID0+ICRXb3JrT3JkZXJJRCwKICAgICAgICBVc2VySUQgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgZXJyb3IKICAgIGlmICggISRXb3JrT3JkZXIgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIldvcmtPcmRlciAnJFdvcmtPcmRlcklEJyBub3QgZm91bmQgaW4gZGF0YWJhc2UhIiwKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGNoZWNrIHBlcm1pc3Npb25zCiAgICBteSAkQWNjZXNzID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5QZXJtaXNzaW9uKAogICAgICAgIFR5cGUgICAgID0+ICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259LAogICAgICAgIENoYW5nZUlEID0+ICRXb3JrT3JkZXItPntDaGFuZ2VJRH0sCiAgICAgICAgVXNlcklEICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICAjIGVycm9yIHNjcmVlbgogICAgaWYgKCAhJEFjY2VzcyApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Ob1Blcm1pc3Npb24oCiAgICAgICAgICAgIE1lc3NhZ2UgICAgPT4gIllvdSBuZWVkICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259IHBlcm1pc3Npb25zIG9uIHRoZSBjaGFuZ2UhIiwKICAgICAgICAgICAgV2l0aEhlYWRlciA9PiAneWVzJywKICAgICAgICApOwogICAgfQoKICAgICMgc3RvcmUgbmVlZGVkIHBhcmFtZXRlcnMgaW4gJUdldFBhcmFtIHRvIG1ha2UgaXQgcmVsb2FkYWJsZQogICAgIyBFeHBhbmRVc2VyTmFtZTE6IGZpbmQgb3V0IHdoZXRoZXIgJ1NlYXJjaCBVc2VyJyB3YXMgY2xpY2tlZAogICAgIyBFeHBhbmRVc2VyTmFtZTI6IGZpbmQgb3V0IHdoZXRoZXIgJ1Rha2UgdGhpcyBVc2VyJyB3YXMgY2xpY2tlZAogICAgIyBDbGVhclVzZXI6IGZpbmQgb3V0IHdoZXRoZXIgJ0NsZWFyIFVzZXInIHdhcyBjbGlja2VkCiAgICBteSAlR2V0UGFyYW07CiAgICBmb3IgbXkgJFBhcmFtTmFtZSAocXcoVXNlciBFeHBhbmRVc2VyTmFtZTEgRXhwYW5kVXNlck5hbWUyIFNlbGVjdGVkVXNlciBDbGVhclVzZXIpKSB7CiAgICAgICAgJEdldFBhcmFteyRQYXJhbU5hbWV9ID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAkUGFyYW1OYW1lICk7CiAgICB9CgogICAgIyAkRG9Ob3RTYXZlIGltcGxpZXMgdGhhdCB0aGUgdXNlciBzaG91bGQgbm90IGJlIHNhdmVkIGFzIHdvcmtvcmRlciBhZ2VudAogICAgbXkgJERvTm90U2F2ZSA9ICRHZXRQYXJhbXtFeHBhbmRVc2VyTmFtZTF9CiAgICAgICAgfHwgJEdldFBhcmFte0V4cGFuZFVzZXJOYW1lMn0KICAgICAgICB8fCAkR2V0UGFyYW17Q2xlYXJVc2VyfQogICAgICAgIHx8IDA7CgogICAgIyBoYW5kbGUgdGhlICdTYXZlJyBzdWJhY3Rpb24KICAgIGlmICggJFNlbGYtPntTdWJhY3Rpb259IGVxICdTYXZlJyApIHsKCiAgICAgICAgIyB3b3Jrb3JkZXIgYWdlbnQgaXMgZW1wdHkgYW5kIG5vIGJ1dHRvbiBidXQgdGhlICdTYXZlJyBidXR0b24gaXMgY2xpY2tlZAogICAgICAgIGlmICggISRHZXRQYXJhbXtVc2VyfSAmJiAhJERvTm90U2F2ZSApIHsKCiAgICAgICAgICAgICMgc2V0dGluZyB3b3Jrb3JkZXIgYWdlbnQgdG8gZW1wdHkKICAgICAgICAgICAgbXkgJENvdWxkVXBkYXRlV29ya09yZGVyID0gJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9LT5Xb3JrT3JkZXJVcGRhdGUoCiAgICAgICAgICAgICAgICBXb3JrT3JkZXJJRCAgICAgID0+ICRXb3JrT3JkZXItPntXb3JrT3JkZXJJRH0sCiAgICAgICAgICAgICAgICBXb3JrT3JkZXJBZ2VudElEID0+IHVuZGVmLAogICAgICAgICAgICAgICAgVXNlcklEICAgICAgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBpZiAoJENvdWxkVXBkYXRlV29ya09yZGVyKSB7CgogICAgICAgICAgICAgICAgIyByZWRpcmVjdCB0byB6b29tIG1hc2sKICAgICAgICAgICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPlJlZGlyZWN0KAogICAgICAgICAgICAgICAgICAgIE9QID0+ICRTZWxmLT57TGFzdFdvcmtPcmRlclZpZXd9LAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKCiAgICAgICAgICAgICAgICAjIHNob3cgZXJyb3IgbWVzc2FnZQogICAgICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZSA9PgogICAgICAgICAgICAgICAgICAgICAgICAiV2FzIG5vdCBhYmxlIHRvIHNldCB0aGUgd29ya29yZGVyIGFnZW50IG9mIHRoZSB3b3Jrb3JkZXIgJyRXb3JrT3JkZXItPntXb3JrT3JkZXJJRH0nIHRvIGVtcHR5ISIsCiAgICAgICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGlmIGEgd29ya29yZGVyIGFnZW50IGlzIHNlbGVjdGVkIGFuZCBubyBidXR0b24gYnV0IHRoZSAnU2F2ZScgYnV0dG9uIGlzIGNsaWNrZWQKICAgICAgICBlbHNpZiAoICRHZXRQYXJhbXtTZWxlY3RlZFVzZXJ9ICYmICEkRG9Ob3RTYXZlICkgewoKICAgICAgICAgICAgIyB3b3Jrb3JkZXIgYWdlbnQgaXMgcmVxdWlyZWQgZm9yIGFuIHVwZGF0ZQogICAgICAgICAgICBteSAlRXJyb3JBbGxSZXF1aXJlZCA9ICRTZWxmLT5fQ2hlY2tXb3JrT3JkZXJBZ2VudCglR2V0UGFyYW0pOwoKICAgICAgICAgICAgIyBpZiBldmVyeXRoaW5nIGlzIGZpbmUKICAgICAgICAgICAgaWYgKCAhJUVycm9yQWxsUmVxdWlyZWQgKSB7CgogICAgICAgICAgICAgICAgbXkgJENvdWxkVXBkYXRlV29ya09yZGVyID0gJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9LT5Xb3JrT3JkZXJVcGRhdGUoCiAgICAgICAgICAgICAgICAgICAgV29ya09yZGVySUQgICAgICA9PiAkV29ya09yZGVyLT57V29ya09yZGVySUR9LAogICAgICAgICAgICAgICAgICAgIFdvcmtPcmRlckFnZW50SUQgPT4gJEdldFBhcmFte1NlbGVjdGVkVXNlcn0sCiAgICAgICAgICAgICAgICAgICAgVXNlcklEICAgICAgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIGlmICgkQ291bGRVcGRhdGVXb3JrT3JkZXIpIHsKCiAgICAgICAgICAgICAgICAgICAgIyByZWRpcmVjdCB0byB6b29tIG1hc2sKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5SZWRpcmVjdCgKICAgICAgICAgICAgICAgICAgICAgICAgT1AgPT4gIkFjdGlvbj1BZ2VudElUU01Xb3JrT3JkZXJab29tJldvcmtPcmRlcklEPSRXb3JrT3JkZXItPntXb3JrT3JkZXJJRH0iLAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgIyBzaG93IGVycm9yIG1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZSA9PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIldhcyBub3QgYWJsZSB0byB1cGRhdGUgdGhlIHdvcmtvcmRlciAnJFdvcmtPcmRlci0+e1dvcmtPcmRlcklEfSchIiwKICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICggJEVycm9yQWxsUmVxdWlyZWR7VXNlcn0gKSB7CiAgICAgICAgICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSA9PiAnSW52YWxpZFVzZXInLAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzaWYgKCAhJEdldFBhcmFte1NlbGVjdGVkVXNlcn0gJiYgISREb05vdFNhdmUgKSB7CgogICAgICAgICAgICAjIGlmIG5vIHVzZXIgaXMgZ2l2ZW4gYW5kIGl0IGlzIGNsaWNrZWQgJ1NhdmUnCiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgICAgICBOYW1lID0+ICdJbnZhbGlkVXNlcicsCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAjIG9uZSBvZiB0aGUgYnV0dG9ucyAndGFrZSB0aGlzIHVzZXInLCAnc2VhcmNoIHVzZXInLCAnY2xlYXIgdXNlcicgaXMgY2xpY2tlZAogICAgICAgIGVsc2lmICgkRG9Ob3RTYXZlKSB7CgogICAgICAgICAgICAjIGlmICdzZWFyY2ggdXNlcicgaXMgY2xpY2tlZAogICAgICAgICAgICBpZiAoICRHZXRQYXJhbXtFeHBhbmRVc2VyTmFtZTF9ICkgewoKICAgICAgICAgICAgICAgICMgc2VhcmNoIGFnZW50cwogICAgICAgICAgICAgICAgbXkgJFNlYXJjaCA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ1VzZXInICkgLiAnKic7CiAgICAgICAgICAgICAgICBteSAlVXNlckZvdW5kID0gJFNlbGYtPntVc2VyT2JqZWN0fS0+VXNlclNlYXJjaCgKICAgICAgICAgICAgICAgICAgICBTZWFyY2ggPT4gJFNlYXJjaCwKICAgICAgICAgICAgICAgICAgICBWYWxpZCAgPT4gMSwKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgIyBVc2VyU2VhcmNoKCkgcmV0dXJucyB2YWx1ZXMgd2l0aCBhIHRyYWlsaW5nIHNwYWNlLCBnZXQgcmlkIG9mIGl0CiAgICAgICAgICAgICAgICBmb3IgbXkgJE5hbWUgKCB2YWx1ZXMgJVVzZXJGb3VuZCApIHsKICAgICAgICAgICAgICAgICAgICAkTmFtZSA9fiBzeyBccysgXHogfXt9eG1zOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgZ2V0IGdyb3VwIG9mIGdyb3VwIGl0c20tY2hhbmdlCiAgICAgICAgICAgICAgICBteSAkR3JvdXBJRCA9ICRTZWxmLT57R3JvdXBPYmplY3R9LT5Hcm91cExvb2t1cCgKICAgICAgICAgICAgICAgICAgICBHcm91cCA9PiAnaXRzbS1jaGFuZ2UnLAogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICAjIGdldCBtZW1iZXJzIG9mIGdyb3VwCiAgICAgICAgICAgICAgICBteSAlSVRTTUNoYW5nZVVzZXJzID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICAgICAgICAgICAgICBHcm91cElEID0+ICRHcm91cElELAogICAgICAgICAgICAgICAgICAgIFR5cGUgICAgPT4gJ3JvJywKICAgICAgICAgICAgICAgICAgICBSZXN1bHQgID0+ICdIQVNIJywKICAgICAgICAgICAgICAgICAgICBDYWNoZWQgID0+IDEsCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgICMgZmlsdGVyIHRoZSBpdHNtLWNoYW5nZSB1c2VycyBpbiBmb3VuZCB1c2VycwogICAgICAgICAgICAgICAgbXkgJUZpbHRlcmVkVXNlckxpc3Q7CiAgICAgICAgICAgICAgICBDSEFOR0VVU0VSSUQ6CiAgICAgICAgICAgICAgICBmb3IgbXkgJENoYW5nZVVzZXJJRCAoIGtleXMgJUlUU01DaGFuZ2VVc2VycyApIHsKICAgICAgICAgICAgICAgICAgICBuZXh0IENIQU5HRVVTRVJJRCBpZiAhJFVzZXJGb3VuZHskQ2hhbmdlVXNlcklEfTsKCiAgICAgICAgICAgICAgICAgICAgJEZpbHRlcmVkVXNlckxpc3R7JENoYW5nZVVzZXJJRH0gPSAkVXNlckZvdW5keyRDaGFuZ2VVc2VySUR9OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgY2hlY2sgaWYganVzdCBvbmUgY3VzdG9tZXIgdXNlciBleGlzdHMKICAgICAgICAgICAgICAgICMgaWYganVzdCBvbmUsIGZpbGx1cCBDdXN0b21lclVzZXJJRCBhbmQgQ3VzdG9tZXJJRAogICAgICAgICAgICAgICAgbXkgQEtleXNVc2VyTGlzdCA9IGtleXMgJUZpbHRlcmVkVXNlckxpc3Q7CiAgICAgICAgICAgICAgICBpZiAoIHNjYWxhciBAS2V5c1VzZXJMaXN0ID09IDEgKSB7CiAgICAgICAgICAgICAgICAgICAgJFBhcmFte1VzZXJ9ID0gJEZpbHRlcmVkVXNlckxpc3R7ICRLZXlzVXNlckxpc3RbMF0gfTsKCiAgICAgICAgICAgICAgICAgICAgbXkgJVVzZXJEYXRhID0gJFNlbGYtPntVc2VyT2JqZWN0fS0+R2V0VXNlckRhdGEoCiAgICAgICAgICAgICAgICAgICAgICAgIFVzZXJJRCA9PiAkS2V5c1VzZXJMaXN0WzBdLAogICAgICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgICAgIGlmICggJFVzZXJEYXRhe1VzZXJJRH0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRQYXJhbXtVc2VySUR9ID0gJFVzZXJEYXRhe1VzZXJJRH07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgaWYgbW9yZSB0aGUgb25lIHVzZXIgZXhpc3RzLCBzaG93IGxpc3QKICAgICAgICAgICAgICAgICMgYW5kIGNsZWFuIFVzZXJJRAogICAgICAgICAgICAgICAgZWxzZSB7CgogICAgICAgICAgICAgICAgICAgICRQYXJhbXtVc2VySUR9ID0gJyc7CgogICAgICAgICAgICAgICAgICAgICRQYXJhbXtVc2VyU3RyZ30gPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJ1aWxkU2VsZWN0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICdVc2VySUQnLAogICAgICAgICAgICAgICAgICAgICAgICBEYXRhID0+IFwlRmlsdGVyZWRVc2VyTGlzdCwKICAgICAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICdUYWtlVXNlcicsCiAgICAgICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICAgICAgIyBjbGVhciB0byBpZiB0aGVyZSBpcyBubyBjdXN0b21lciBmb3VuZAogICAgICAgICAgICAgICAgICAgIGlmICggISVGaWx0ZXJlZFVzZXJMaXN0ICkgewogICAgICAgICAgICAgICAgICAgICAgICAkUGFyYW17VXNlcn0gICA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAkUGFyYW17VXNlcklEfSA9ICcnOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyAndGFrZSB0aGlzIHVzZXInIGJ1dHRvbiBpcyBjbGlja2VkCiAgICAgICAgICAgIGVsc2lmICggJEdldFBhcmFte0V4cGFuZFVzZXJOYW1lMn0gKSB7CgogICAgICAgICAgICAgICAgIyBzaG93IHVzZXIgZGF0YQogICAgICAgICAgICAgICAgbXkgJFVzZXJJRCA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ1VzZXJJRCcgKTsKICAgICAgICAgICAgICAgIG15ICVVc2VyRGF0YSA9ICRTZWxmLT57VXNlck9iamVjdH0tPkdldFVzZXJEYXRhKAogICAgICAgICAgICAgICAgICAgIFVzZXJJRCA9PiAkVXNlcklELAogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICAjIGFuIGFwcHJvcHJpYXRlIHVzZXIgaXMgZm91bmQgZmlsbCB0aGUgdGV4dGZpZWxkCiAgICAgICAgICAgICAgICBpZiAoJVVzZXJEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgJFBhcmFte1VzZXJJRH0gPSAkVXNlcklEOwogICAgICAgICAgICAgICAgICAgICRQYXJhbXtVc2VyfSAgID0gc3ByaW50ZiAnIiVzICVzIiA8JXM+JywKICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJEYXRhe1VzZXJGaXJzdG5hbWV9LAogICAgICAgICAgICAgICAgICAgICAgICAkVXNlckRhdGF7VXNlckxhc3RuYW1lfSwKICAgICAgICAgICAgICAgICAgICAgICAgJFVzZXJEYXRhe1VzZXJFbWFpbH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgIyBzaG93IGN1cnJlbnQgd29ya29yZGVyIGFnZW50CiAgICBpZiAoICEkRG9Ob3RTYXZlICYmICRXb3JrT3JkZXItPntXb3JrT3JkZXJBZ2VudElEfSApIHsKICAgICAgICBteSAlVXNlckRhdGEgPSAkU2VsZi0+e1VzZXJPYmplY3R9LT5HZXRVc2VyRGF0YSgKICAgICAgICAgICAgVXNlcklEID0+ICRXb3JrT3JkZXItPntXb3JrT3JkZXJBZ2VudElEfSwKICAgICAgICApOwoKICAgICAgICAkUGFyYW17VXNlcklEfSA9ICRVc2VyRGF0YXtVc2VySUR9OwogICAgICAgICRQYXJhbXtVc2VyfSAgID0gc3ByaW50ZiAnIiVzICVzIiA8JXM+JywKICAgICAgICAgICAgJFVzZXJEYXRhe1VzZXJGaXJzdG5hbWV9LAogICAgICAgICAgICAkVXNlckRhdGF7VXNlckxhc3RuYW1lfSwKICAgICAgICAgICAgJFVzZXJEYXRhe1VzZXJFbWFpbH07CiAgICB9CgogICAgIyBnZXQgY2hhbmdlIHRoYXQgd29ya29yZGVyIGJlbG9uZ3MgdG8KICAgIG15ICRDaGFuZ2UgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUdldCgKICAgICAgICBDaGFuZ2VJRCA9PiAkV29ya09yZGVyLT57Q2hhbmdlSUR9LAogICAgICAgIFVzZXJJRCAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICk7CgogICAgIyBjaGVjayB3aGV0aGVyIGNoYW5nZSB3YXMgZm91bmQKICAgIGlmICggISRDaGFuZ2UgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIkNvdWxkIG5vdCBmaW5kIENoYW5nZSBmb3IgV29ya09yZGVyICRXb3JrT3JkZXJJRCEiLAogICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICApOwogICAgfQoKICAgICMgYnVpbGQgdXNlciBzZWFyY2ggYXV0b2NvbXBsZXRlIGZpZWxkCiAgICBteSAkQXV0b0NvbXBsZXRlQ29uZmlnCiAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnSVRTTUNoYW5nZTo6RnJvbnRlbmQ6OlVzZXJTZWFyY2hBdXRvQ29tcGxldGUnKTsKCiAgICAjIGlmIGF1dG9jb21wbGV0aW9uIGlzIHR1cm5lZCBvbgogICAgaWYgKCAkQXV0b0NvbXBsZXRlQ29uZmlnLT57QWN0aXZlfSApIHsKCiAgICAgICAgIyBzaG93IGphdmFzY3JpcHQgcGFydHMgZm9yIGF1dG9jb21wbGV0aW9uCiAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnVXNlclNlYXJjaEF1dG9Db21wbGV0ZScsCiAgICAgICAgKTsKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdVc2VyU2VhcmNoQXV0b0NvbXBsZXRlQ29kZScsCiAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgbWluUXVlcnlMZW5ndGggICAgICA9PiAkQXV0b0NvbXBsZXRlQ29uZmlnLT57TWluUXVlcnlMZW5ndGh9ICAgICAgfHwgMiwKICAgICAgICAgICAgICAgIHF1ZXJ5RGVsYXkgICAgICAgICAgPT4gJEF1dG9Db21wbGV0ZUNvbmZpZy0+e1F1ZXJ5RGVsYXl9ICAgICAgICAgIHx8IDAuMSwKICAgICAgICAgICAgICAgIHR5cGVBaGVhZCAgICAgICAgICAgPT4gJEF1dG9Db21wbGV0ZUNvbmZpZy0+e1R5cGVBaGVhZH0gICAgICAgICAgIHx8ICdmYWxzZScsCiAgICAgICAgICAgICAgICBtYXhSZXN1bHRzRGlzcGxheWVkID0+ICRBdXRvQ29tcGxldGVDb25maWctPntNYXhSZXN1bHRzRGlzcGxheWVkfSB8fCAyMCwKICAgICAgICAgICAgfSwKICAgICAgICApOwogICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgIE5hbWUgPT4gJ1VzZXJTZWFyY2hBdXRvQ29tcGxldGVSZXR1cm5FbGVtZW50cycsCiAgICAgICAgICAgIERhdGEgPT4ge30sCiAgICAgICAgKTsKCiAgICAgICAgIyBzaG93IGh0bWwgcGFydCBmb3IgYXV0b2NvbXBsZXRpb24KICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdVc2VyU2VhcmNoQXV0b0NvbXBsZXRlRGl2U3RhcnQnLAogICAgICAgICk7CiAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnVXNlclNlYXJjaEF1dG9Db21wbGV0ZURpdkVuZCcsCiAgICAgICAgKTsKICAgIH0KICAgIGVsc2UgewoKICAgICAgICAjIHNob3cgYnV0dG9ucyB3aGVuIGF1dG9jb21wbGV0aW9uIGlzIHR1cm5lZCBvZmYKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdTZWFyY2hVc2VyQnV0dG9uJywKICAgICAgICApOwogICAgfQoKICAgICMgb3V0cHV0IGhlYWRlcgogICAgbXkgJE91dHB1dCA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+SGVhZGVyKAogICAgICAgIFRpdGxlID0+ICRXb3JrT3JkZXItPntXb3JrT3JkZXJUaXRsZX0sCiAgICApOwogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk5hdmlnYXRpb25CYXIoKTsKCiAgICAjIHN0YXJ0IHRlbXBsYXRlIG91dHB1dAogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50SVRTTVdvcmtPcmRlckFnZW50JywKICAgICAgICBEYXRhICAgICAgICAgPT4gewogICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICV7JENoYW5nZX0sCiAgICAgICAgICAgICV7JFdvcmtPcmRlcn0sCiAgICAgICAgfSwKICAgICk7CgogICAgIyBhZGQgZm9vdGVyCiAgICAkT3V0cHV0IC49ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+Rm9vdGVyKCk7CgogICAgcmV0dXJuICRPdXRwdXQ7Cn0KCnN1YiBfQ2hlY2tXb3JrT3JkZXJBZ2VudCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgaGFzaCBmb3IgZXJyb3IgaW5mbwogICAgbXkgJUVycm9yczsKCiAgICAjIGNoZWNrIHdvcmtvcmRlciBhZ2VudAogICAgaWYgKCAhJFBhcmFte1VzZXJ9IHx8ICEkUGFyYW17U2VsZWN0ZWRVc2VyfSApIHsKICAgICAgICAkRXJyb3Jze1VzZXJ9ID0gMTsKICAgIH0KICAgIGVsc2UgewoKICAgICAgICAjIGdldCB3b3Jrb3JkZXIgYWdlbnQgZGF0YQogICAgICAgIG15ICVVc2VyID0gJFNlbGYtPntVc2VyT2JqZWN0fS0+R2V0VXNlckRhdGEoCiAgICAgICAgICAgIFVzZXJJRCA9PiAkUGFyYW17U2VsZWN0ZWRVc2VyfSwKICAgICAgICApOwoKICAgICAgICAjIHNob3cgZXJyb3IgaWYgdXNlciBub3QgZXhpc3RzCiAgICAgICAgaWYgKCAhJVVzZXIgKSB7CiAgICAgICAgICAgICRFcnJvcnN7VXNlcn0gPSAxOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKCiAgICAgICAgICAgICMgY29tcGFyZSBpbnB1dCB2YWx1ZSB3aXRoIHVzZXIgZGF0YQogICAgICAgICAgICBteSAkQ2hlY2tTdHJpbmcgPSBzcHJpbnRmICciJXMgJXMiIDwlcz4nLAogICAgICAgICAgICAgICAgJFVzZXJ7VXNlckZpcnN0bmFtZX0sCiAgICAgICAgICAgICAgICAkVXNlcntVc2VyTGFzdG5hbWV9LAogICAgICAgICAgICAgICAgJFVzZXJ7VXNlckVtYWlsfTsKCiAgICAgICAgICAgICMgc2hvdyBlcnJvcgogICAgICAgICAgICBpZiAoICRDaGVja1N0cmluZyBuZSAkUGFyYW17VXNlcn0gKSB7CiAgICAgICAgICAgICAgICAkRXJyb3Jze1VzZXJ9ID0gMTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJUVycm9ycwp9CgoxOwo=</File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderDelete.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTVdvcmtPcmRlckRlbGV0ZS5wbSAtIHRoZSBPVFJTOjpJVFNNOjpDaGFuZ2VNYW5hZ2VtZW50IHdvcmtvcmRlciBkZWxldGUgbW9kdWxlCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBBZ2VudElUU01Xb3JrT3JkZXJEZWxldGUucG0sdiAxLjEwIDIwMTAvMDIvMDIgMTQ6NTE6NDIgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRJVFNNV29ya09yZGVyRGVsZXRlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOwp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI7CnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTUNvbmRpdGlvbjsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuMTAgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAoCiAgICAgICAgcXcoUGFyYW1PYmplY3QgREJPYmplY3QgTGF5b3V0T2JqZWN0IExvZ09iamVjdCBDb25maWdPYmplY3QpCiAgICAgICAgKQogICAgewogICAgICAgIGlmICggISRTZWxmLT57JE9iamVjdH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RmF0YWxFcnJvciggTWVzc2FnZSA9PiAiR290IG5vICRPYmplY3QhIiApOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNyZWF0ZSBhZGRpdGlvbmFsIG9iamVjdHMKICAgICRTZWxmLT57Q2hhbmdlT2JqZWN0fSAgICA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoJVBhcmFtKTsKICAgICRTZWxmLT57V29ya09yZGVyT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyLT5uZXcoJVBhcmFtKTsKICAgICRTZWxmLT57Q29uZGl0aW9uT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNQ29uZGl0aW9uLT5uZXcoJVBhcmFtKTsKCiAgICAjIGdldCBjb25maWcgb2YgZnJvbnRlbmQgbW9kdWxlCiAgICAkU2VsZi0+e0NvbmZpZ30gPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTVdvcmtPcmRlcjo6RnJvbnRlbmQ6OiRTZWxmLT57QWN0aW9ufSIpOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IG5lZWRlZCBXb3JrT3JkZXJJRAogICAgbXkgJFdvcmtPcmRlcklEID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnV29ya09yZGVySUQnICk7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRXb3JrT3JkZXJJRCApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgTWVzc2FnZSA9PiAnTm8gV29ya09yZGVySUQgaXMgZ2l2ZW4hJywKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCB3b3Jrb3JkZXIgZGF0YQogICAgbXkgJFdvcmtPcmRlciA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+V29ya09yZGVyR2V0KAogICAgICAgIFdvcmtPcmRlcklEID0+ICRXb3JrT3JkZXJJRCwKICAgICAgICBVc2VySUQgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgZXJyb3IKICAgIGlmICggISRXb3JrT3JkZXIgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIldvcmtPcmRlciAnJFdvcmtPcmRlcklEJyBub3QgZm91bmQgaW4gZGF0YWJhc2UhIiwKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGNoZWNrIHBlcm1pc3Npb25zCiAgICBteSAkQWNjZXNzID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5QZXJtaXNzaW9uKAogICAgICAgIFR5cGUgICAgID0+ICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259LAogICAgICAgIENoYW5nZUlEID0+ICRXb3JrT3JkZXItPntDaGFuZ2VJRH0sCiAgICAgICAgVXNlcklEICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICAjIGVycm9yIHNjcmVlbiwgZG9uJ3Qgc2hvdyB3b3Jrb3JkZXIgZGVsZXRlIG1hc2sKICAgIGlmICggISRBY2Nlc3MgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+Tm9QZXJtaXNzaW9uKAogICAgICAgICAgICBNZXNzYWdlICAgID0+ICJZb3UgbmVlZCAkU2VsZi0+e0NvbmZpZ30tPntQZXJtaXNzaW9ufSBwZXJtaXNzaW9ucyBvbiB0aGUgY2hhbmdlISIsCiAgICAgICAgICAgIFdpdGhIZWFkZXIgPT4gJ3llcycsCiAgICAgICAgKTsKICAgIH0KCiAgICBpZiAoICRTZWxmLT57U3ViYWN0aW9ufSBlcSAnV29ya09yZGVyRGVsZXRlJyApIHsKCiAgICAgICAgIyBkZWxldGUgdGhlIHdvcmtvcmRlcgogICAgICAgIG15ICRDb3VsZERlbGV0ZVdvcmtPcmRlciA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+V29ya09yZGVyRGVsZXRlKAogICAgICAgICAgICBXb3JrT3JkZXJJRCA9PiAkV29ya09yZGVyLT57V29ya09yZGVySUR9LAogICAgICAgICAgICBVc2VySUQgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgKTsKCiAgICAgICAgaWYgKCRDb3VsZERlbGV0ZVdvcmtPcmRlcikgewoKICAgICAgICAgICAgIyByZWRpcmVjdCB0byBjaGFuZ2UsIHdoZW4gdGhlIGRlbGV0aW9uIHdhcyBzdWNjZXNzZnVsCiAgICAgICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPlJlZGlyZWN0KAogICAgICAgICAgICAgICAgT1AgPT4gIkFjdGlvbj1BZ2VudElUU01DaGFuZ2Vab29tJkNoYW5nZUlEPSRXb3JrT3JkZXItPntDaGFuZ2VJRH0iLAogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKCiAgICAgICAgICAgICMgc2hvdyBlcnJvciBtZXNzYWdlLCB3aGVuIGRlbGV0ZSBmYWlsZWQKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgICAgICBNZXNzYWdlID0+ICJXYXMgbm90IGFibGUgdG8gZGVsZXRlIHRoZSB3b3Jrb3JkZXIgJFdvcmtPcmRlci0+e1dvcmtPcmRlcklEfSEiLAogICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQoKICAgICMgZ2V0IGNoYW5nZSB0aGF0IHdvcmtvcmRlciBiZWxvbmdzIHRvCiAgICBteSAkQ2hhbmdlID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5DaGFuZ2VHZXQoCiAgICAgICAgQ2hhbmdlSUQgPT4gJFdvcmtPcmRlci0+e0NoYW5nZUlEfSwKICAgICAgICBVc2VySUQgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgaWYgY2hhbmdlIGlzIGZvdW5kCiAgICBpZiAoICEkQ2hhbmdlICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICBNZXNzYWdlID0+ICJDb3VsZCBub3QgZmluZCBDaGFuZ2UgZm9yIFdvcmtPcmRlciAkV29ya09yZGVySUQhIiwKICAgICAgICAgICAgQ29tbWVudCA9PiAnUGxlYXNlIGNvbnRhY3QgdGhlIGFkbWluLicsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIG91dHB1dCBoZWFkZXIKICAgIG15ICRPdXRwdXQgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkhlYWRlcigKICAgICAgICBUaXRsZSA9PiAnRGVsZXRlJywKICAgICk7CiAgICAkT3V0cHV0IC49ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+TmF2aWdhdGlvbkJhcigpOwoKICAgICMgZ2V0IGFmZmVjdGVkIGNvbmRpdGlvbiBpZHMKICAgIG15ICRBZmZlY3RlZENvbmRpdGlvbklEcyA9ICRTZWxmLT57Q29uZGl0aW9uT2JqZWN0fS0+Q29uZGl0aW9uTGlzdEJ5T2JqZWN0VHlwZSgKICAgICAgICBPYmplY3RUeXBlID0+ICdJVFNNV29ya09yZGVyJywKICAgICAgICBTZWxlY3RvciAgID0+ICRXb3JrT3JkZXItPntXb3JrT3JkZXJJRH0sCiAgICAgICAgQ2hhbmdlSUQgICA9PiAkV29ya09yZGVyLT57Q2hhbmdlSUR9LAogICAgICAgIFVzZXJJRCAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKSB8fCBbXTsKCiAgICAjIGRpc3BsYXkgbGlzdCBvZiBhZmZlY3RlZCBjb25kaXRpb25zCiAgICBpZiAoIEB7JEFmZmVjdGVkQ29uZGl0aW9uSURzfSApIHsKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdXb3JrT3JkZXJJbkNvbmRpdGlvbicsCiAgICAgICAgICAgIERhdGEgPT4ge30sCiAgICAgICAgKTsKCiAgICAgICAgQ09ORElUSU9OSUQ6CiAgICAgICAgZm9yIG15ICRDb25kaXRpb25JRCAoIEB7JEFmZmVjdGVkQ29uZGl0aW9uSURzfSApIHsKCiAgICAgICAgICAgICMgZ2V0IGNvbmRpdGlvbgogICAgICAgICAgICBteSAkQ29uZGl0aW9uID0gJFNlbGYtPntDb25kaXRpb25PYmplY3R9LT5Db25kaXRpb25HZXQoCiAgICAgICAgICAgICAgICBDb25kaXRpb25JRCA9PiAkQ29uZGl0aW9uSUQsCiAgICAgICAgICAgICAgICBVc2VySUQgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgICk7CgogICAgICAgICAgICAjIGNoZWNrIGNvbmRpdGlvbgogICAgICAgICAgICBuZXh0IENPTkRJVElPTklEIGlmICEkQ29uZGl0aW9uOwoKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1dvcmtPcmRlckluQ29uZGl0aW9uUm93JywKICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgICV7JENvbmRpdGlvbn0sCiAgICAgICAgICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdOb1dvcmtPcmRlckluQ29uZGl0aW9uJywKICAgICAgICAgICAgRGF0YSA9PiAkV29ya09yZGVyLAogICAgICAgICk7CiAgICB9CgogICAgIyBzdGFydCB0ZW1wbGF0ZSBvdXRwdXQKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZ2VudElUU01Xb3JrT3JkZXJEZWxldGUnLAogICAgICAgIERhdGEgICAgICAgICA9PiB7CiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgJXskQ2hhbmdlfSwKICAgICAgICAgICAgJXskV29ya09yZGVyfSwKICAgICAgICB9LAogICAgKTsKCiAgICAjIGFkZCBmb290ZXIKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Gb290ZXIoKTsKCiAgICByZXR1cm4gJE91dHB1dDsKfQoKMTsK</File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderEdit.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderHistory.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderHistoryZoom.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTVdvcmtPcmRlckhpc3Rvcnlab29tLnBtIC0gdGhlIE9UUlM6OklUU006OkNoYW5nZU1hbmFnZW1lbnQgd29ya29yZGVyIGhpc3Rvcnkgem9vbSBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTVdvcmtPcmRlckhpc3Rvcnlab29tLnBtLHYgMS43IDIwMTAvMDEvMjggMTM6NDU6MzUgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRJVFNNV29ya09yZGVySGlzdG9yeVpvb207Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7CnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjsKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpIaXN0b3J5OwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS43ICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKHF3KFBhcmFtT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBMb2dPYmplY3QgQ29uZmlnT2JqZWN0KSkgewogICAgICAgIGlmICggISRTZWxmLT57JE9iamVjdH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RmF0YWxFcnJvciggTWVzc2FnZSA9PiAiR290IG5vICRPYmplY3QhIiApOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNyZWF0ZSBuZWVkZWQgb2JqZWN0cwogICAgJFNlbGYtPntDaGFuZ2VPYmplY3R9ICAgID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2UtPm5ldyglUGFyYW0pOwogICAgJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXItPm5ldyglUGFyYW0pOwogICAgJFNlbGYtPntIaXN0b3J5T2JqZWN0fSAgID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6Okhpc3RvcnktPm5ldyglUGFyYW0pOwoKICAgICMgZ2V0IGNvbmZpZyBvZiBmcm9udGVuZCBtb2R1bGUKICAgICRTZWxmLT57Q29uZmlnfSA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCJJVFNNV29ya09yZGVyOjpGcm9udGVuZDo6JFNlbGYtPntBY3Rpb259Iik7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBnZXQgbmVlZGVkIGNoYW5nZSBpZAogICAgbXkgJEhpc3RvcnlFbnRyeUlEID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnSGlzdG9yeUVudHJ5SUQnICk7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRIaXN0b3J5RW50cnlJRCApIHsKCiAgICAgICAgIyBlcnJvciBwYWdlCiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIkNhbid0IHNob3cgaGlzdG9yeSB6b29tLCBubyBIaXN0b3J5RW50cnlJRCBpcyBnaXZlbiEiLAogICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICApOwogICAgfQoKICAgICMgZ2V0IGhpc3RvcnkgZW50cmllcwogICAgbXkgJEhpc3RvcnlFbnRyeSA9ICRTZWxmLT57SGlzdG9yeU9iamVjdH0tPkhpc3RvcnlFbnRyeUdldCgKICAgICAgICBIaXN0b3J5RW50cnlJRCA9PiAkSGlzdG9yeUVudHJ5SUQsCiAgICAgICAgVXNlcklEICAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICBpZiAoICEkSGlzdG9yeUVudHJ5ICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICBNZXNzYWdlID0+ICJIaXN0b3J5RW50cnkgJyRIaXN0b3J5RW50cnlJRCcgbm90IGZvdW5kIGluIGRhdGFiYXNlISIsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBjaGVjayBwZXJtaXNzaW9ucwogICAgbXkgJEFjY2VzcyA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+UGVybWlzc2lvbigKICAgICAgICBUeXBlICAgICAgICA9PiAkU2VsZi0+e0NvbmZpZ30tPntQZXJtaXNzaW9ufSwKICAgICAgICBXb3JrT3JkZXJJRCA9PiAkSGlzdG9yeUVudHJ5LT57V29ya09yZGVySUR9LAogICAgICAgIFVzZXJJRCAgICAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICk7CgogICAgIyBlcnJvciBzY3JlZW4KICAgIGlmICggISRBY2Nlc3MgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+Tm9QZXJtaXNzaW9uKAogICAgICAgICAgICBNZXNzYWdlICAgID0+ICJZb3UgbmVlZCAkU2VsZi0+e0NvbmZpZ30tPntQZXJtaXNzaW9ufSBwZXJtaXNzaW9ucyEiLAogICAgICAgICAgICBXaXRoSGVhZGVyID0+ICd5ZXMnLAogICAgICAgICk7CiAgICB9CgogICAgIyBnZXQgd29ya29yZGVyIGluZm9ybWF0aW9uCiAgICBteSAkV29ya09yZGVyID0gJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9LT5Xb3JrT3JkZXJHZXQoCiAgICAgICAgV29ya09yZGVySUQgPT4gJEhpc3RvcnlFbnRyeS0+e1dvcmtPcmRlcklEfSwKICAgICAgICBVc2VySUQgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgZXJyb3IKICAgIGlmICggISRXb3JrT3JkZXIgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIldvcmtPcmRlciAnJEhpc3RvcnlFbnRyeS0+e1dvcmtPcmRlcklEfScgbm90IGZvdW5kIGluIGRhdGFiYXNlISIsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBnZXQgY2hhbmdlIGluZm9ybWF0aW9uCiAgICBteSAkQ2hhbmdlID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5DaGFuZ2VHZXQoCiAgICAgICAgQ2hhbmdlSUQgPT4gJEhpc3RvcnlFbnRyeS0+e0NoYW5nZUlEfSwKICAgICAgICBVc2VySUQgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgZXJyb3IKICAgIGlmICggISRXb3JrT3JkZXIgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIkNoYW5nZSAnJEhpc3RvcnlFbnRyeS0+e0NoYW5nZUlEfScgbm90IGZvdW5kIGluIGRhdGFiYXNlISIsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBzaG93IGRhc2ggKCctJykgd2hlbiB0aGUgZmllbGQgaXMgZW1wdHkKICAgIGZvciBteSAkRmllbGQgKHF3KENvbnRlbnROZXcgQ29udGVudE9sZCkpIHsKICAgICAgICAkSGlzdG9yeUVudHJ5LT57JEZpZWxkfSB8fD0gJy0nCiAgICB9CgogICAgIyBvdXRwdXQgaGVhZGVyCiAgICBteSAkT3V0cHV0ID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5IZWFkZXIoCiAgICAgICAgVGl0bGUgPT4gJ1dvcmtPcmRlckhpc3Rvcnlab29tJywKICAgICk7CiAgICAkT3V0cHV0IC49ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+TmF2aWdhdGlvbkJhcigpOwoKICAgICMgc3RhcnQgdGVtcGxhdGUgb3V0cHV0CiAgICAkT3V0cHV0IC49ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+T3V0cHV0KAogICAgICAgIFRlbXBsYXRlRmlsZSA9PiAnQWdlbnRJVFNNV29ya09yZGVySGlzdG9yeVpvb20nLAogICAgICAgIERhdGEgICAgICAgICA9PiB7CiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgJXskQ2hhbmdlfSwKICAgICAgICAgICAgJXskV29ya09yZGVyfSwKICAgICAgICAgICAgJXskSGlzdG9yeUVudHJ5fSwKICAgICAgICB9LAogICAgKTsKCiAgICAjIGFkZCBmb290ZXIKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Gb290ZXIoKTsKCiAgICByZXR1cm4gJE91dHB1dDsKfQoKMTsK</File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderReport.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderTake.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTVdvcmtPcmRlclRha2UucG0gLSB0aGUgT1RSUzo6SVRTTTo6Q2hhbmdlTWFuYWdlbWVudCB3b3Jrb3JkZXIgdGFrZSBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTVdvcmtPcmRlclRha2UucG0sdiAxLjUgMjAxMC8wMi8wMyAwMDowMDo1MiB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFnZW50SVRTTVdvcmtPcmRlclRha2U7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7CnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuNSAkKSBbMV07CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhQYXJhbU9iamVjdCBEQk9iamVjdCBMYXlvdXRPYmplY3QgTG9nT2JqZWN0IENvbmZpZ09iamVjdCBVc2VyT2JqZWN0KQogICAgICAgICkKICAgIHsKICAgICAgICBpZiAoICEkU2VsZi0+eyRPYmplY3R9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkZhdGFsRXJyb3IoIE1lc3NhZ2UgPT4gIkdvdCBubyAkT2JqZWN0ISIgKTsKICAgICAgICB9CiAgICB9CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gICAgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZS0+bmV3KCVQYXJhbSk7CiAgICAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlci0+bmV3KCVQYXJhbSk7CgogICAgIyBnZXQgY29uZmlnIG9mIGZyb250ZW5kIG1vZHVsZQogICAgJFNlbGYtPntDb25maWd9ID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoIklUU01Xb3JrT3JkZXI6OkZyb250ZW5kOjokU2VsZi0+e0FjdGlvbn0iKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGdldCBuZWVkZWQgV29ya09yZGVySUQKICAgIG15ICRXb3JrT3JkZXJJRCA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ1dvcmtPcmRlcklEJyApOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkV29ya09yZGVySUQgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ05vIFdvcmtPcmRlcklEIGlzIGdpdmVuIScsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBnZXQgd29ya29yZGVyIGRhdGEKICAgIG15ICRXb3JrT3JkZXIgPSAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0tPldvcmtPcmRlckdldCgKICAgICAgICBXb3JrT3JkZXJJRCA9PiAkV29ya09yZGVySUQsCiAgICAgICAgVXNlcklEICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICAjIGNoZWNrIGVycm9yCiAgICBpZiAoICEkV29ya09yZGVyICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICBNZXNzYWdlID0+ICJXb3JrT3JkZXIgJyRXb3JrT3JkZXJJRCcgbm90IGZvdW5kIGluIGRhdGFiYXNlISIsCiAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICk7CiAgICB9CgogICAgIyBjaGVjayBwZXJtaXNzaW9ucwogICAgIyBxdWVyeSB0aGUgcGVybWlzc2lvbiBtb2R1bGVzIHJlZ2lzdGVyZWQgaW4gJ0lUU01Xb3JrT3JkZXI6OlRha2VQZXJtaXNzaW9uJwogICAgbXkgJEFjY2VzcyA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+UGVybWlzc2lvbigKICAgICAgICBUeXBlICAgICAgICAgICAgICAgPT4gJFNlbGYtPntDb25maWd9LT57UGVybWlzc2lvbn0sCiAgICAgICAgUGVybWlzc2lvblJlZ2lzdHJ5ID0+ICdJVFNNV29ya09yZGVyOjpUYWtlUGVybWlzc2lvbicsCiAgICAgICAgV29ya09yZGVySUQgICAgICAgID0+ICRXb3JrT3JkZXJJRCwKICAgICAgICBVc2VySUQgICAgICAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgKTsKCiAgICAjIGVycm9yIHNjcmVlbgogICAgaWYgKCAhJEFjY2VzcyApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Ob1Blcm1pc3Npb24oCiAgICAgICAgICAgIE1lc3NhZ2UgICAgPT4gIllvdSBuZWVkICRTZWxmLT57Q29uZmlnfS0+e1Blcm1pc3Npb259IHBlcm1pc3Npb25zISIsCiAgICAgICAgICAgIFdpdGhIZWFkZXIgPT4gJ3llcycsCiAgICAgICAgKTsKICAgIH0KCiAgICBpZiAoICRTZWxmLT57U3ViYWN0aW9ufSBlcSAnV29ya09yZGVyVGFrZScgKSB7CgogICAgICAgICMgc2V0IHRoZSBjdXJyZW50IHVzZXIgYXMgdGhlIHdvcmtvcmRlciBhZ2VudAogICAgICAgIG15ICRDb3VsZFVwZGF0ZVdvcmtPcmRlciA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+V29ya09yZGVyVXBkYXRlKAogICAgICAgICAgICBXb3JrT3JkZXJJRCAgICAgID0+ICRXb3JrT3JkZXJJRCwKICAgICAgICAgICAgV29ya09yZGVyQWdlbnRJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgIFVzZXJJRCAgICAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICk7CgogICAgICAgIGlmICgkQ291bGRVcGRhdGVXb3JrT3JkZXIpIHsKCiAgICAgICAgICAgICMgcmVkaXJlY3QgdG8gd29ya29yZGVyLCB3aGVuIHRoZSB1cGRhdGUgd2FzIHN1Y2Nlc3NmdWwKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+UmVkaXJlY3QoCiAgICAgICAgICAgICAgICBPUCA9PiAkU2VsZi0+e0xhc3RXb3JrT3JkZXJWaWV3fSwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CgogICAgICAgICAgICAjIHNob3cgZXJyb3IgbWVzc2FnZQogICAgICAgICAgICByZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5FcnJvclNjcmVlbigKICAgICAgICAgICAgICAgIE1lc3NhZ2UgPT4gIldhcyBub3QgYWJsZSB0byB0YWtlIHRoZSB3b3Jrb3JkZXIgJyRXb3JrT3JkZXJJRCchIiwKICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ1BsZWFzZSBjb250YWN0IHRoZSBhZG1pbi4nLAogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KCiAgICAjIExvZ2luIG5hbWUgb2YgdGhlIGN1cnJlbnQgd29ya29yZGVyIGFnZW50CiAgICBteSAkV29ya09yZGVyQWdlbnQgPSAnLSc7CiAgICBpZiAoICRXb3JrT3JkZXItPntXb3JrT3JkZXJBZ2VudElEfSApIHsKICAgICAgICAkV29ya09yZGVyQWdlbnQgPSAkU2VsZi0+e1VzZXJPYmplY3R9LT5Vc2VyTG9va3VwKAogICAgICAgICAgICBVc2VySUQgPT4gJFdvcmtPcmRlci0+e1dvcmtPcmRlckFnZW50SUR9LAogICAgICAgICk7CiAgICB9CgogICAgIyBnZXQgY2hhbmdlIHRoYXQgd29ya29yZGVyIGJlbG9uZ3MgdG8KICAgIG15ICRDaGFuZ2UgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUdldCgKICAgICAgICBDaGFuZ2VJRCA9PiAkV29ya09yZGVyLT57Q2hhbmdlSUR9LAogICAgICAgIFVzZXJJRCAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICk7CgogICAgIyBjaGVjayBpZiBjaGFuZ2UgaXMgZm91bmQKICAgIGlmICggISRDaGFuZ2UgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIkNvdWxkIG5vdCBmaW5kIENoYW5nZSBmb3IgV29ya09yZGVyICRXb3JrT3JkZXJJRCEiLAogICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICApOwogICAgfQoKICAgICMgb3V0cHV0IGhlYWRlcgogICAgbXkgJE91dHB1dCA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+SGVhZGVyKAogICAgICAgIFRpdGxlID0+ICdUYWtlIFdvcmtvcmRlcicsCiAgICApOwogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk5hdmlnYXRpb25CYXIoKTsKCiAgICAjIHN0YXJ0IHRlbXBsYXRlIG91dHB1dAogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50SVRTTVdvcmtPcmRlclRha2UnLAogICAgICAgIERhdGEgICAgICAgICA9PiB7CiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgJXskQ2hhbmdlfSwKICAgICAgICAgICAgJXskV29ya09yZGVyfSwKICAgICAgICAgICAgV29ya09yZGVyQWdlbnQgPT4gJFdvcmtPcmRlckFnZW50LAogICAgICAgIH0sCiAgICApOwoKICAgICMgYWRkIGZvb3RlcgogICAgJE91dHB1dCAuPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkZvb3RlcigpOwoKICAgIHJldHVybiAkT3V0cHV0Owp9CgoxOwo=</File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderTemplate.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMWorkOrderZoom.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/CustomerITSMChangeSchedule.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMChangeMenuGeneric.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNQ2hhbmdlTWVudUdlbmVyaWMucG0KIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAwOSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IElUU01DaGFuZ2VNZW51R2VuZXJpYy5wbSx2IDEuNiAyMDA5LzExLzIzIDEzOjMwOjQzIGJlcyBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok91dHB1dDo6SFRNTDo6SVRTTUNoYW5nZU1lbnVHZW5lcmljOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS42ICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBDaGFuZ2VPYmplY3QgVXNlcklEKQogICAgICAgICkKICAgIHsKICAgICAgICAkU2VsZi0+eyRPYmplY3R9ID0gJFBhcmFteyRPYmplY3R9IHx8IGRpZSAiR290IG5vICRPYmplY3QhIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte0NoYW5nZX0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIENoYW5nZSEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgZ2V0IGNvbmZpZyBmb3IgdGhlIHJlbGV2YW50IGFjdGlvbgogICAgbXkgJEZyb250ZW5kQ29uZmlnCiAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTUNoYW5nZTo6RnJvbnRlbmQ6OiRQYXJhbXtDb25maWd9LT57QWN0aW9ufSIpOwoKICAgICMgZ2V0IHRoZSByZXF1aXJlZCBwcml2aWxlZ2UsICdybycgb3IgJ3J3JwogICAgbXkgJFJlcXVpcmVkUHJpdjsKICAgIGlmICggJEZyb250ZW5kQ29uZmlnICYmICRGcm9udGVuZENvbmZpZy0+e1Blcm1pc3Npb259ICkgewoKICAgICAgICAjIGdldCB0aGUgcmVxdWlyZWQgcHJpdiBmcm9tIHRoZSBmcm9udGVuZCBjb25maWd1cmF0aW9uCiAgICAgICAgJFJlcXVpcmVkUHJpdiA9ICRGcm9udGVuZENvbmZpZy0+e1Blcm1pc3Npb259OwogICAgfQogICAgZWxzaWYgKCAkUGFyYW17Q29uZmlnfS0+e0FjdGlvbn0gZXEgJ0FnZW50TGlua09iamVjdCcgKSB7CgogICAgICAgICMgdGhlIExpbmstbGluayBpcyBhIHNwZWNpYWwgY2FzZSwgYXMgaXQgaXMgbm90IHNwZWNpZmljIHRvIElUU01DaGFuZ2UKICAgICAgICAkUmVxdWlyZWRQcml2ID0gJ3J3JzsKICAgIH0KCiAgICBteSAkQWNjZXNzOwogICAgaWYgKCAhJFJlcXVpcmVkUHJpdiApIHsKCiAgICAgICAgIyBEaXNwbGF5IHRoZSBtZW51LWxpbmssIHdoZW4gbm8gcHJpdmlsZWdlIGlzIHJlcXVpcmVkCiAgICAgICAgJEFjY2VzcyA9IDE7CiAgICB9CiAgICBlbHNlIHsKCiAgICAgICAgIyBjaGVjayBwZXJtaXNzaW9ucywgYmFzZWQgb24gdGhlIHJlcXVpcmVkIHByaXZpbGVnZQogICAgICAgICRBY2Nlc3MgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPlBlcm1pc3Npb24oCiAgICAgICAgICAgIFR5cGUgICAgID0+ICRSZXF1aXJlZFByaXYsCiAgICAgICAgICAgIENoYW5nZUlEID0+ICRQYXJhbXtDaGFuZ2V9LT57Q2hhbmdlSUR9LAogICAgICAgICAgICBVc2VySUQgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgIExvZ05vICAgID0+IDEsCiAgICAgICAgKTsKICAgIH0KCiAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9IGlmICEkQWNjZXNzOwoKICAgICMgb3V0cHV0IG1lbnUgYmxvY2sKICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soIE5hbWUgPT4gJ01lbnUnICk7CgogICAgIyBvdXRwdXQgc2VwZXJhdG9yLCB3aGVuIHRoaXMgaXMgbm90IHRoZSBmaXJzdCBtZW51IGl0ZW0KICAgIGlmICggJFBhcmFte0NvdW50ZXJ9ICkgewogICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soIE5hbWUgPT4gJ01lbnVJdGVtU3BsaXQnICk7CiAgICB9CgogICAgIyBvdXRwdXQgbWVudSBpdGVtCiAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgIE5hbWUgPT4gJ01lbnVJdGVtJywKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAleyAkUGFyYW17Q2hhbmdlfSB9LAogICAgICAgICAgICAleyAkUGFyYW17Q29uZmlnfSB9LAogICAgICAgIH0sCiAgICApOwogICAgJFBhcmFte0NvdW50ZXJ9Kys7CgogICAgcmV0dXJuICRQYXJhbXtDb3VudGVyfTsKfQoKMTsK</File>
        <File Location="Kernel/Output/HTML/ITSMChangeMenuTimeSlot.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNQ2hhbmdlTWVudVRpbWVTbG90LnBtIC0gTWVudSBtb2R1bGUgd2l0aCBjaGVjawojIHdoZXRoZXIgdGhlcmUgYXJlIHdvcmtvcmRlcnMgYW5kIHdoZXRoZXIgdGhlIGNoYW5nZSBoYXMgbm90IHN0YXJ0ZWQgeWV0CiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMDkgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBJVFNNQ2hhbmdlTWVudVRpbWVTbG90LnBtLHYgMS4xIDIwMDkvMTIvMzAgMTM6NDk6MjMgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6T3V0cHV0OjpIVE1MOjpJVFNNQ2hhbmdlTWVudVRpbWVTbG90OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBDaGFuZ2VPYmplY3QgVXNlcklEKQogICAgICAgICkKICAgIHsKICAgICAgICAkU2VsZi0+eyRPYmplY3R9ID0gJFBhcmFteyRPYmplY3R9IHx8IGRpZSAiR290IG5vICRPYmplY3QhIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte0NoYW5nZX0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIENoYW5nZSEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgY2hlY2sgd2hldGhlciB0aGVyZSBhcmUgYW55IHdvcmtvcmRlcnMgeWV0CiAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9IGlmICEkUGFyYW17Q2hhbmdlfS0+e1dvcmtPcmRlckNvdW50fTsKCiAgICAjIFRoZSBjaGFuZ2UgY2FuIG5vIGxvbmdlciBiZSBtb3ZlZCwgd2hlbiB0aGUgY2hhbmdlIGhhcyBhbHJlYWR5IHN0YXJ0ZWQuCiAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9IGlmICRQYXJhbXtDaGFuZ2V9LT57QWN0dWFsU3RhcnRUaW1lfTsKCiAgICAjIGdldCBjb25maWcgZm9yIHRoZSByZWxldmFudCBhY3Rpb24KICAgIG15ICRGcm9udGVuZENvbmZpZwogICAgICAgID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoIklUU01DaGFuZ2U6OkZyb250ZW5kOjokUGFyYW17Q29uZmlnfS0+e0FjdGlvbn0iKTsKCiAgICAjIGdldCB0aGUgcmVxdWlyZWQgcHJpdmlsZWdlLCAncm8nIG9yICdydycKICAgIG15ICRSZXF1aXJlZFByaXY7CiAgICBpZiAoJEZyb250ZW5kQ29uZmlnKSB7CgogICAgICAgICMgZ2V0IHRoZSByZXF1aXJlZCBwcml2IGZyb20gdGhlIGZyb250ZW5kIGNvbmZpZ3VyYXRpb24KICAgICAgICAkUmVxdWlyZWRQcml2ID0gJEZyb250ZW5kQ29uZmlnLT57UGVybWlzc2lvbn07CiAgICB9CgogICAgbXkgJEFjY2VzczsKICAgIGlmICggISRSZXF1aXJlZFByaXYgKSB7CgogICAgICAgICMgRGlzcGxheSB0aGUgbWVudS1saW5rLCB3aGVuIG5vIHByaXZpbGVnZSBpcyByZXF1aXJlZAogICAgICAgICRBY2Nlc3MgPSAxOwogICAgfQogICAgZWxzZSB7CgogICAgICAgICMgY2hlY2sgcGVybWlzc2lvbnMsIGJhc2VkIG9uIHRoZSByZXF1aXJlZCBwcml2aWxlZ2UKICAgICAgICAkQWNjZXNzID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5QZXJtaXNzaW9uKAogICAgICAgICAgICBUeXBlICAgICA9PiAkUmVxdWlyZWRQcml2LAogICAgICAgICAgICBDaGFuZ2VJRCA9PiAkUGFyYW17Q2hhbmdlfS0+e0NoYW5nZUlEfSwKICAgICAgICAgICAgVXNlcklEICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICBMb2dObyAgICA9PiAxLAogICAgICAgICk7CiAgICB9CgogICAgcmV0dXJuICRQYXJhbXtDb3VudGVyfSBpZiAhJEFjY2VzczsKCiAgICAjIG91dHB1dCBtZW51IGJsb2NrCiAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKCBOYW1lID0+ICdNZW51JyApOwoKICAgICMgb3V0cHV0IHNlcGVyYXRvciwgd2hlbiB0aGlzIGlzIG5vdCB0aGUgZmlyc3QgbWVudSBpdGVtCiAgICBpZiAoICRQYXJhbXtDb3VudGVyfSApIHsKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKCBOYW1lID0+ICdNZW51SXRlbVNwbGl0JyApOwogICAgfQoKICAgICMgb3V0cHV0IG1lbnUgaXRlbQogICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdNZW51SXRlbScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgJXsgJFBhcmFte0NoYW5nZX0gfSwKICAgICAgICAgICAgJXsgJFBhcmFte0NvbmZpZ30gfSwKICAgICAgICB9LAogICAgKTsKICAgICRQYXJhbXtDb3VudGVyfSsrOwoKICAgIHJldHVybiAkUGFyYW17Q291bnRlcn07Cn0KCjE7Cg==</File>
        <File Location="Kernel/Output/HTML/ITSMChangeMenuWorkOrdersNeeded.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNQ2hhbmdlTWVudVdvcmtPcmRlcnNOZWVkZWQucG0gLSBNZW51IHdpdGggY2hlY2sgd2hldGhlciB0aGVyZSBhcmUgd29ya29yZGVycwojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogSVRTTUNoYW5nZU1lbnVXb3JrT3JkZXJzTmVlZGVkLnBtLHYgMS43IDIwMTAvMDMvMTkgMTA6MTM6MTYgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6T3V0cHV0OjpIVE1MOjpJVFNNQ2hhbmdlTWVudVdvcmtPcmRlcnNOZWVkZWQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjcgJCkgWzFdOwoKIyBBcyBvZiAyMDEwLTAzLTE5IHRoaXMgbW9kdWxlIGlzIHVudXNlZC4KIyBCdXQgaXQgaXMga2VwdCBpbiB0aGUgZGlzdHJpYnV0aW9uLCBhcyBpdCBwcm92aWRlcyB1c2VmdWwgZnVuY3Rpb25hbGl0eSBmb3IgZnV0dXJlIHVzZS4KCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBDaGFuZ2VPYmplY3QgVXNlcklEKQogICAgICAgICkKICAgIHsKICAgICAgICAkU2VsZi0+eyRPYmplY3R9ID0gJFBhcmFteyRPYmplY3R9IHx8IGRpZSAiR290IG5vICRPYmplY3QhIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte0NoYW5nZX0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIENoYW5nZSEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgY2hlY2sgd2hldGhlciB0aGVyZSBhcmUgYW55IHdvcmtvcmRlcnMgeWV0CiAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9IGlmICEkUGFyYW17Q2hhbmdlfS0+e1dvcmtPcmRlckNvdW50fTsKCiAgICAjIGdldCBjb25maWcgZm9yIHRoZSByZWxldmFudCBhY3Rpb24KICAgIG15ICRGcm9udGVuZENvbmZpZwogICAgICAgID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoIklUU01DaGFuZ2U6OkZyb250ZW5kOjokUGFyYW17Q29uZmlnfS0+e0FjdGlvbn0iKTsKCiAgICAjIGdldCB0aGUgcmVxdWlyZWQgcHJpdmlsZWdlLCAncm8nIG9yICdydycKICAgIG15ICRSZXF1aXJlZFByaXY7CiAgICBpZiAoJEZyb250ZW5kQ29uZmlnKSB7CgogICAgICAgICMgZ2V0IHRoZSByZXF1aXJlZCBwcml2IGZyb20gdGhlIGZyb250ZW5kIGNvbmZpZ3VyYXRpb24KICAgICAgICAkUmVxdWlyZWRQcml2ID0gJEZyb250ZW5kQ29uZmlnLT57UGVybWlzc2lvbn07CiAgICB9CgogICAgbXkgJEFjY2VzczsKICAgIGlmICggISRSZXF1aXJlZFByaXYgKSB7CgogICAgICAgICMgRGlzcGxheSB0aGUgbWVudS1saW5rLCB3aGVuIG5vIHByaXZpbGVnZSBpcyByZXF1aXJlZAogICAgICAgICRBY2Nlc3MgPSAxOwogICAgfQogICAgZWxzZSB7CgogICAgICAgICMgY2hlY2sgcGVybWlzc2lvbnMsIGJhc2VkIG9uIHRoZSByZXF1aXJlZCBwcml2aWxlZ2UKICAgICAgICAkQWNjZXNzID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5QZXJtaXNzaW9uKAogICAgICAgICAgICBUeXBlICAgICA9PiAkUmVxdWlyZWRQcml2LAogICAgICAgICAgICBDaGFuZ2VJRCA9PiAkUGFyYW17Q2hhbmdlfS0+e0NoYW5nZUlEfSwKICAgICAgICAgICAgVXNlcklEICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICBMb2dObyAgICA9PiAxLAogICAgICAgICk7CiAgICB9CgogICAgcmV0dXJuICRQYXJhbXtDb3VudGVyfSBpZiAhJEFjY2VzczsKCiAgICAjIG91dHB1dCBtZW51IGJsb2NrCiAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKCBOYW1lID0+ICdNZW51JyApOwoKICAgICMgb3V0cHV0IHNlcGVyYXRvciwgd2hlbiB0aGlzIGlzIG5vdCB0aGUgZmlyc3QgbWVudSBpdGVtCiAgICBpZiAoICRQYXJhbXtDb3VudGVyfSApIHsKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKCBOYW1lID0+ICdNZW51SXRlbVNwbGl0JyApOwogICAgfQoKICAgICMgb3V0cHV0IG1lbnUgaXRlbQogICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdNZW51SXRlbScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgJXsgJFBhcmFte0NoYW5nZX0gfSwKICAgICAgICAgICAgJXsgJFBhcmFte0NvbmZpZ30gfSwKICAgICAgICB9LAogICAgKTsKICAgICRQYXJhbXtDb3VudGVyfSsrOwoKICAgIHJldHVybiAkUGFyYW17Q291bnRlcn07Cn0KCjE7Cg==</File>
        <File Location="Kernel/Output/HTML/ITSMChangeOverviewSmall.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMTemplateOverviewSmall.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNVGVtcGxhdGVPdmVydmlld1NtYWxsLnBtLnBtCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBJVFNNVGVtcGxhdGVPdmVydmlld1NtYWxsLnBtLHYgMS41IDIwMTAvMDQvMjcgMjA6MzY6NTcgdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6OklUU01UZW1wbGF0ZU92ZXJ2aWV3U21hbGw7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjUgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBMb2dPYmplY3QgREJPYmplY3QgTGF5b3V0T2JqZWN0IFVzZXJJRCBVc2VyT2JqZWN0IE1haW5PYmplY3QpCiAgICAgICAgKQogICAgewogICAgICAgICRTZWxmLT57JE9iamVjdH0gPSAkUGFyYW17JE9iamVjdH0gfHwgZGllICJHb3Qgbm8gJE9iamVjdCEiOwogICAgfQoKICAgICMgY3JlYXRlIGFkZGl0aW9uYWwgb2JqZWN0cwogICAgJFNlbGYtPntWYWxpZE9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6VmFsaWQtPm5ldyglUGFyYW0pOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoUGFnZVNob3duIFN0YXJ0SGl0KSkgewogICAgICAgIGlmICggISRQYXJhbXskTmVlZGVkfSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJE5lZWRlZCEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgICMgbmVlZCBUZW1wbGF0ZUlEcwogICAgaWYgKCAhJFBhcmFte1RlbXBsYXRlSURzfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgdGhlIFRlbXBsYXRlSURzIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBzdG9yZSB0aGUgdGVtcGxhdGUgSURzCiAgICBteSBASURzID0gQHsgJFBhcmFte1RlbXBsYXRlSURzfSB9OwoKICAgICMgY2hlY2sgU2hvd0NvbHVtbnMgcGFyYW1ldGVyCiAgICBteSBAU2hvd0NvbHVtbnM7CiAgICBpZiAoICRQYXJhbXtTaG93Q29sdW1uc30gJiYgcmVmICRQYXJhbXtTaG93Q29sdW1uc30gZXEgJ0FSUkFZJyApIHsKICAgICAgICBAU2hvd0NvbHVtbnMgPSBAeyAkUGFyYW17U2hvd0NvbHVtbnN9IH07CiAgICB9CgogICAgIyBidWlsZCBjb2x1bW4gaGVhZGVyIGJsb2NrcwogICAgaWYgKEBTaG93Q29sdW1ucykgewogICAgICAgIGZvciBteSAkQ29sdW1uIChAU2hvd0NvbHVtbnMpIHsKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1JlY29yZCcgLiAkQ29sdW1uIC4gJ0hlYWRlcicsCiAgICAgICAgICAgICAgICBEYXRhID0+IFwlUGFyYW0sCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQoKICAgIG15ICRPdXRwdXQgICA9ICcnOwogICAgbXkgJENvdW50ZXIgID0gMDsKICAgIG15ICRDc3NDbGFzcyA9ICcnOwogICAgSUQ6CiAgICBmb3IgbXkgJElEIChASURzKSB7CiAgICAgICAgJENvdW50ZXIrKzsKICAgICAgICBpZiAoICRDb3VudGVyID49ICRQYXJhbXtTdGFydEhpdH0gJiYgJENvdW50ZXIgPCAoICRQYXJhbXtQYWdlU2hvd259ICsgJFBhcmFte1N0YXJ0SGl0fSApICkgewoKICAgICAgICAgICAgIyBkaXNwbGF5IHRoZSB0ZW1wbGF0ZSBkYXRhCiAgICAgICAgICAgIG15ICRUZW1wbGF0ZSA9ICRTZWxmLT57VGVtcGxhdGVPYmplY3R9LT5UZW1wbGF0ZUdldCgKICAgICAgICAgICAgICAgIFRlbXBsYXRlSUQgPT4gJElELAogICAgICAgICAgICAgICAgVXNlcklEICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIG15ICVEYXRhID0gJXskVGVtcGxhdGV9OwoKICAgICAgICAgICAgIyBodW1hbiByZWFkYWJsZSB2YWxpZGl0eQogICAgICAgICAgICAkRGF0YXtWYWxpZH0gPSAkU2VsZi0+e1ZhbGlkT2JqZWN0fS0+VmFsaWRMb29rdXAoIFZhbGlkSUQgPT4gJERhdGF7VmFsaWRJRH0gKTsKCiAgICAgICAgICAgICMgZ2V0IHVzZXIgZGF0YSBmb3IgbmVlZGVkIHVzZXIgdHlwZXMKICAgICAgICAgICAgVVNFUl9UWVBFOgogICAgICAgICAgICBmb3IgbXkgJFVzZXJUeXBlIChxdyhDcmVhdGVCeSBDaGFuZ2VCeSkpIHsKCiAgICAgICAgICAgICAgICAjIGNoZWNrIGlmIFVzZXJUeXBlIGF0dHJpYnV0ZSBleGlzdHMgaW4gdGhlIHRlbXBsYXRlCiAgICAgICAgICAgICAgICBuZXh0IFVTRVJfVFlQRSBpZiAhJERhdGF7JFVzZXJUeXBlfTsKCiAgICAgICAgICAgICAgICAjIGdldCB1c2VyIGRhdGEKICAgICAgICAgICAgICAgIG15ICVVc2VyID0gJFNlbGYtPntVc2VyT2JqZWN0fS0+R2V0VXNlckRhdGEoCiAgICAgICAgICAgICAgICAgICAgVXNlcklEID0+ICREYXRheyRVc2VyVHlwZX0sCiAgICAgICAgICAgICAgICAgICAgQ2FjaGVkID0+IDEsCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgICMgc2V0IHVzZXIgZGF0YQogICAgICAgICAgICAgICAgJERhdGF7ICRVc2VyVHlwZSAuICdVc2VyTG9naW4nIH0gICAgICAgID0gJFVzZXJ7VXNlckxvZ2lufTsKICAgICAgICAgICAgICAgICREYXRheyAkVXNlclR5cGUgLiAnVXNlckZpcnN0bmFtZScgfSAgICA9ICRVc2Vye1VzZXJGaXJzdG5hbWV9OwogICAgICAgICAgICAgICAgJERhdGF7ICRVc2VyVHlwZSAuICdVc2VyTGFzdG5hbWUnIH0gICAgID0gJFVzZXJ7VXNlckxhc3RuYW1lfTsKICAgICAgICAgICAgICAgICREYXRheyAkVXNlclR5cGUgLiAnTGVmdFBhcmVudGhlc2lzJyB9ICA9ICcoJzsKICAgICAgICAgICAgICAgICREYXRheyAkVXNlclR5cGUgLiAnUmlnaHRQYXJlbnRoZXNpcycgfSA9ICcpJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBzZXQgY3NzIGNsYXNzIG9mIHRoZSByb3cKICAgICAgICAgICAgJENzc0NsYXNzID0gJENzc0NsYXNzIGVxICdzZWFyY2hwYXNzaXZlJyA/ICdzZWFyY2hhY3RpdmUnIDogJ3NlYXJjaHBhc3NpdmUnOwoKICAgICAgICAgICAgIyBidWlsZCByZWNvcmQgYmxvY2sKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1JlY29yZCcsCiAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICAgICAgJURhdGEsCiAgICAgICAgICAgICAgICAgICAgQ3NzQ2xhc3MgPT4gJENzc0NsYXNzLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICMgYnVpbGQgY29sdW1uIHJlY29yZCBibG9ja3MKICAgICAgICAgICAgaWYgKEBTaG93Q29sdW1ucykgewogICAgICAgICAgICAgICAgZm9yIG15ICRDb2x1bW4gKEBTaG93Q29sdW1ucykgewogICAgICAgICAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1JlY29yZCcgLiAkQ29sdW1uLAogICAgICAgICAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICVEYXRhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3NzQ2xhc3MgPT4gJENzc0NsYXNzLAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgIyB1c2UgdGVtcGxhdGUKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZ2VudElUU01UZW1wbGF0ZU92ZXJ2aWV3U21hbGwnLAogICAgICAgIERhdGEgICAgICAgICA9PiB7CiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgVHlwZSAgICAgICAgPT4gJFNlbGYtPntWaWV3VHlwZX0sCiAgICAgICAgICAgIENvbHVtbkNvdW50ID0+IHNjYWxhciBAU2hvd0NvbHVtbnMsCiAgICAgICAgfSwKICAgICk7CgogICAgcmV0dXJuICRPdXRwdXQ7Cn0KCjE7Cg==</File>
        <File Location="Kernel/Output/HTML/ITSMWorkOrderMenuGeneric.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNV29ya09yZGVyTWVudUdlbmVyaWMucG0KIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAwOSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IElUU01Xb3JrT3JkZXJNZW51R2VuZXJpYy5wbSx2IDEuNSAyMDA5LzExLzIzIDEzOjMwOjQzIGJlcyBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok91dHB1dDo6SFRNTDo6SVRTTVdvcmtPcmRlck1lbnVHZW5lcmljOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS41ICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBXb3JrT3JkZXJPYmplY3QgVXNlcklEKQogICAgICAgICkKICAgIHsKICAgICAgICAkU2VsZi0+eyRPYmplY3R9ID0gJFBhcmFteyRPYmplY3R9IHx8IGRpZSAiR290IG5vICRPYmplY3QhIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte1dvcmtPcmRlcn0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIFdvcmtPcmRlciEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgZ2V0IGNvbmZpZyBmb3IgdGhlIHJlbGV2YW50IGFjdGlvbgogICAgbXkgJEZyb250ZW5kQ29uZmlnCiAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTVdvcmtPcmRlcjo6RnJvbnRlbmQ6OiRQYXJhbXtDb25maWd9LT57QWN0aW9ufSIpOwoKICAgICMgZ2V0IHRoZSByZXF1aXJlZCBwcml2aWxlZ2UsICdybycgb3IgJ3J3JwogICAgbXkgJFJlcXVpcmVkUHJpdjsKICAgIGlmICggJEZyb250ZW5kQ29uZmlnICYmICRGcm9udGVuZENvbmZpZy0+e1Blcm1pc3Npb259ICkgewoKICAgICAgICAjIGdldCB0aGUgcmVxdWlyZWQgcHJpdiBmcm9tIHRoZSBmcm9udGVuZCBjb25maWd1cmF0aW9uCiAgICAgICAgJFJlcXVpcmVkUHJpdiA9ICRGcm9udGVuZENvbmZpZy0+e1Blcm1pc3Npb259OwogICAgfQogICAgZWxzaWYgKCAkUGFyYW17Q29uZmlnfS0+e0FjdGlvbn0gZXEgJ0FnZW50TGlua09iamVjdCcgKSB7CgogICAgICAgICMgdGhlIExpbmstbGluayBpcyBhIHNwZWNpYWwgY2FzZSwgYXMgaXQgaXMgbm90IHNwZWNpZmljIHRvIElUU01DaGFuZ2UKICAgICAgICAkUmVxdWlyZWRQcml2ID0gJ3J3JzsKICAgIH0KCiAgICBteSAkQWNjZXNzOwogICAgaWYgKCAhJFJlcXVpcmVkUHJpdiApIHsKCiAgICAgICAgIyBEaXNwbGF5IHRoZSBtZW51LWxpbmssIHdoZW4gbm8gcHJpdmlsZWdlIGlzIHJlcXVpcmVkCiAgICAgICAgJEFjY2VzcyA9IDE7CiAgICB9CiAgICBlbHNlIHsKCiAgICAgICAgIyBjaGVjayBwZXJtaXNzaW9ucywgYmFzZWQgb24gdGhlIHJlcXVpcmVkIHByaXZpbGVnZQogICAgICAgICRBY2Nlc3MgPSAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0tPlBlcm1pc3Npb24oCiAgICAgICAgICAgIFR5cGUgICAgICAgID0+ICRSZXF1aXJlZFByaXYsCiAgICAgICAgICAgIFdvcmtPcmRlcklEID0+ICRQYXJhbXtXb3JrT3JkZXJ9LT57V29ya09yZGVySUR9LAogICAgICAgICAgICBVc2VySUQgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgIExvZ05vICAgICAgID0+IDEsCiAgICAgICAgKTsKICAgIH0KCiAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9IGlmICEkQWNjZXNzOwoKICAgICMgb3V0cHV0IG1lbnUgYmxvY2sKICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soIE5hbWUgPT4gJ01lbnUnICk7CgogICAgIyBvdXRwdXQgc2VwZXJhdG9yLCB3aGVuIHRoaXMgaXMgbm90IHRoZSBmaXJzdCBtZW51IGl0ZW0KICAgIGlmICggJFBhcmFte0NvdW50ZXJ9ICkgewogICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soIE5hbWUgPT4gJ01lbnVJdGVtU3BsaXQnICk7CiAgICB9CgogICAgIyBvdXRwdXQgbWVudSBpdGVtCiAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgIE5hbWUgPT4gJ01lbnVJdGVtJywKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAleyAkUGFyYW17V29ya09yZGVyfSB9LAogICAgICAgICAgICAleyAkUGFyYW17Q29uZmlnfSB9LAogICAgICAgIH0sCiAgICApOwogICAgJFBhcmFte0NvdW50ZXJ9Kys7CgogICAgcmV0dXJuICRQYXJhbXtDb3VudGVyfTsKfQoKMTsK</File>
        <File Location="Kernel/Output/HTML/ITSMWorkOrderMenuWithPermissionFromChange.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNV29ya09yZGVyTWVudVdpdGhQZXJtaXNzaW9uRnJvbUNoYW5nZS5wbQojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogSVRTTVdvcmtPcmRlck1lbnVXaXRoUGVybWlzc2lvbkZyb21DaGFuZ2UucG0sdiAxLjUgMjAxMC8wMS8yNiAxNDoxNzoyNCBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6OklUU01Xb3JrT3JkZXJNZW51V2l0aFBlcm1pc3Npb25Gcm9tQ2hhbmdlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS41ICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBXb3JrT3JkZXJPYmplY3QgVXNlcklEKQogICAgICAgICkKICAgIHsKICAgICAgICAkU2VsZi0+eyRPYmplY3R9ID0gJFBhcmFteyRPYmplY3R9IHx8IGRpZSAiR290IG5vICRPYmplY3QhIjsKICAgIH0KCiAgICAjIGNyZWF0ZSBhZGRpdGlvbmFsIG9iamVjdHMKICAgICRTZWxmLT57Q2hhbmdlT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoJVBhcmFtKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte1dvcmtPcmRlcn0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIFdvcmtPcmRlciEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgZ2V0IGNvbmZpZyBmb3IgdGhlIHJlbGV2YW50IGFjdGlvbgogICAgbXkgJEZyb250ZW5kQ29uZmlnCiAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTVdvcmtPcmRlcjo6RnJvbnRlbmQ6OiRQYXJhbXtDb25maWd9LT57QWN0aW9ufSIpOwoKICAgICMgZ2V0IHRoZSByZXF1aXJlZCBwcml2aWxlZ2UsICdybycgb3IgJ3J3JwogICAgbXkgJFJlcXVpcmVkUHJpdjsKICAgIGlmICgkRnJvbnRlbmRDb25maWcpIHsKCiAgICAgICAgIyBnZXQgdGhlIHJlcXVpcmVkIHByaXYgZnJvbSB0aGUgZnJvbnRlbmQgY29uZmlndXJhdGlvbgogICAgICAgICRSZXF1aXJlZFByaXYgPSAkRnJvbnRlbmRDb25maWctPntQZXJtaXNzaW9ufTsKICAgIH0KCiAgICBteSAkQWNjZXNzOwogICAgaWYgKCAhJFJlcXVpcmVkUHJpdiApIHsKCiAgICAgICAgIyBEaXNwbGF5IHRoZSBtZW51LWxpbmssIHdoZW4gbm8gcHJpdmlsZWdlIGlzIHJlcXVpcmVkCiAgICAgICAgJEFjY2VzcyA9IDE7CiAgICB9CiAgICBlbHNlIHsKCiAgICAgICAgIyBjaGVjayBwZXJtaXNzaW9ucywgYmFzZWQgb24gdGhlIHJlcXVpcmVkIHByaXZpbGVnZQogICAgICAgICRBY2Nlc3MgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPlBlcm1pc3Npb24oCiAgICAgICAgICAgIFR5cGUgICAgID0+ICRSZXF1aXJlZFByaXYsCiAgICAgICAgICAgIENoYW5nZUlEID0+ICRQYXJhbXtXb3JrT3JkZXJ9LT57Q2hhbmdlSUR9LAogICAgICAgICAgICBVc2VySUQgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgIExvZ05vICAgID0+IDEsCiAgICAgICAgKTsKICAgIH0KCiAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9IGlmICEkQWNjZXNzOwoKICAgICMgb3V0cHV0IG1lbnUgYmxvY2sKICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soIE5hbWUgPT4gJ01lbnUnICk7CgogICAgIyBvdXRwdXQgc2VwZXJhdG9yLCB3aGVuIHRoaXMgaXMgbm90IHRoZSBmaXJzdCBtZW51IGl0ZW0KICAgIGlmICggJFBhcmFte0NvdW50ZXJ9ICkgewogICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soIE5hbWUgPT4gJ01lbnVJdGVtU3BsaXQnICk7CiAgICB9CgogICAgIyBvdXRwdXQgbWVudSBpdGVtCiAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgIE5hbWUgPT4gJ01lbnVJdGVtJywKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAleyAkUGFyYW17V29ya09yZGVyfSB9LAogICAgICAgICAgICAleyAkUGFyYW17Q29uZmlnfSB9LAogICAgICAgIH0sCiAgICApOwogICAgJFBhcmFte0NvdW50ZXJ9Kys7CgogICAgcmV0dXJuICRQYXJhbXtDb3VudGVyfTsKfQoKMTsK</File>
        <File Location="Kernel/Output/HTML/ITSMWorkOrderMenuWithTakePermission.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNV29ya09yZGVyTWVudVdpdGhUYWtlUGVybWlzc2lvbi5wbQojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogSVRTTVdvcmtPcmRlck1lbnVXaXRoVGFrZVBlcm1pc3Npb24ucG0sdiAxLjEgMjAxMC8wMS8yNiAxNDoxNzoyNCBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6OklUU01Xb3JrT3JkZXJNZW51V2l0aFRha2VQZXJtaXNzaW9uOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBXb3JrT3JkZXJPYmplY3QgVXNlcklEKQogICAgICAgICkKICAgIHsKICAgICAgICAkU2VsZi0+eyRPYmplY3R9ID0gJFBhcmFteyRPYmplY3R9IHx8IGRpZSAiR290IG5vICRPYmplY3QhIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte1dvcmtPcmRlcn0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIFdvcmtPcmRlciEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgZ2V0IGNvbmZpZyBmb3IgdGhlIHJlbGV2YW50IGFjdGlvbgogICAgbXkgJEZyb250ZW5kQ29uZmlnCiAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTVdvcmtPcmRlcjo6RnJvbnRlbmQ6OiRQYXJhbXtDb25maWd9LT57QWN0aW9ufSIpOwoKICAgICMgZ2V0IHRoZSByZXF1aXJlZCBwcml2aWxlZ2UsICdybycgb3IgJ3J3JwogICAgbXkgJFJlcXVpcmVkUHJpdjsKICAgIGlmICggJEZyb250ZW5kQ29uZmlnICYmICRGcm9udGVuZENvbmZpZy0+e1Blcm1pc3Npb259ICkgewoKICAgICAgICAjIGdldCB0aGUgcmVxdWlyZWQgcHJpdiBmcm9tIHRoZSBmcm9udGVuZCBjb25maWd1cmF0aW9uCiAgICAgICAgJFJlcXVpcmVkUHJpdiA9ICRGcm9udGVuZENvbmZpZy0+e1Blcm1pc3Npb259OwogICAgfQoKICAgIG15ICRBY2Nlc3M7CiAgICBpZiAoICEkUmVxdWlyZWRQcml2ICkgewoKICAgICAgICAjIERpc3BsYXkgdGhlIG1lbnUtbGluaywgd2hlbiBubyBwcml2aWxlZ2UgaXMgcmVxdWlyZWQKICAgICAgICAkQWNjZXNzID0gMTsKICAgIH0KICAgIGVsc2UgewoKICAgICAgICAjIGNoZWNrIHBlcm1pc3Npb25zLCBiYXNlZCBvbiB0aGUgcmVxdWlyZWQgcHJpdmlsZWdlCiAgICAgICAgIyBxdWVyeSB0aGUgcGVybWlzc2lvbiBtb2R1bGVzIHJlZ2lzdGVyZWQgaW4gJ0lUU01Xb3JrT3JkZXI6OlRha2VQZXJtaXNzaW9uJwogICAgICAgICRBY2Nlc3MgPSAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0tPlBlcm1pc3Npb24oCiAgICAgICAgICAgIFR5cGUgICAgICAgICAgICAgICA9PiAkUmVxdWlyZWRQcml2LAogICAgICAgICAgICBQZXJtaXNzaW9uUmVnaXN0cnkgPT4gJ0lUU01Xb3JrT3JkZXI6OlRha2VQZXJtaXNzaW9uJywKICAgICAgICAgICAgV29ya09yZGVySUQgICAgICAgID0+ICRQYXJhbXtXb3JrT3JkZXJ9LT57V29ya09yZGVySUR9LAogICAgICAgICAgICBVc2VySUQgICAgICAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICBMb2dObyAgICAgICAgICAgICAgPT4gMSwKICAgICAgICApOwogICAgfQoKICAgIHJldHVybiAkUGFyYW17Q291bnRlcn0gaWYgISRBY2Nlc3M7CgogICAgIyBvdXRwdXQgbWVudSBibG9jawogICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jayggTmFtZSA9PiAnTWVudScgKTsKCiAgICAjIG91dHB1dCBzZXBlcmF0b3IsIHdoZW4gdGhpcyBpcyBub3QgdGhlIGZpcnN0IG1lbnUgaXRlbQogICAgaWYgKCAkUGFyYW17Q291bnRlcn0gKSB7CiAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jayggTmFtZSA9PiAnTWVudUl0ZW1TcGxpdCcgKTsKICAgIH0KCiAgICAjIG91dHB1dCBtZW51IGl0ZW0KICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgTmFtZSA9PiAnTWVudUl0ZW0nLAogICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICV7ICRQYXJhbXtXb3JrT3JkZXJ9IH0sCiAgICAgICAgICAgICV7ICRQYXJhbXtDb25maWd9IH0sCiAgICAgICAgfSwKICAgICk7CiAgICAkUGFyYW17Q291bnRlcn0rKzsKCiAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9Owp9CgoxOwo=</File>
        <File Location="Kernel/Output/HTML/TicketMenuITSMChange.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9UaWNrZXRNZW51SVRTTUNoYW5nZS5wbSAtIElUU01DaGFuZ2Ugc3BlY2lmaWMgbW9kdWxlIGZvciB0aGUgdGlja2V0IG1lbnUKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAwOSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IFRpY2tldE1lbnVJVFNNQ2hhbmdlLnBtLHYgMS43IDIwMDkvMTEvMjMgMTM6MzA6NDMgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6T3V0cHV0OjpIVE1MOjpUaWNrZXRNZW51SVRTTUNoYW5nZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuNyAkKSBbMV07Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgZ2V0IG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAoCiAgICAgICAgcXcoQ29uZmlnT2JqZWN0IExvZ09iamVjdCBEQk9iamVjdCBMYXlvdXRPYmplY3QgVXNlcklEIEdyb3VwT2JqZWN0IFRpY2tldE9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgIyBjcmVhdGUgbmVlZGVkIG9iamVjdHMKICAgICRTZWxmLT57Q2hhbmdlT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoJVBhcmFtKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte1RpY2tldH0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIFRpY2tldCEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgY2hlY2sgaWYgZnJvbnRlbmQgbW9kdWxlIGlzIHJlZ2lzdGVyZWQsIGlmIG5vdCwgZG8gbm90IHNob3cgYWN0aW9uCiAgICBpZiAoICRQYXJhbXtDb25maWd9LT57QWN0aW9ufSApIHsKICAgICAgICBteSAkTW9kdWxlID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0Zyb250ZW5kOjpNb2R1bGUnKS0+eyAkUGFyYW17Q29uZmlnfS0+e0FjdGlvbn0gfTsKICAgICAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9IGlmICEkTW9kdWxlOwogICAgfQoKICAgICMgdGhlIGxpbmsgaXMgc2hvd24gb25seSBmb3IgdGhlIGNvbmZpZ3VyZWQgdGlja2V0IHR5cGVzLAogICAgIyBzbyB0aGUgdGlja2V0IG5lZWRzIHRvIGhhdmUgYSB0eXBlLgogICAgcmV0dXJuICRQYXJhbXtDb3VudGVyfSBpZiAhJFBhcmFte1RpY2tldH0tPntUeXBlfTsKCiAgICAjIGdldCBhbmQgY2hlY2sgdGhlIGxpc3Qgb2YgcmVsZXZhbnQgdGlja2V0IHR5cGVzCiAgICBteSAkQWRkQ2hhbmdlTGlua1RpY2tldFR5cGVzCiAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnSVRTTUNoYW5nZTo6QWRkQ2hhbmdlTGlua1RpY2tldFR5cGVzJyk7CgogICAgcmV0dXJuICRQYXJhbXtDb3VudGVyfSBpZiAhJEFkZENoYW5nZUxpbmtUaWNrZXRUeXBlczsKICAgIHJldHVybiAkUGFyYW17Q291bnRlcn0gaWYgcmVmICRBZGRDaGFuZ2VMaW5rVGlja2V0VHlwZXMgbmUgJ0FSUkFZJzsKICAgIHJldHVybiAkUGFyYW17Q291bnRlcn0gaWYgIUB7JEFkZENoYW5nZUxpbmtUaWNrZXRUeXBlc307CgogICAgIyBjaGVjayB3aGV0aGVyIHRoZSB0aWNrZXQncyB0eXBlIGlzIHJlbGV2YW50CiAgICBteSAlSXNSZWxldmFudCA9IG1hcCB7ICRfID0+IDEgfSBAeyRBZGRDaGFuZ2VMaW5rVGlja2V0VHlwZXN9OwoKICAgIHJldHVybiAkUGFyYW17Q291bnRlcn0gaWYgISRJc1JlbGV2YW50eyAkUGFyYW17VGlja2V0fS0+e1R5cGV9IH07CgogICAgIyBjaGVjayBwZXJtaXNzaW9uCiAgICBteSAkRnJvbnRlbmRDb25maWcKICAgICAgICA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCJJVFNNQ2hhbmdlOjpGcm9udGVuZDo6JFBhcmFte0NvbmZpZ30tPntBY3Rpb259Iik7CiAgICBpZiAoICRGcm9udGVuZENvbmZpZyAmJiAkRnJvbnRlbmRDb25maWctPntQZXJtaXNzaW9ufSApIHsKICAgICAgICBteSAkQWNjZXNzID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5QZXJtaXNzaW9uKAogICAgICAgICAgICBUeXBlICAgPT4gJEZyb250ZW5kQ29uZmlnLT57UGVybWlzc2lvbn0sCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgIExvZ05vICA9PiAxLAogICAgICAgICk7CgogICAgICAgIHJldHVybiAkUGFyYW17Q291bnRlcn0gaWYgISRBY2Nlc3M7CiAgICB9CgogICAgIyBkaXNwbGF5IHRoZSBtZW51IGl0ZW0KICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgTmFtZSA9PiAnTWVudScsCiAgICAgICAgRGF0YSA9PiB7fSwKICAgICk7CiAgICBpZiAoICRQYXJhbXtDb3VudGVyfSApIHsKICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdNZW51SXRlbVNwbGl0JywKICAgICAgICAgICAgRGF0YSA9PiB7fSwKICAgICAgICApOwogICAgfQogICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdNZW51SXRlbScsCiAgICAgICAgRGF0YSA9PiB7ICV7ICRQYXJhbXtDb25maWd9IH0sICV7ICRQYXJhbXtUaWNrZXR9IH0sICVQYXJhbSwgfSwKICAgICk7CiAgICAkUGFyYW17Q291bnRlcn0rKzsKCiAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9Owp9CgoxOwo=</File>
        <File Location="Kernel/Output/HTML/LayoutITSMChange.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9MYXlvdXRJVFNNQ2hhbmdlLnBtIC0gcHJvdmlkZXMgZ2VuZXJpYyBIVE1MIG91dHB1dCBmb3IgSVRTTUNoYW5nZQojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogTGF5b3V0SVRTTUNoYW5nZS5wbSx2IDEuNDAgMjAxMC8wMi8xMSAxNjo0Mzo0NyBtYWUgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dElUU01DaGFuZ2U7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dDsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuNDAgJCkgWzFdOwoKPW92ZXIgNAoKPWl0ZW0gSVRTTUNoYW5nZUJ1aWxkV29ya09yZGVyR3JhcGgoKQoKcmV0dXJucyBhIG91dHB1dCBzdHJpbmcgZm9yIFdvcmtPcmRlciBncmFwaAoKICAgIG15ICRTdHJpbmcgPSAkTGF5b3V0T2JqZWN0LT5JVFNNQ2hhbmdlQnVpbGRXb3JrT3JkZXJHcmFwaCgKICAgICAgICBDaGFuZ2UgPT4gJENoYW5nZVJlZiwKICAgICAgICBXb3JrT3JkZXJPYmplY3QgPT4gJFdvcmtPcmRlck9iamVjdCwKICAgICk7Cgo9Y3V0CgpzdWIgSVRTTUNoYW5nZUJ1aWxkV29ya09yZGVyR3JhcGggewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAocXcoVGltZU9iamVjdCBDb25maWdPYmplY3QpKSB7CiAgICAgICAgaWYgKCAhJFNlbGYtPnskT2JqZWN0fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5GYXRhbEVycm9yKAogICAgICAgICAgICAgICAgTWVzc2FnZSA9PiAiR290IG5vICRPYmplY3QhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNoZWNrIGZvciBjaGFuZ2UKICAgIG15ICRDaGFuZ2UgPSAkUGFyYW17Q2hhbmdlfTsKICAgIGlmICggISRDaGFuZ2UgKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIENoYW5nZSEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgY2hlY2sgd29ya29yZGVyIG9iamVjdAogICAgaWYgKCAhJFBhcmFte1dvcmtPcmRlck9iamVjdH0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIFdvcmtPcmRlck9iamVjdCEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgc3RvcmUgd29ya29yZGVyIG9iamVjdCBsb2NhbGx5CiAgICAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0gPSAkUGFyYW17V29ya09yZGVyT2JqZWN0fTsKCiAgICAjIGNoZWNrIGlmIHdvcmtvcmRlcnMgYXJlIGF2YWlsYWJsZQogICAgcmV0dXJuIGlmICEkQ2hhbmdlLT57V29ya09yZGVyQ291bnR9OwoKICAgICMgZXh0cmEgY2hlY2sgZm9yIEFSUkFZLXJlZgogICAgcmV0dXJuIGlmIHJlZiAkQ2hhbmdlLT57V29ya09yZGVySURzfSBuZSAnQVJSQVknOwoKICAgICMgaGFzaCBmb3Igc21hbGxlc3QgdGltZQogICAgbXkgJVRpbWU7CgogICAgVElNRVRZUEU6CiAgICBmb3IgbXkgJFRpbWVUeXBlIChxdyhTdGFydCBFbmQpKSB7CgogICAgICAgICMgYWN0dWFsIHRpbWUgbm90IHNldCwgc28gd2UgY2FuIHVzZSBwbGFubmVkCiAgICAgICAgaWYgKCAhJENoYW5nZS0+eyJBY3R1YWwke1RpbWVUeXBlfVRpbWUifSApIHsKCiAgICAgICAgICAgICMgY2hlY2sgaWYgdGltZSBpcyBzZXQKICAgICAgICAgICAgbmV4dCBUSU1FVFlQRSBpZiAhJENoYW5nZS0+eyJQbGFubmVkJHtUaW1lVHlwZX1UaW1lIn07CgogICAgICAgICAgICAjIHRyYW5zbGF0ZSB0byB0aW1lc3RhbXAKICAgICAgICAgICAgJFRpbWV7IiR7VGltZVR5cGV9VGltZSJ9ID0gJFNlbGYtPntUaW1lT2JqZWN0fS0+VGltZVN0YW1wMlN5c3RlbVRpbWUoCiAgICAgICAgICAgICAgICBTdHJpbmcgPT4gJENoYW5nZS0+eyJQbGFubmVkJHtUaW1lVHlwZX1UaW1lIn0sCiAgICAgICAgICAgICk7CgogICAgICAgICAgICAjIGp1bXAgdG8gbmV4dCB0eXBlCiAgICAgICAgICAgIG5leHQgVElNRVRZUEU7CiAgICAgICAgfQoKICAgICAgICAjIHRyYW5zbGF0ZSBwbGFubmVkIHRpbWUgdG8gdGltZXN0YW1wIGZvciBlcXVhdGlvbgogICAgICAgICRUaW1leyJQbGFubmVkJHtUaW1lVHlwZX1UaW1lIn0gPSAkU2VsZi0+e1RpbWVPYmplY3R9LT5UaW1lU3RhbXAyU3lzdGVtVGltZSgKICAgICAgICAgICAgU3RyaW5nID0+ICRDaGFuZ2UtPnsiUGxhbm5lZCR7VGltZVR5cGV9VGltZSJ9LAogICAgICAgICk7CgogICAgICAgICMgdHJhbnNsYXRlIGFjdHVhbCB0aW1lIHRvIHRpbWVzdGFtcCBmb3IgZXF1YXRpb24KICAgICAgICAkVGltZXsiQWN0dWFsJHtUaW1lVHlwZX1UaW1lIn0gPSAkU2VsZi0+e1RpbWVPYmplY3R9LT5UaW1lU3RhbXAyU3lzdGVtVGltZSgKICAgICAgICAgICAgU3RyaW5nID0+ICRDaGFuZ2UtPnsiQWN0dWFsJHtUaW1lVHlwZX1UaW1lIn0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGdldCBzbWFsbGVzdCBzdGFydCB0aW1lCiAgICBpZiAoICEkVGltZXtTdGFydFRpbWV9ICkgewogICAgICAgICRUaW1le1N0YXJ0VGltZX0KICAgICAgICAgICAgPSAoICRUaW1le1BsYW5uZWRTdGFydFRpbWV9IDwgJFRpbWV7QWN0dWFsU3RhcnRUaW1lfSApCiAgICAgICAgICAgID8gJFRpbWV7UGxhbm5lZFN0YXJ0VGltZX0KICAgICAgICAgICAgOiAkVGltZXtBY3R1YWxTdGFydFRpbWV9OwogICAgfQoKICAgICMgZ2V0IGhpZ2hlc3QgZW5kIHRpbWUKICAgIGlmICggISRUaW1le0VuZFRpbWV9ICkgewogICAgICAgICRUaW1le0VuZFRpbWV9CiAgICAgICAgICAgID0gKCAkVGltZXtQbGFubmVkRW5kVGltZX0gPiAkVGltZXtBY3R1YWxFbmRUaW1lfSApCiAgICAgICAgICAgID8gJFRpbWV7UGxhbm5lZEVuZFRpbWV9CiAgICAgICAgICAgIDogJFRpbWV7QWN0dWFsRW5kVGltZX07CiAgICB9CgogICAgIyBjaGVjayBmb3IgcmVhbCBlbmQgb2YgZW5kIHRpbWUgZm9yIHNjYWxlIGFuZCBncmFwaCBpdGVtcwogICAgIyBvbmx5IGlmIEFjdHVhbFN0YXJ0VGltZSBpcyBzZXQKICAgIGlmICgKICAgICAgICAkVGltZXtBY3R1YWxTdGFydFRpbWV9CiAgICAgICAgJiYgISRUaW1le0FjdHVhbEVuZFRpbWV9CiAgICAgICAgJiYgKCAkVGltZXtFbmRUaW1lfSA8ICRTZWxmLT57VGltZU9iamVjdH0tPlN5c3RlbVRpbWUoKSApCiAgICAgICAgKQogICAgewogICAgICAgICRUaW1le0VuZFRpbWV9ID0gJFNlbGYtPntUaW1lT2JqZWN0fS0+U3lzdGVtVGltZSgpOwogICAgfQoKICAgICMgY2FsY3VsYXRlIHRpY2tzIGZvciBjaGFuZ2UKICAgIG15ICRDaGFuZ2VUaWNrcyA9ICRTZWxmLT5fSVRTTUNoYW5nZUdldENoYW5nZVRpY2tzKAogICAgICAgIFN0YXJ0ID0+ICRUaW1le1N0YXJ0VGltZX0sCiAgICAgICAgRW5kICAgPT4gJFRpbWV7RW5kVGltZX0sCiAgICApOwoKICAgICMgY2hlY2sgZm9yIHZhbGlkIHRpY2tzCiAgICBpZiAoICEkQ2hhbmdlVGlja3MgKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdVbmFibGUgdG8gY2FsY3VsYXRlIHRpbWUgc2NhbGUuJywKICAgICAgICApOwogICAgfQoKICAgICMgZ2V0IHdvcmtvcmRlcnMgb2YgY2hhbmdlCiAgICBteSBAV29ya09yZGVyczsKICAgIFdPUktPUkRFUklEOgogICAgZm9yIG15ICRXb3JrT3JkZXJJRCAoIEB7ICRDaGFuZ2UtPntXb3JrT3JkZXJJRHN9IH0gKSB7CiAgICAgICAgbXkgJFdvcmtPcmRlciA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+V29ya09yZGVyR2V0KAogICAgICAgICAgICBXb3JrT3JkZXJJRCA9PiAkV29ya09yZGVySUQsCiAgICAgICAgICAgIFVzZXJJRCAgICAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwogICAgICAgIG5leHQgV09SS09SREVSSUQgaWYgISRXb3JrT3JkZXI7CgogICAgICAgIHB1c2ggQFdvcmtPcmRlcnMsICRXb3JrT3JkZXI7CiAgICB9CgogICAgIyBnZXQgY29uZmlnIHNldHRpbmdzCiAgICBteSAkQ2hhbmdlWm9vbUNvbmZpZyA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdJVFNNQ2hhbmdlOjpGcm9udGVuZDo6QWdlbnRJVFNNQ2hhbmdlWm9vbScpOwoKICAgICMgY2hlY2sgY29uZmlnIHNldHRpbmcKICAgIGlmICggISRDaGFuZ2Vab29tQ29uZmlnICkgewogICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAnTmVlZCBTeXNDb25maWcgc2V0dGluZ3MgZm9yIElUU01DaGFuZ2U6OkZyb250ZW5kOjpBZ2VudElUU01DaGFuZ2Vab29tIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBjaGVjayBncmFwaCBjb25maWcgc2V0dGluZwogICAgaWYgKCAhJENoYW5nZVpvb21Db25maWctPntXb3JrT3JkZXJHcmFwaH0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIFN5c0NvbmZpZyBzZXR0aW5ncyBmb3IgJwogICAgICAgICAgICAgICAgLiAnSVRTTUNoYW5nZTo6RnJvbnRlbmQ6OkFnZW50SVRTTUNoYW5nZVpvb20jIyNXb3JrT3JkZXJHcmFwaCEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgdmFsaWRpdHkgc2V0dGluZ3Mgb2YgZ3JhcGggc2V0dGluZ3MKICAgIG15ICVXb3JrT3JkZXJHcmFwaENoZWNrID0gKAogICAgICAgIFRpbWVMaW5lQ29sb3IgICAgICAgICAgID0+ICcjW2EtZkEtRlxkXXs2fScsCiAgICAgICAgVGltZUxpbmVXaWR0aCAgICAgICAgICAgPT4gJ1xkezEsMn0nLAogICAgICAgIHVuZGVmaW5lZF9wbGFubmVkX2NvbG9yID0+ICcjW2EtZkEtRlxkXXs2fScsCiAgICAgICAgdW5kZWZpbmVkX2FjdHVhbF9jb2xvciAgPT4gJyNbYS1mQS1GXGRdezZ9JywKICAgICk7CgogICAgIyBjaGVjayB2YWxpZGl0eSBvZiBncmFwaCBzZXR0aW5ncwogICAgbXkgJFdvcmtPcmRlckdyYXBoQ29uZmlnID0gJENoYW5nZVpvb21Db25maWctPntXb3JrT3JkZXJHcmFwaH07CiAgICBmb3IgbXkgJEdyYXBoU2V0dGluZyAoIGtleXMgJVdvcmtPcmRlckdyYXBoQ2hlY2sgKSB7CgogICAgICAgICMgY2hlY2sgZXhpc3RlbnNlIG9mIGNvbmZpZyBzZXR0aW5nCiAgICAgICAgaWYgKCAhJFdvcmtPcmRlckdyYXBoQ29uZmlnLT57JEdyYXBoU2V0dGluZ30gKSB7CgogICAgICAgICAgICAjIGRpc3BsYXkgZXJyb3IgYW5kIHJldHVybgogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCBTeXNDb25maWcgc2V0dGluZyAnJEdyYXBoU2V0dGluZycgaW4gIgogICAgICAgICAgICAgICAgICAgIC4gIklUU01DaGFuZ2U6OkZyb250ZW5kOjpBZ2VudElUU01DaGFuZ2Vab29tIyMjV29ya09yZGVyR3JhcGghIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgIyBjaGVjayB2YWxpZGl0eSBvZiBjb25maWcgc2V0dGluZwogICAgICAgIGlmICgKICAgICAgICAgICAgJFdvcmtPcmRlckdyYXBoQ29uZmlnLT57JEdyYXBoU2V0dGluZ30KICAgICAgICAgICAgIX4gbXsgXEEgJFdvcmtPcmRlckdyYXBoQ2hlY2t7JEdyYXBoU2V0dGluZ30gXHogfXhtcwogICAgICAgICAgICApCiAgICAgICAgewoKICAgICAgICAgICAgIyBkaXNwbGF5IGVycm9yIGFuZCByZXR1cm4KICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIlN5c0NvbmZpZyBzZXR0aW5nICckR3JhcGhTZXR0aW5nJyBpcyBpbnZhbGlkIGluICIKICAgICAgICAgICAgICAgICAgICAuICJJVFNNQ2hhbmdlOjpGcm9udGVuZDo6QWdlbnRJVFNNQ2hhbmdlWm9vbSMjI1dvcmtPcmRlckdyYXBoISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBsb2FkIGdyYXBoIHNjZWxldG9uCiAgICAkU2VsZi0+QmxvY2soCiAgICAgICAgTmFtZSA9PiAnV29ya09yZGVyR3JhcGgnLAogICAgICAgIERhdGEgPT4ge30sCiAgICApOwoKICAgICMgY3JlYXRlIGNvbG9yIGRlZmluaXRpb25zIGZvciBhbGwgY29uZmlndXJlZCB3b3Jrb3JkZXIgdHlwZXMKICAgIG15ICRXb3JrT3JkZXJUeXBlcyA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+V29ya09yZGVyVHlwZUxpc3QoCiAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKICAgICkgfHwgW107CgogICAgIyBjcmVhdGUgY3NzIGRlZmluaXRpb25zIGZvciB3b3Jrb3JkZXIgdHlwZXMKICAgIFdPUktPUkRFUlRZUEU6CiAgICBmb3IgbXkgJFdvcmtPcmRlclR5cGUgKCBAeyRXb3JrT3JkZXJUeXBlc30gKSB7CgogICAgICAgICMgY2hlY2sgd29ya29yZGVyIHR5cGUKICAgICAgICBuZXh0IFdPUktPUkRFUlRZUEUgaWYgISRXb3JrT3JkZXJUeXBlOwogICAgICAgIG5leHQgV09SS09SREVSVFlQRSBpZiAhJFdvcmtPcmRlclR5cGUtPntWYWx1ZX07CgogICAgICAgICMgZ2V0IG5hbWUgb2Ygd29ya29yZGVyIHR5cGUKICAgICAgICBteSAkV29ya09yZGVyVHlwZU5hbWUgPSAkV29ya09yZGVyVHlwZS0+e1ZhbHVlfTsKCiAgICAgICAgIyBjaGVjayBjb250ZW50cyBvZiBuYW1lCiAgICAgICAgbmV4dCBXT1JLT1JERVJUWVBFIGlmICEkV29ya09yZGVyVHlwZU5hbWU7CgogICAgICAgIGZvciBteSAkV29ya09yZGVyQ29sb3IgKHF3KCBfcGxhbm5lZCBfYWN0dWFsICkpIHsKCiAgICAgICAgICAgICMgZ2V0IGNvbmZpZ3VyZWQgb3IgZmFsbGJhY2sgcGxhbm5lZCBjb2xvciBmb3Igd29ya29yZGVyCiAgICAgICAgICAgIG15ICRXb3JrT3JkZXJUeXBlQ29sb3IKICAgICAgICAgICAgICAgID0gJFdvcmtPcmRlckdyYXBoQ29uZmlnLT57IiR7V29ya09yZGVyVHlwZU5hbWV9JHtXb3JrT3JkZXJDb2xvcn1fY29sb3IifTsKCiAgICAgICAgICAgICMgc2V0IGRlZmF1bHQgY29sb3IgaWYgbm8gY29sb3IgaXMgZm91bmQKICAgICAgICAgICAgJFdvcmtPcmRlclR5cGVDb2xvciB8fD0gJFdvcmtPcmRlckdyYXBoQ29uZmlnLT57InVuZGVmaW5lZCR7V29ya09yZGVyQ29sb3J9X2NvbG9yIn07CgogICAgICAgICAgICAjIGNoZWNrIHZhbGlkaXR5IG9mIHdvcmtvcmRlciBjb2xvcgogICAgICAgICAgICBpZiAoICRXb3JrT3JkZXJUeXBlQ29sb3IgIX4gbXsgXEEgIyBbQS1aYS16XGRdezZ9IFx6IH14bXMgKSB7CiAgICAgICAgICAgICAgICAkV29ya09yZGVyVHlwZUNvbG9yID0gJFdvcmtPcmRlckdyYXBoQ29uZmlnLT57InVuZGVmaW5lZCR7V29ya09yZGVyQ29sb3J9X2NvbG9yIn07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgZGlzcGxheSBjc3MgZGVmaW5pdGlvbnMgZm9yIHBsYW5uZWQKICAgICAgICAgICAgJFNlbGYtPkJsb2NrKAogICAgICAgICAgICAgICAgTmFtZSA9PiAnQ1NTV29ya09yZGVyVHlwZScsCiAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICBXb3JrT3JkZXJUeXBlTmFtZSAgPT4gJFdvcmtPcmRlclR5cGVOYW1lIC4gJFdvcmtPcmRlckNvbG9yLAogICAgICAgICAgICAgICAgICAgIFdvcmtPcmRlclR5cGVDb2xvciA9PiAkV29ya09yZGVyVHlwZUNvbG9yLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CgogICAgIyBjYWxjdWxhdGUgdGltZSBsaW5lIHBhcmFtZXRlcgogICAgbXkgJFRpbWVMaW5lID0gJFNlbGYtPl9JVFNNQ2hhbmdlR2V0VGltZUxpbmUoCiAgICAgICAgU3RhcnRUaW1lID0+ICRUaW1le1N0YXJ0VGltZX0sCiAgICAgICAgRW5kVGltZSAgID0+ICRUaW1le0VuZFRpbWV9LAogICAgICAgIFRpY2tzICAgICA9PiAkQ2hhbmdlVGlja3MsCiAgICApOwoKICAgIGlmICggJFRpbWVMaW5lICYmIGRlZmluZWQgJFRpbWVMaW5lLT57VGltZUxpbmVMZWZ0fSApIHsKCiAgICAgICAgIyBjYWxjdWxhdGUgaGVpZ2h0IG9mIHRpbWUgbGluZQogICAgICAgIG15ICRXb3JrT3JkZXJIZWlnaHQgPSAxNjsKICAgICAgICBteSAkU2NhbGVNYXJnaW4gICAgID0gMTE7CiAgICAgICAgJFRpbWVMaW5lLT57VGltZUxpbmVIZWlnaHR9ID0gKCAoIHNjYWxhciBAV29ya09yZGVycyApICogJFdvcmtPcmRlckhlaWdodCApICsgJFNjYWxlTWFyZ2luOwoKICAgICAgICAjIGRpc3BsYXkgY3NzIG9mIHRpbWVsaW5lCiAgICAgICAgJFNlbGYtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdDU1NUaW1lTGluZScsCiAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgJXskVGltZUxpbmV9LAogICAgICAgICAgICAgICAgJXskV29ya09yZGVyR3JhcGhDb25maWd9LAogICAgICAgICAgICB9LAogICAgICAgICk7CgogICAgICAgICMgZGlzcGxheSB0aW1lbGluZSBjb250YWluZXIKICAgICAgICAkU2VsZi0+QmxvY2soCiAgICAgICAgICAgIE5hbWUgPT4gJ1RpbWVMaW5lJywKICAgICAgICAgICAgRGF0YSA9PiB7fSwKICAgICAgICApOwogICAgfQoKICAgICMgc29ydCB3b3Jrb3JkZXIgYXNjZW5kaW5nIHRvIFdvcmtPcmRlck51bWJlcgogICAgQFdvcmtPcmRlcnMgPSBzb3J0IHsgJGEtPntXb3JrT3JkZXJOdW1iZXJ9IDw9PiAkYi0+e1dvcmtPcmRlck51bWJlcn0gfSBAV29ya09yZGVyczsKCiAgICAjIGJ1aWxkIGdyYXBoIG9mIGVhY2ggd29ya29yZGVyCiAgICBXT1JLT1JERVI6CiAgICBmb3IgbXkgJFdvcmtPcmRlciAoQFdvcmtPcmRlcnMpIHsKICAgICAgICBuZXh0IFdPUktPUkRFUiBpZiAhJFdvcmtPcmRlcjsKCiAgICAgICAgJFNlbGYtPl9JVFNNQ2hhbmdlR2V0V29ya09yZGVyR3JhcGgoCiAgICAgICAgICAgIFdvcmtPcmRlciA9PiAkV29ya09yZGVyLAogICAgICAgICAgICBTdGFydFRpbWUgPT4gJFRpbWV7U3RhcnRUaW1lfSwKICAgICAgICAgICAgRW5kVGltZSAgID0+ICRUaW1le0VuZFRpbWV9LAogICAgICAgICAgICBUaWNrcyAgICAgPT4gJENoYW5nZVRpY2tzLAogICAgICAgICk7CiAgICB9CgogICAgIyBidWlsZCBzY2FsZSBvZiBncmFwaAogICAgJFNlbGYtPl9JVFNNQ2hhbmdlR2V0Q2hhbmdlU2NhbGUoCiAgICAgICAgU3RhcnRUaW1lID0+ICRUaW1le1N0YXJ0VGltZX0sCiAgICAgICAgRW5kVGltZSAgID0+ICRUaW1le0VuZFRpbWV9LAogICAgICAgIFRpY2tzICAgICA9PiAkQ2hhbmdlVGlja3MsCiAgICApOwoKICAgICMgcmVuZGVyIGdyYXBoIGFuZCByZXR1cm4gSFRNTCB3aXRoIElUU01DaGFuZ2UuZHRsIHRlbXBsYXRlCiAgICByZXR1cm4gJFNlbGYtPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0lUU01DaGFuZ2UnLAogICAgICAgIERhdGEgICAgICAgICA9PiB7JVBhcmFtfSwKICAgICk7Cn0KCj1pdGVtIElUU01DaGFuZ2VMaXN0U2hvdygpCgpSZXR1cm5zIGEgbGlzdCBvZiBjaGFuZ2VzIGFzIHNvcnRhYmxlIGxpc3Qgd2l0aCBwYWdpbmF0aW9uLgoKVGhpcyBmdW5jdGlvbiBpcyBzaW1pbGFyIHRvIEw8S2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dFRpY2tldDo6VGlja2V0TGlzdFNob3coKT4KaW4gRjxLZXJuZWwvT3V0cHV0L0hUTUwvTGF5b3V0VGlja2V0LnBtPi4KCiAgICBteSAkT3V0cHV0ID0gJExheW91dE9iamVjdC0+SVRTTUNoYW5nZUxpc3RTaG93KAogICAgICAgIENoYW5nZUlEcyAgPT4gJENoYW5nZUlEc1JlZiwgICAgICAgICAgICAgICAgICAgICAgIyB0b3RhbCBsaXN0IG9mIGNoYW5nZSBpZHMsIHRoYXQgY2FuIGJlIGxpc3RlZAogICAgICAgIFRvdGFsICAgICAgPT4gc2NhbGFyIEB7ICRDaGFuZ2VJRHNSZWYgfSwgICAgICAgICAgIyB0b3RhbCBudW1iZXIgb2YgbGlzdCBpdGVtcywgY2hhbmdlcyBpbiB0aGlzIGNhc2UKICAgICAgICBWaWV3ICAgICAgID0+ICRTZWxmLT57Vmlld30sICAgICAgICAgICAgICAgICAgICAgICMgb3B0aW9uYWwsIHRoZSBkZWZhdWx0IHZhbHVlIGlzICdTbWFsbCcKICAgICAgICBGaWx0ZXIgICAgID0+ICdBbGwnLAogICAgICAgIEZpbHRlcnMgICAgPT4gXCVOYXZCYXJGaWx0ZXIsCiAgICAgICAgRmlsdGVyTGluayA9PiAkTGlua0ZpbHRlciwKICAgICAgICBUaXRsZU5hbWUgID0+ICdPdmVydmlldzogQ2hhbmdlJywKICAgICAgICBUaXRsZVZhbHVlID0+ICRTZWxmLT57RmlsdGVyfSwKICAgICAgICBFbnYgICAgICAgID0+ICRTZWxmLAogICAgICAgIExpbmtQYWdlICAgPT4gJExpbmtQYWdlLAogICAgICAgIExpbmtTb3J0ICAgPT4gJExpbmtTb3J0LAogICAgICAgIEZyb250ZW5kICAgPT4gJ0FnZW50JywgICAgICAgICAgICAgICAgICAgICAgICAgICAjIG9wdGlvbmFsIChBZ2VudHxDdXN0b21lciksIGRlZmF1bHQ6IEFnZW50LCBpbmRpY2F0ZXMgZnJvbSB3aGljaCBmcm9udGVuZCB0aGlzIGZ1bmN0aW9uIHdhcyBjYWxsZWQKICAgICk7Cgo9Y3V0CgpzdWIgSVRTTUNoYW5nZUxpc3RTaG93IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyB0YWtlIG9iamVjdCByZWYgdG8gbG9jYWwsIHJlbW92ZSBpdCBmcm9tICVQYXJhbSAocHJldmVudCBtZW1vcnkgbGVhaykKICAgIG15ICRFbnYgPSBkZWxldGUgJFBhcmFte0Vudn07CgogICAgIyBsb29rdXAgbGF0ZXN0IHVzZWQgdmlldyBtb2RlCiAgICBpZiAoICEkUGFyYW17Vmlld30gJiYgJFNlbGYtPnsgJ1VzZXJJVFNNQ2hhbmdlT3ZlcnZpZXcnIC4gJEVudi0+e0FjdGlvbn0gfSApIHsKICAgICAgICAkUGFyYW17Vmlld30gPSAkU2VsZi0+eyAnVXNlcklUU01DaGFuZ2VPdmVydmlldycgLiAkRW52LT57QWN0aW9ufSB9OwogICAgfQoKICAgICMgc2V0IGZyb250ZW5kCiAgICBteSAkRnJvbnRlbmQgPSAkUGFyYW17RnJvbnRlbmR9IHx8ICdBZ2VudCc7CgogICAgIyBzZXQgZGVmYXV0IHZpZXcgbW9kZSB0byAnc21hbGwnCiAgICBteSAkVmlldyA9ICRQYXJhbXtWaWV3fSB8fCAnU21hbGwnOwoKICAgICMgc3RvcmUgbGF0ZXN0IHZpZXcgbW9kZQogICAgJFNlbGYtPntTZXNzaW9uT2JqZWN0fS0+VXBkYXRlU2Vzc2lvbklEKAogICAgICAgIFNlc3Npb25JRCA9PiAkU2VsZi0+e1Nlc3Npb25JRH0sCiAgICAgICAgS2V5ICAgICAgID0+ICdVc2VySVRTTUNoYW5nZU92ZXJ2aWV3JyAuICRFbnYtPntBY3Rpb259LAogICAgICAgIFZhbHVlICAgICA9PiAkVmlldywKICAgICk7CgogICAgIyBnZXQgYmFja2VuZCBmcm9tIGNvbmZpZwogICAgbXkgJEJhY2tlbmRzID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0lUU01DaGFuZ2U6OkZyb250ZW5kOjpPdmVydmlldycpOwogICAgaWYgKCAhJEJhY2tlbmRzICkgewogICAgICAgIHJldHVybiAkRW52LT57TGF5b3V0T2JqZWN0fS0+RmF0YWxFcnJvcigKICAgICAgICAgICAgTWVzc2FnZSA9PiAnTmVlZCBjb25maWcgb3B0aW9uIElUU01DaGFuZ2U6OkZyb250ZW5kOjpPdmVydmlldycsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGNoZWNrIGZvciBoYXNoLXJlZgogICAgaWYgKCByZWYgJEJhY2tlbmRzIG5lICdIQVNIJyApIHsKICAgICAgICByZXR1cm4gJEVudi0+e0xheW91dE9iamVjdH0tPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gJ0NvbmZpZyBvcHRpb24gSVRTTUNoYW5nZTo6RnJvbnRlbmQ6Ok92ZXJ2aWV3IG5lZWRzIHRvIGJlIGEgSEFTSCByZWYhJywKICAgICAgICApOwogICAgfQoKICAgICMgY2hlY2sgZm9yIGNvbmZpZyBrZXkKICAgIGlmICggISRCYWNrZW5kcy0+eyRWaWV3fSApIHsKICAgICAgICByZXR1cm4gJEVudi0+e0xheW91dE9iamVjdH0tPkZhdGFsRXJyb3IoCiAgICAgICAgICAgIE1lc3NhZ2UgPT4gIk5vIGNvbmZpZyBvcHRpb24gZm91bmQgZm9yIHRoZSB2aWV3ICckVmlldychIiwKICAgICAgICApOwogICAgfQoKICAgICMgbmF2IGJhcgogICAgbXkgJFN0YXJ0SGl0ID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKAogICAgICAgIFBhcmFtID0+ICdTdGFydEhpdCcsCiAgICApIHx8IDE7CgogICAgIyBjaGVjayBzdGFydCBvcHRpb24sIGlmIGhpZ2hlciB0aGVuIGVsZW1lbnRzIGF2YWlsYWJsZSwgc2V0CiAgICAjIGl0IHRvIHRoZSBsYXN0IG92ZXJ2aWV3IHBhZ2UgKFRoYW5rcyB0byBTdGVmYW4gU2NobWlkdCEpCiAgICBteSAkUGFnZVNob3duID0gJEJhY2tlbmRzLT57JFZpZXd9LT57UGFnZVNob3dufTsKICAgIGlmICggJFN0YXJ0SGl0ID4gJFBhcmFte1RvdGFsfSApIHsKICAgICAgICBteSAkUGFnZXMgPSBpbnQoICggJFBhcmFte1RvdGFsfSAvICRQYWdlU2hvd24gKSArIDAuOTk5OTkgKTsKICAgICAgICAkU3RhcnRIaXQgPSAoICggJFBhZ2VzIC0gMSApICogJFBhZ2VTaG93biApICsgMTsKICAgIH0KCiAgICAjIHNldCBwYWdlIGxpbWl0IGFuZCBidWlsZCBwYWdlIG5hdgogICAgbXkgJExpbWl0ID0gJFBhcmFte0xpbWl0fSB8fCAyMF8wMDA7CiAgICBteSAlUGFnZU5hdiA9ICRFbnYtPntMYXlvdXRPYmplY3R9LT5QYWdlTmF2QmFyKAogICAgICAgIExpbWl0ICAgICA9PiAkTGltaXQsCiAgICAgICAgU3RhcnRIaXQgID0+ICRTdGFydEhpdCwKICAgICAgICBQYWdlU2hvd24gPT4gJFBhZ2VTaG93biwKICAgICAgICBBbGxIaXRzICAgPT4gJFBhcmFte1RvdGFsfSB8fCAwLAogICAgICAgIEFjdGlvbiAgICA9PiAnQWN0aW9uPScgLiAkRW52LT57TGF5b3V0T2JqZWN0fS0+e0FjdGlvbn0sCiAgICAgICAgTGluayAgICAgID0+ICRQYXJhbXtMaW5rUGFnZX0sCiAgICApOwoKICAgICMgYnVpbGQgbmF2YmFyIGNvbnRlbnQKICAgICRFbnYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdPdmVydmlld05hdkJhcicsCiAgICAgICAgRGF0YSA9PiBcJVBhcmFtLAogICAgKTsKCiAgICAjIGJhY2sgbGluawogICAgaWYgKCAkUGFyYW17TGlua0JhY2t9ICkgewogICAgICAgICRFbnYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdOYXZCYXJQYWdlQmFjaycsCiAgICAgICAgICAgIERhdGEgPT4gXCVQYXJhbSwKICAgICAgICApOwogICAgfQoKICAgICMgZ2V0IGZpbHRlcnMKICAgIGlmICggJFBhcmFte0ZpbHRlcnN9ICkgewoKICAgICAgICAjIGdldCBnaXZlbiBmaWx0ZXJzCiAgICAgICAgbXkgQE5hdkJhckZpbHRlcnM7CiAgICAgICAgZm9yIG15ICRQcmlvICggc29ydCBrZXlzICV7ICRQYXJhbXtGaWx0ZXJzfSB9ICkgewogICAgICAgICAgICBwdXNoIEBOYXZCYXJGaWx0ZXJzLCAkUGFyYW17RmlsdGVyc30tPnskUHJpb307CiAgICAgICAgfQoKICAgICAgICAjIGJ1aWxkIGZpbHRlciBjb250ZW50CiAgICAgICAgJEVudi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdPdmVydmlld05hdkJhckZpbHRlcicsCiAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICB9LAogICAgICAgICk7CgogICAgICAgICMgbG9vcCBvdmVyIGZpbHRlcnMKICAgICAgICBteSAkQ291bnQgPSAwOwogICAgICAgIGZvciBteSAkRmlsdGVyIChATmF2QmFyRmlsdGVycykgewoKICAgICAgICAgICAgIyBhdCBsZWFzdCBhIHNlY29uZCBmaWx0ZXIgaXMgc2V0LCBidWlsZCBzcGxpdCBjb250ZW50CiAgICAgICAgICAgIGlmICgkQ291bnQpIHsKICAgICAgICAgICAgICAgICRFbnYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICdPdmVydmlld05hdkJhckZpbHRlckl0ZW1TcGxpdCcsCiAgICAgICAgICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgICAgICAgICAgICAgJXskRmlsdGVyfSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBpbmNyZW1lbnQgZmlsdGVyIGNvdW50IGFuZCBidWlsZCBmaWx0ZXIgaXRlbQogICAgICAgICAgICAkQ291bnQrKzsKICAgICAgICAgICAgJEVudi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtJywKICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgICAgICAgICAleyRGaWx0ZXJ9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICMgZmlsdGVyIGlzIHNlbGVjdGVkCiAgICAgICAgICAgIGlmICggJEZpbHRlci0+e0ZpbHRlcn0gZXEgJFBhcmFte0ZpbHRlcn0gKSB7CiAgICAgICAgICAgICAgICAkRW52LT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU2VsZWN0ZWQnLAogICAgICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICAgICAgICAgICV7JEZpbHRlcn0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgIyBzaG93IGNvdW50IG9mIGVsZW1lbnRzIGluIGZpbHRlcgogICAgICAgICAgICAgICAgaWYgKCBkZWZpbmVkICRGaWx0ZXItPntDb3VudH0gKSB7CiAgICAgICAgICAgICAgICAgICAgJEVudi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICdPdmVydmlld05hdkJhckZpbHRlckl0ZW1TZWxlY3RlZENvdW50JywKICAgICAgICAgICAgICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAleyRGaWx0ZXJ9LAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkRW52LT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU2VsZWN0ZWROb3QnLAogICAgICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICAgICAgICAgICV7JEZpbHRlcn0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgIyBzaG93IGNvdW50IG9mIGVsZW1lbnRzIGluIGZpbHRlcgogICAgICAgICAgICAgICAgaWYgKCBkZWZpbmVkICRGaWx0ZXItPntDb3VudH0gKSB7CiAgICAgICAgICAgICAgICAgICAgJEVudi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICdPdmVydmlld05hdkJhckZpbHRlckl0ZW1TZWxlY3RlZE5vdENvdW50JywKICAgICAgICAgICAgICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAleyRGaWx0ZXJ9LAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgIyBsb29wIG92ZXIgY29uZmlndXJlZCBiYWNrZW5kcwogICAgZm9yIG15ICRCYWNrZW5kICgga2V5cyAleyRCYWNrZW5kc30gKSB7CgogICAgICAgICMgYnVpbGQgbmF2YmFyIHZpZXcgbW9kZQogICAgICAgICRFbnYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdOYXZCYXJWaWV3TW9kZScsCiAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAgICAgJXsgJEJhY2tlbmRzLT57JEJhY2tlbmR9IH0sCiAgICAgICAgICAgICAgICBGaWx0ZXIgPT4gJFBhcmFte0ZpbHRlcn0sCiAgICAgICAgICAgICAgICBWaWV3ICAgPT4gJEJhY2tlbmQsCiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKCiAgICAgICAgIyBjdXJyZW50IHZpZXcgaXMgY29uZmlndXJlZCBpbiBiYWNrZW5kCiAgICAgICAgaWYgKCAkVmlldyBlcSAkQmFja2VuZCApIHsKICAgICAgICAgICAgJEVudi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdOYXZCYXJWaWV3TW9kZVNlbGVjdGVkJywKICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgICAgICAgICAleyAkQmFja2VuZHMtPnskQmFja2VuZH0gfSwKICAgICAgICAgICAgICAgICAgICBGaWx0ZXIgPT4gJFBhcmFte0ZpbHRlcn0sCiAgICAgICAgICAgICAgICAgICAgVmlldyAgID0+ICRCYWNrZW5kLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRFbnYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ092ZXJ2aWV3TmF2QmFyVmlld01vZGVOb3RTZWxlY3RlZCcsCiAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICAgICAgJXsgJEJhY2tlbmRzLT57JEJhY2tlbmR9IH0sCiAgICAgICAgICAgICAgICAgICAgRmlsdGVyID0+ICRQYXJhbXtGaWx0ZXJ9LAogICAgICAgICAgICAgICAgICAgIFZpZXcgICA9PiAkQmFja2VuZCwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQoKICAgICMgY2hlY2sgaWYgcGFnZSBuYXYgaXMgYXZhaWxhYmxlCiAgICBpZiAoJVBhZ2VOYXYpIHsKICAgICAgICAkRW52LT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgIE5hbWUgPT4gJ092ZXJ2aWV3TmF2QmFyUGFnZU5hdkJhcicsCiAgICAgICAgICAgIERhdGEgPT4gXCVQYWdlTmF2LAogICAgICAgICk7CiAgICB9CgogICAgIyBjaGVjayBpZiBuYXYgYmFyIGlzIGF2YWlsYWJsZQogICAgaWYgKCAkUGFyYW17TmF2QmFyfSApIHsKICAgICAgICBpZiAoICRQYXJhbXtOYXZCYXJ9LT57TWFpbk5hbWV9ICkgewogICAgICAgICAgICAkRW52LT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgICAgICBOYW1lID0+ICdPdmVydmlld05hdkJhck1haW4nLAogICAgICAgICAgICAgICAgRGF0YSA9PiAkUGFyYW17TmF2QmFyfSwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CgogICAgIyBidWlsZCBodG1sIGNvbnRlbnQKICAgIG15ICRPdXRwdXROYXZCYXIgPSAkRW52LT57TGF5b3V0T2JqZWN0fS0+T3V0cHV0KAogICAgICAgIFRlbXBsYXRlRmlsZSA9PiAnQWdlbnRJVFNNQ2hhbmdlT3ZlcnZpZXdOYXZCYXInLAogICAgICAgIERhdGEgICAgICAgICA9PiB7JVBhcmFtfSwKICAgICk7CgogICAgIyBjcmVhdGUgb3V0cHV0CiAgICBteSAkT3V0cHV0UmF3ID0gJyc7CiAgICBpZiAoICEkUGFyYW17T3V0cHV0fSApIHsKICAgICAgICAkRW52LT57TGF5b3V0T2JqZWN0fS0+UHJpbnQoCiAgICAgICAgICAgIE91dHB1dCA9PiBcJE91dHB1dE5hdkJhciwKICAgICAgICApOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgJE91dHB1dFJhdyAuPSAkT3V0cHV0TmF2QmFyOwogICAgfQoKICAgICMgbG9hZCBtb2R1bGUKICAgIGlmICggISRTZWxmLT57TWFpbk9iamVjdH0tPlJlcXVpcmUoICRCYWNrZW5kcy0+eyRWaWV3fS0+e01vZHVsZX0gKSApIHsKICAgICAgICByZXR1cm4gJEVudi0+e0xheW91dE9iamVjdH0tPkZhdGFsRXJyb3IoKTsKICAgIH0KCiAgICAjIGNoZWNrIGZvciBiYWNrZW5kIG9iamVjdAogICAgbXkgJE9iamVjdCA9ICRCYWNrZW5kcy0+eyRWaWV3fS0+e01vZHVsZX0tPm5ldyggJXskRW52fSApOwogICAgcmV0dXJuIGlmICEkT2JqZWN0OwoKICAgICMgcnVuIG1vZHVsZQogICAgbXkgJE91dHB1dCA9ICRPYmplY3QtPlJ1bigKICAgICAgICAlUGFyYW0sCiAgICAgICAgTGltaXQgICAgID0+ICRMaW1pdCwKICAgICAgICBTdGFydEhpdCAgPT4gJFN0YXJ0SGl0LAogICAgICAgIFBhZ2VTaG93biA9PiAkUGFnZVNob3duLAogICAgICAgIEFsbEhpdHMgICA9PiAkUGFyYW17VG90YWx9IHx8IDAsCiAgICAgICAgRnJvbnRlbmQgID0+ICRGcm9udGVuZCwKICAgICk7CgogICAgIyBjcmVhdGUgb3V0cHV0CiAgICBpZiAoICEkUGFyYW17T3V0cHV0fSApIHsKICAgICAgICAkRW52LT57TGF5b3V0T2JqZWN0fS0+UHJpbnQoCiAgICAgICAgICAgIE91dHB1dCA9PiBcJE91dHB1dCwKICAgICAgICApOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgJE91dHB1dFJhdyAuPSAkT3V0cHV0OwogICAgfQoKICAgICMgY3JlYXRlIG92ZXJ2aWV3IG5hdiBiYXIKICAgICRFbnYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdPdmVydmlld05hdkJhcicsCiAgICAgICAgRGF0YSA9PiB7JVBhcmFtfSwKICAgICk7CgogICAgIyBjaGVjayBmb3IgcGFnZSBuYXYgYW5kIGNyZWF0ZSBjb250ZW50CiAgICBpZiAoJVBhZ2VOYXYpIHsKICAgICAgICAkRW52LT57TGF5b3V0T2JqZWN0fS0+QmxvY2soCiAgICAgICAgICAgIE5hbWUgPT4gJ092ZXJ2aWV3TmF2QmFyUGFnZU5hdkJhcicsCiAgICAgICAgICAgIERhdGEgPT4geyVQYWdlTmF2fSwKICAgICAgICApOwogICAgfQoKICAgICMgY3JlYXRlIHNtYWwgbmF2IGJhcgogICAgbXkgJE91dHB1dE5hdkJhclNtYWxsID0gJEVudi0+e0xheW91dE9iamVjdH0tPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50SVRTTUNoYW5nZU92ZXJ2aWV3TmF2QmFyU21hbGwnLAogICAgICAgIERhdGEgICAgICAgICA9PiB7JVBhcmFtfSwKICAgICk7CgogICAgIyBjcmVhdGUgb3V0cHV0CiAgICBpZiAoICEkUGFyYW17T3V0cHV0fSApIHsKICAgICAgICAkRW52LT57TGF5b3V0T2JqZWN0fS0+UHJpbnQoCiAgICAgICAgICAgIE91dHB1dCA9PiBcJE91dHB1dE5hdkJhclNtYWxsLAogICAgICAgICk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkT3V0cHV0UmF3IC49ICRPdXRwdXROYXZCYXJTbWFsbDsKICAgIH0KCiAgICAjIHJldHVybiBjb250ZW50IGlmIGF2YWlsYWJsZQogICAgcmV0dXJuICRPdXRwdXRSYXc7Cn0KCj1pdGVtIFJlbW92ZUFKQVhMb2FkaW5nSW1hZ2UoKQoKQSBtZXRob2QgdGhhdCByZW1vdmVzIGFsbCBBSkFYIGxvYWRpbmcgaW1hZ2VzIGZyb20gYSBnaXZlbiBodG1sIHN0cmluZy4KUmV0dXJucyB0aGUgc3RyaW5nIHdpdGhvdXQgYW55IEFKQVggbG9hZGluZyBpbWFnZXMuClRoaXMgaXMgdXNlZnVsIHRvIGF2b2lkIHRoZSBmbGlja2VyaW5nIGppdHRlciBlZmZlY3RvZiBzZWxlY3Rpb24gZmllbGRzLAppZiB0aGUgY29udGVudCBpcyB1cGRhdGVkIHZpYSBBSkFYLgoKICAgIG15ICRDbGVhbmVkSFRNTFN0cmluZyA9ICRMYXlvdXRPYmplY3QtPlJlbW92ZUFKQVhMb2FkaW5nSW1hZ2UoCiAgICAgICAgSFRNTFN0cmluZyA9PiAnQSBIVE1MIHN0cmluZyBhcyByZXR1cm5lZCBmcm9tIEJ1aWxkU2VsZWN0aW9uJywKICAgICk7Cgo9Y3V0CgpzdWIgUmVtb3ZlQUpBWExvYWRpbmdJbWFnZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IHRoZSBvcmlnaW5hbCBIVE1MIHN0cmluZwogICAgbXkgJENsZWFuZWRIVE1MU3RyaW5nID0gJFBhcmFte0hUTUxTdHJpbmd9IHx8ICcnOwoKICAgICMgcmVtb3ZlIGFsbCBBSkFYLUxvYWRpbmcgaW1hZ2VzIHRvIGF2b2lkIGppdHRlciBlZmZlY3QKICAgICRDbGVhbmVkSFRNTFN0cmluZyA9fiBzeyA8YSBbIF0gaWQ9IkFKQVhJbWFnZSBbXjw+XSsgIj48L2E+IH17fXhtc2c7CgogICAgcmV0dXJuICRDbGVhbmVkSFRNTFN0cmluZzsKfQoKPWJlZ2luIEludGVybmFsOgoKPWl0ZW0gX0lUU01DaGFuZ2VHZXRDaGFuZ2VUaWNrcygpCgphIGhlbHBlciBtZXRob2QgZm9yIHRoZSB3b3Jrb3JkZXIgZ3JhcGggb2YgYSBjaGFuZ2UKCj1jdXQKCnN1YiBfSVRTTUNoYW5nZUdldENoYW5nZVRpY2tzIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBmb3Igc3RhcnQgYW5kIGVuZAogICAgcmV0dXJuIGlmICEkUGFyYW17U3RhcnR9IHx8ICEkUGFyYW17RW5kfTsKCiAgICAjIG1ha2Ugc3VyZSB3ZSBnb3QgaW50ZWdlcnMKICAgIHJldHVybiBpZiAkUGFyYW17U3RhcnR9ICF+IG17IFxBIFxkKyBceiB9eG1zOwogICAgcmV0dXJuIGlmICRQYXJhbXtFbmR9ICF+IG17IFxBIFxkKyBceiB9eG1zOwoKICAgICMgY2FsY3VsYXRlIHRpbWUgc3BhbiBpbiBzZWMKICAgIG15ICRUaWNrcyA9ICRQYXJhbXtFbmR9IC0gJFBhcmFte1N0YXJ0fTsKCiAgICAjIGNoZWNrIGZvciBjb21wdXRpbmcgZXJyb3IKICAgIHJldHVybiBpZiAkVGlja3MgPD0gMDsKCiAgICAjIGdldCBzZWNvbmRzIHBlciBwZXJjZW50IGFuZCByb3VuZCBkb3duCiAgICAkVGlja3MgPSBzcHJpbnRmKCAiJS5mIiwgJFRpY2tzIC8gMTAwICk7CgogICAgcmV0dXJuICRUaWNrczsKfQoKPWl0ZW0gX0lUU01DaGFuZ2VHZXRDaGFuZ2VTY2FsZSgpCgphIGhlbHBlciBtZXRob2QgZm9yIHRoZSB3b3Jrb3JkZXIgZ3JhcGggb2YgYSBjaGFuZ2UKCj1jdXQKCnN1YiBfSVRTTUNoYW5nZUdldENoYW5nZVNjYWxlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBmb3Igc3RhcnQgdGltZQogICAgcmV0dXJuIGlmICEkUGFyYW17U3RhcnRUaW1lfTsKCiAgICAjIGNoZWNrIGZvciBzdGFydCB0aW1lIGlzIGFuIGludGVnZXIgdmFsdWUKICAgIHJldHVybiBpZiAkUGFyYW17U3RhcnRUaW1lfSAhfiBteyBcQSBcZCsgXHogfXhtczsKCiAgICAjIGFkZCBzdGFydCBhbmQgZW5kIHRpbWUgYW5kIGNhbGN1bGF0ZSBzY2FsZSBuYW1pbmcKICAgIG15ICVTY2FsZU5hbWUgPSAoCiAgICAgICAgU3RhcnRUaW1lID0+ICRQYXJhbXtTdGFydFRpbWV9LAogICAgICAgIEVuZFRpbWUgICA9PiAkUGFyYW17RW5kVGltZX0sCiAgICAgICAgc2NhbGVfMTUgID0+ICggJFBhcmFte1N0YXJ0VGltZX0gKyAyMCAqICRQYXJhbXtUaWNrc30gKSwKICAgICAgICBzY2FsZV8zNSAgPT4gKCAkUGFyYW17U3RhcnRUaW1lfSArIDQwICogJFBhcmFte1RpY2tzfSApLAogICAgICAgIHNjYWxlXzU1ICA9PiAoICRQYXJhbXtTdGFydFRpbWV9ICsgNjAgKiAkUGFyYW17VGlja3N9ICksCiAgICAgICAgc2NhbGVfNzUgID0+ICggJFBhcmFte1N0YXJ0VGltZX0gKyA4MCAqICRQYXJhbXtUaWNrc30gKSwKICAgICk7CgogICAgIyB0cmFuc2xhdGUgdGltZXN0YW1wcyBpbiBkYXRlIGZvcm1hdAogICAgbWFwIHsKICAgICAgICAkU2NhbGVOYW1leyRffSA9ICRTZWxmLT57VGltZU9iamVjdH0tPlN5c3RlbVRpbWUyVGltZVN0YW1wKAogICAgICAgICAgICBTeXN0ZW1UaW1lID0+ICRTY2FsZU5hbWV7JF99CiAgICAgICAgICAgICkKICAgIH0ga2V5cyAlU2NhbGVOYW1lOwoKICAgICMgY3JlYXRlIHNjYWxlIGJsb2NrCiAgICAkU2VsZi0+QmxvY2soCiAgICAgICAgTmFtZSA9PiAnU2NhbGUnLAogICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAlU2NhbGVOYW1lLAogICAgICAgIH0sCiAgICApOwoKICAgIElOVEVSVkFMOgogICAgZm9yIG15ICRJbnRlcnZhbCAoIHNvcnQga2V5cyAlU2NhbGVOYW1lICkgewoKICAgICAgICAjIGRvIG5vdCBkaXNwbGF5IHNjYWxlIGlmIHRyYW5zbGF0aW5nIGZhaWxlZAogICAgICAgIG5leHQgSU5URVJWQUwgaWYgISRTY2FsZU5hbWV7JEludGVydmFsfTsKCiAgICAgICAgIyBkbyBub3QgZGlzcGxheSBzdGFydCBvciBlbmQKICAgICAgICBuZXh0IElOVEVSVkFMIGlmICRJbnRlcnZhbCA9fiBteyBcQSAoIFN0YXJ0IHwgRW5kICkgVGltZSBceiB9eG1zOwoKICAgICAgICAjIGJ1aWxkIHNjYWxlIGxhYmVsIGJsb2NrCiAgICAgICAgJFNlbGYtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdTY2FsZUxhYmVsJywKICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICBTY2FsZUxhYmVsID0+ICRTY2FsZU5hbWV7JEludGVydmFsfSwKICAgICAgICAgICAgICAgIFNjYWxlQ2xhc3MgPT4gJEludGVydmFsLAogICAgICAgICAgICB9LAogICAgICAgICk7CiAgICB9Cn0KCj1pdGVtIF9JVFNNQ2hhbmdlR2V0V29ya09yZGVyR3JhcGgoKQoKYSBoZWxwZXIgbWV0aG9kIGZvciB0aGUgd29ya29yZGVyIGdyYXBoIG9mIGEgY2hhbmdlCgo9Y3V0CgpzdWIgX0lUU01DaGFuZ2VHZXRXb3JrT3JkZXJHcmFwaCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgZm9yIHdvcmtvcmRlcgogICAgcmV0dXJuIGlmICEkUGFyYW17V29ya09yZGVyfTsKCiAgICAjIGV4dHJhY3Qgd29ya29yZGVyCiAgICBteSAkV29ya09yZGVyID0gJFBhcmFte1dvcmtPcmRlcn07CgogICAgIyBzYXZlIG9yaWcgd29ya29yZGVyIGZvciB3b3Jrb3JkZXIgaW5mb3JtYXRpb24KICAgIG15ICVXb3JrT3JkZXJJbmZvcm1hdGlvbiA9ICV7JFdvcmtPcmRlcn07CgogICAgIyB0cmFuc2xhdGUgd29ya29yZGVyIHR5cGUKICAgICRXb3JrT3JkZXItPntUcmFuc2xhdGVkV29ya09yZGVyVHlwZX0KICAgICAgICA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoICRXb3JrT3JkZXItPntXb3JrT3JkZXJUeXBlfSApOwoKICAgICMgYnVpbGQgbGFiZWwgZm9yIGxpbmsgaW4gZ3JhcGgKICAgICRXb3JrT3JkZXItPntXb3JrT3JkZXJMYWJlbH0KICAgICAgICA9ICJUaXRsZTogJFdvcmtPcmRlci0+e1dvcmtPcmRlclRpdGxlfSB8IFR5cGU6ICRXb3JrT3JkZXItPntUcmFuc2xhdGVkV29ya09yZGVyVHlwZX0iOwoKICAgICMgY3JlYXRlIHdvcmtvcmRlciBpdGVtCiAgICAkU2VsZi0+QmxvY2soCiAgICAgICAgTmFtZSA9PiAnV29ya09yZGVySXRlbScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICV7JFdvcmtPcmRlcn0sCiAgICAgICAgfSwKICAgICk7CgogICAgIyBjaGVjayBpZiB0aWNrcyBhcmUgY2FsY3VsYXRlZAogICAgcmV0dXJuIGlmICEkUGFyYW17VGlja3N9OwoKICAgICMgc2V0IHBsYW5uZWQgaWYgbm8gYWN0dWFsIHRpbWUgaXMgc2V0CiAgICBpZiAoICEkV29ya09yZGVyLT57QWN0dWFsU3RhcnRUaW1lfSApIHsKICAgICAgICAkV29ya09yZGVyLT57QWN0dWFsU3RhcnRUaW1lfSA9ICRXb3JrT3JkZXItPntQbGFubmVkU3RhcnRUaW1lfTsKICAgICAgICAkV29ya09yZGVyLT57QWN0dWFsRW5kVGltZX0gICA9ICRXb3JrT3JkZXItPntQbGFubmVkRW5kVGltZX07CiAgICB9CgogICAgIyBzZXQgY3VycmVudCB0aW1lIGlmIG5vIGFjdHVhbCBlbmQgdGltZSBpcyBzZXQKICAgIGlmICggJFdvcmtPcmRlci0+e0FjdHVhbFN0YXJ0VGltZX0gJiYgISRXb3JrT3JkZXItPntBY3R1YWxFbmRUaW1lfSApIHsKICAgICAgICAkV29ya09yZGVyLT57QWN0dWFsRW5kVGltZX0gPSAkU2VsZi0+e1RpbWVPYmplY3R9LT5DdXJyZW50VGltZXN0YW1wKCk7CiAgICB9CgogICAgIyBzZXQgbmljZSBkaXNwbGF5IG9mIHVuZGVmIGFjdHVhbCB0aW1lcwogICAgZm9yIG15ICRUaW1lVHlwZSAocXcoQWN0dWFsU3RhcnRUaW1lIEFjdHVhbEVuZFRpbWUpKSB7CiAgICAgICAgaWYgKCAhJFdvcmtPcmRlckluZm9ybWF0aW9ueyRUaW1lVHlwZX0gKSB7CiAgICAgICAgICAgICRXb3JrT3JkZXJJbmZvcm1hdGlvbnsiRW1wdHkke1RpbWVUeXBlfSJ9ID0gJy0nOwogICAgICAgIH0KICAgIH0KCiAgICAjIGhhc2ggZm9yIHRpbWUgdmFsdWVzCiAgICBteSAlVGltZTsKCiAgICBmb3IgbXkgJFRpbWVUeXBlIChxdyhQbGFubmVkU3RhcnRUaW1lIFBsYW5uZWRFbmRUaW1lIEFjdHVhbFN0YXJ0VGltZSBBY3R1YWxFbmRUaW1lKSkgewoKICAgICAgICAjIHRyYW5zbGF0ZSB0aW1lCiAgICAgICAgJFRpbWV7JFRpbWVUeXBlfSA9ICRTZWxmLT57VGltZU9iamVjdH0tPlRpbWVTdGFtcDJTeXN0ZW1UaW1lKAogICAgICAgICAgICBTdHJpbmcgPT4gJFdvcmtPcmRlci0+eyRUaW1lVHlwZX0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGRldGVybWluZSBsZW5ndGggb2Ygd29ya29yZGVyCiAgICBteSAlVGlja1ZhbHVlOwoKICAgIGZvciBteSAkVGltZVR5cGUgKHF3KCBQbGFubmVkIEFjdHVhbCApKSB7CgogICAgICAgICMgZ2V0IHZhbHVlcyBmb3IgcGFkZGluZyBzcGFuCiAgICAgICAgbXkgJFN0YXJ0UGFkZGluZyA9IHNwcmludGYoCiAgICAgICAgICAgICIlLjFmIiwKICAgICAgICAgICAgKCAkVGltZXsiJHtUaW1lVHlwZX1TdGFydFRpbWUifSAtICRQYXJhbXtTdGFydFRpbWV9ICkgLyAkUGFyYW17VGlja3N9CiAgICAgICAgKTsKICAgICAgICAkU3RhcnRQYWRkaW5nID0gKCAkU3RhcnRQYWRkaW5nIDw9IDAgKSAgID8gMCAgICA6ICRTdGFydFBhZGRpbmc7CiAgICAgICAgJFN0YXJ0UGFkZGluZyA9ICggJFN0YXJ0UGFkZGluZyA+PSAxMDAgKSA/IDk5LjkgOiAkU3RhcnRQYWRkaW5nOwogICAgICAgICRUaWNrVmFsdWV7IiR7VGltZVR5cGV9UGFkZGluZyJ9ID0gJFN0YXJ0UGFkZGluZzsKCiAgICAgICAgIyBnZXQgdmFsdWVzIGZvciB0cmFpbGluZyBzcGFuCiAgICAgICAgbXkgJEVuZFRyYWlsaW5nCiAgICAgICAgICAgID0gc3ByaW50ZiggIiUuMWYiLCAoICRQYXJhbXtFbmRUaW1lfSAtICRUaW1leyIke1RpbWVUeXBlfUVuZFRpbWUifSApIC8gJFBhcmFte1RpY2tzfSApOwogICAgICAgICRFbmRUcmFpbGluZyA9ICggJEVuZFRyYWlsaW5nIDw9IDAgKSAgID8gMCAgICA6ICRFbmRUcmFpbGluZzsKICAgICAgICAkRW5kVHJhaWxpbmcgPSAoICRFbmRUcmFpbGluZyA+PSAxMDAgKSA/IDk5LjkgOiAkRW5kVHJhaWxpbmc7CiAgICAgICAgJFRpY2tWYWx1ZXsiJHtUaW1lVHlwZX1UcmFpbGluZyJ9ID0gJEVuZFRyYWlsaW5nOwoKICAgICAgICAjIGdldCB2YWx1ZXMgZm9yIGRpc3BsYXkgc3BhbgogICAgICAgIG15ICRUaW1lVGlja3MKICAgICAgICAgICAgPSAxMDAgLSAoICRUaWNrVmFsdWV7IiR7VGltZVR5cGV9UGFkZGluZyJ9ICsgJFRpY2tWYWx1ZXsiJHtUaW1lVHlwZX1UcmFpbGluZyJ9ICk7CiAgICAgICAgJFRpbWVUaWNrcyA9ICggJFRpbWVUaWNrcyA8PSAwICkgICA/IDAuMSAgOiAkVGltZVRpY2tzOwogICAgICAgICRUaW1lVGlja3MgPSAoICRUaW1lVGlja3MgPj0gMTAwICkgPyA5OS45IDogJFRpbWVUaWNrczsKICAgICAgICAkVGlja1ZhbHVleyIke1RpbWVUeXBlfVRpY2tzIn0gPSBzcHJpbnRmKCAiJS4xZiIsICRUaW1lVGlja3MgKTsKICAgIH0KCiAgICAjIHNldCB3b3Jrb3JkZXIgYXMgaW5hY3RpdmUgaWYgaXQgaXMgbm90IHN0YXJ0ZWQgamV0CiAgICBpZiAoICEkV29ya09yZGVySW5mb3JtYXRpb257QWN0dWFsU3RhcnRUaW1lfSApIHsKICAgICAgICAkV29ya09yZGVySW5mb3JtYXRpb257V29ya09yZGVyT3BhY2l0eX0gPSAnaW5hY3RpdmUnOwogICAgfQoKICAgICMgc2V0IHdvcmtvcmRlciBhZ2VudAogICAgaWYgKCAkV29ya09yZGVySW5mb3JtYXRpb257V29ya09yZGVyQWdlbnRJRH0gKSB7CiAgICAgICAgbXkgJVdvcmtPcmRlckFnZW50RGF0YSA9ICRTZWxmLT57VXNlck9iamVjdH0tPkdldFVzZXJEYXRhKAogICAgICAgICAgICBVc2VySUQgPT4gJFdvcmtPcmRlckluZm9ybWF0aW9ue1dvcmtPcmRlckFnZW50SUR9LAogICAgICAgICAgICBDYWNoZWQgPT4gMSwKICAgICAgICApOwoKICAgICAgICBpZiAoJVdvcmtPcmRlckFnZW50RGF0YSkgewoKICAgICAgICAgICAgIyBnZXQgV29ya09yZGVyQWdlbnQgaW5mb3JtYXRpb24KICAgICAgICAgICAgZm9yIG15ICRQb3N0Zml4IChxdyhVc2VyTG9naW4gVXNlckZpcnN0bmFtZSBVc2VyTGFzdG5hbWUpKSB7CiAgICAgICAgICAgICAgICAkV29ya09yZGVySW5mb3JtYXRpb257IldvcmtPcmRlckFnZW50JFBvc3RmaXgifSA9ICRXb3JrT3JkZXJBZ2VudERhdGF7JFBvc3RmaXh9CiAgICAgICAgICAgICAgICAgICAgfHwgJyc7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgIyBjcmVhdGUgZ3JhcGggb2Ygd29ya29yZGVyIGl0ZW0KICAgICRTZWxmLT5CbG9jaygKICAgICAgICBOYW1lID0+ICdXb3JrT3JkZXJJdGVtR3JhcGgnLAogICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAlV29ya09yZGVySW5mb3JtYXRpb24sCiAgICAgICAgICAgICVUaWNrVmFsdWUsCiAgICAgICAgfSwKICAgICk7CgogICAgIyBjaGVjayB0aGUgbGFzdCB0aGluZzogVXNlckxvZ2luCiAgICBpZiAoICRXb3JrT3JkZXJJbmZvcm1hdGlvbntXb3JrT3JkZXJBZ2VudFVzZXJMb2dpbn0gKSB7CiAgICAgICAgJFNlbGYtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdXb3JrT3JkZXJBZ2VudCcsCiAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgJVdvcmtPcmRlckluZm9ybWF0aW9uLAogICAgICAgICAgICB9LAogICAgICAgICk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkU2VsZi0+QmxvY2soCiAgICAgICAgICAgIE5hbWUgPT4gJ0VtcHR5V29ya09yZGVyQWdlbnQnLAogICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICVXb3JrT3JkZXJJbmZvcm1hdGlvbiwKICAgICAgICAgICAgfSwKICAgICAgICApOwogICAgfQp9Cgo9aXRlbSBfSVRTTUNoYW5nZUdldFRpbWVMaW5lKCkKCmEgaGVscGVyIG1ldGhvZCBmb3IgdGhlIHdvcmtvcmRlciBncmFwaCBvZiBhIGNoYW5nZQoKPWN1dAoKc3ViIF9JVFNNQ2hhbmdlR2V0VGltZUxpbmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIGZvciBzdGFydCB0aW1lCiAgICByZXR1cm4gaWYgISRQYXJhbXtTdGFydFRpbWV9OwoKICAgICMgY2hlY2sgZm9yIHN0YXJ0IHRpbWUgaXMgYW4gaW50ZWdlciB2YWx1ZQogICAgcmV0dXJuIGlmICRQYXJhbXtTdGFydFRpbWV9ICF+IG17IFxBIFxkKyBceiB9eG1zOwoKICAgICMgY2hlY2sgZm9yIGVuZCB0aW1lCiAgICByZXR1cm4gaWYgISRQYXJhbXtFbmRUaW1lfTsKCiAgICAjIGNoZWNrIGZvciBlbmQgdGltZSBpcyBhbiBpbnRlZ2VyIHZhbHVlCiAgICByZXR1cm4gaWYgJFBhcmFte0VuZFRpbWV9ICF+IG17IFxBIFxkKyBceiB9eG1zOwoKICAgICMgY2hlY2sgZm9yIHRpY2tzCiAgICByZXR1cm4gaWYgISRQYXJhbXtUaWNrc307CgogICAgIyBjaGVjayBmb3IgdGlja3MgaXMgYW4gaW50ZWdlciB2YWx1ZQogICAgcmV0dXJuIGlmICRQYXJhbXtUaWNrc30gIX4gbXsgXEEgXGQrIFx6IH14bXM7CgogICAgIyBnZXQgY3VycmVudCBzeXN0ZW0gdGltZQogICAgbXkgJEN1cnJlbnRUaW1lID0gJFNlbGYtPntUaW1lT2JqZWN0fS0+U3lzdGVtVGltZSgpOwoKICAgICMgY2hlY2sgZm9yIHN5c3RlbSB0aW1lCiAgICByZXR1cm4gaWYgISRDdXJyZW50VGltZTsKCiAgICAjIGNoZWNrIGlmIGN1cnJlbnQgdGltZSBpcyBpbiBjaGFuZ2UgdGltZSBpbnRlcnZhbAogICAgcmV0dXJuIGlmICRDdXJyZW50VGltZSA8ICRQYXJhbXtTdGFydFRpbWV9OwogICAgcmV0dXJuIGlmICRDdXJyZW50VGltZSA+ICRQYXJhbXtFbmRUaW1lfTsKCiAgICAjIHRpbWUgbGluZSBkYXRhCiAgICBteSAlVGltZUxpbmU7CgogICAgIyBjYWxjdWxhdGUgcGVyY2VudCBvZiB0aW1lbGluZQogICAgbXkgJFJlbGF0aXZlRW5kICAgPSAkUGFyYW17RW5kVGltZX0gLSAkUGFyYW17U3RhcnRUaW1lfTsKICAgIG15ICRSZWxhdGl2ZVN0YXJ0ID0gJEN1cnJlbnRUaW1lIC0gJFBhcmFte1N0YXJ0VGltZX07CgogICAgIyBnZXQgdGltZWxpbmUgaW5kZW50IHdpdGggMSBkaWdpdCBhZnRlciBkZWNpbWFsIHBvaW50CiAgICAkVGltZUxpbmV7VGltZUxpbmVMZWZ0fSA9IHNwcmludGYoICIlLjFmIiwgKCAkUmVsYXRpdmVTdGFydCAvICRSZWxhdGl2ZUVuZCApICogMTAwICk7CgogICAgIyB2ZXJpZnkgcGVyY2VudCB2YWx1ZXMKICAgIGlmICggJFRpbWVMaW5le1RpbWVMaW5lTGVmdH0gPD0gMCApIHsKICAgICAgICAkVGltZUxpbmV7VGltZUxpbmVMZWZ0fSA9IDA7CiAgICB9CiAgICBpZiAoICRUaW1lTGluZXtUaW1lTGluZUxlZnR9ID49IDEwMCApIHsKICAgICAgICAkVGltZUxpbmV7VGltZUxpbmVMZWZ0fSA9IDk5Ljk7CiAgICB9CgogICAgcmV0dXJuIFwlVGltZUxpbmU7Cn0KCj1lbmQgSW50ZXJuYWw6Cgo9YmFjawoKPWN1dAoKMTsK</File>
        <File Location="Kernel/Output/HTML/LayoutITSMTemplate.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/LinkObjectITSMChange.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/LinkObjectITSMWorkOrder.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/NavBarChangeManager.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9OYXZCYXJDaGFuZ2VNYW5hZ2VyLnBtCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBOYXZCYXJDaGFuZ2VNYW5hZ2VyLnBtLHYgMS40IDIwMTAvMDQvMjcgMjA6Mzk6MDIgdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6Ok5hdkJhckNoYW5nZU1hbmFnZXI7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjQgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIChxdyhDb25maWdPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IFRpY2tldE9iamVjdCBHcm91cE9iamVjdCBMYXlvdXRPYmplY3QgVXNlcklEKSkgewogICAgICAgICRTZWxmLT57JF99ID0gJFBhcmFteyRffSB8fCBkaWUgIkdvdCBubyAkXyEiOwogICAgfQoKICAgICMgY3JlYXRlIG5lZWRlZCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZS0+bmV3KCVQYXJhbSk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBkZWZpbmUgYWN0aW9uLCBncm91cCwgbGFiZWwsIGltYWdlIGFuZCBwcmlvCiAgICBteSAkQWN0aW9uID0gJ0FnZW50SVRTTUNoYW5nZU1hbmFnZXInOwogICAgbXkgJEdyb3VwICA9ICdpdHNtLWNoYW5nZS1tYW5hZ2VyJzsKICAgIG15ICRMYWJlbCAgPSAnQ2hhbmdlTWFuYWdlcic7CiAgICBteSAkSW1hZ2UgID0gJ25ldy1tZXNzYWdlLnBuZyc7CiAgICBteSAkUHJpbyAgID0gJzA5OTEwMDAnOwoKICAgICMgZ2V0IGNvbmZpZyBvZiBmcm9udGVuZCBtb2R1bGUKICAgIG15ICRDb25maWcgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTUNoYW5nZTo6RnJvbnRlbmQ6OiRBY3Rpb24iKTsKCiAgICAjIGdldCB0aGUgZ3JvdXAgaWQKICAgIG15ICRHcm91cElEID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTG9va3VwKCBHcm91cCA9PiAkR3JvdXAgKTsKCiAgICAjIGRlbnkgYWNjZXNzLCB3aGVuIHRoZSBncm91cCBpcyBub3QgZm91bmQKICAgIHJldHVybiBpZiAhJEdyb3VwSUQ7CgogICAgIyBnZXQgdXNlciBncm91cHMsIHdoZXJlIHRoZSB1c2VyIGhhcyB0aGUgYXBwcm9wcmlhdGUgcHJpdmlsZWdlCiAgICBteSAlR3JvdXBzID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgIFR5cGUgICA9PiAkQ29uZmlnLT57UGVybWlzc2lvbn0sCiAgICAgICAgUmVzdWx0ID0+ICdIQVNIJywKICAgICAgICBDYWNoZWQgPT4gMSwKICAgICk7CgogICAgIyBkZW55IGFjY2VzcyBpZiB0aGUgYWdlbnQgZG9lc24ndCBoYXZlIHRoZSBhcHByb3ByaWF0ZSB0eXBlIGluIHRoZSBhcHByb3ByaWF0ZSBncm91cAogICAgcmV0dXJuIGlmICEkR3JvdXBzeyRHcm91cElEfTsKCiAgICAjIGRvIG5vdCBzaG93IGljb24gaWYgZnJvbnRlbmQgbW9kdWxlIGlzIG5vdCByZWdpc3RlcmVkCiAgICByZXR1cm4gaWYgISRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdGcm9udGVuZDo6TW9kdWxlJyktPnskQWN0aW9ufTsKCiAgICAjIGdldCB0aGUgbnVtYmVyIG9mIHZpZXdhYmxlIGNoYW5nZXMKICAgIG15ICRDb3VudCA9IDA7CiAgICBpZiAoICRDb25maWctPnsnRmlsdGVyOjpDaGFuZ2VTdGF0ZXMnfSAmJiBAeyAkQ29uZmlnLT57J0ZpbHRlcjo6Q2hhbmdlU3RhdGVzJ30gfSApIHsKCiAgICAgICAgIyBjb3VudCB0aGUgbnVtYmVyIG9mIHZpZXdhYmxlIGNoYW5nZXMKICAgICAgICAkQ291bnQgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZVNlYXJjaCgKICAgICAgICAgICAgQ2hhbmdlTWFuYWdlcklEcyA9PiBbICRTZWxmLT57VXNlcklEfSBdLAogICAgICAgICAgICBDaGFuZ2VTdGF0ZXMgICAgID0+ICRDb25maWctPnsnRmlsdGVyOjpDaGFuZ2VTdGF0ZXMnfSwKICAgICAgICAgICAgTGltaXQgICAgICAgICAgICA9PiAxMDAwLAogICAgICAgICAgICBSZXN1bHQgICAgICAgICAgID0+ICdDT1VOVCcsCiAgICAgICAgICAgIFVzZXJJRCAgICAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICk7CiAgICB9CgogICAgIyBidWlsZCBpY29uIGxhYmVsCiAgICBteSAkVGV4dCA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCRMYWJlbCkgLiAiICgkQ291bnQpIjsKCiAgICAjIGJ1aWxkIGljb24gZGF0YQogICAgbXkgJUljb24gPSAoCiAgICAgICAgJFByaW8gPT4gewogICAgICAgICAgICBCbG9jayAgICAgICA9PiAnSXRlbVBlcnNvbmFsJywKICAgICAgICAgICAgRGVzY3JpcHRpb24gPT4gJFRleHQsCiAgICAgICAgICAgIE5hbWUgICAgICAgID0+ICRUZXh0LAogICAgICAgICAgICBJbWFnZSAgICAgICA9PiAkSW1hZ2UsCiAgICAgICAgICAgIExpbmsgICAgICAgID0+ICdBY3Rpb249JyAuICRBY3Rpb24sCiAgICAgICAgICAgIEFjY2Vzc0tleSAgID0+ICcnLAogICAgICAgIH0sCiAgICApOwoKICAgIHJldHVybiAlSWNvbjsKfQoKMTsK</File>
        <File Location="Kernel/Output/HTML/NavBarMyCAB.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9OYXZCYXJNeUNBQi5wbQojIENvcHlyaWdodCAoQykgMjAwMy0yMDA5IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogTmF2QmFyTXlDQUIucG0sdiAxLjIgMjAwOS8xMi8wMSAxNTo0OTowMCB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TmF2QmFyTXlDQUI7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjIgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIChxdyhDb25maWdPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IFRpY2tldE9iamVjdCBHcm91cE9iamVjdCBMYXlvdXRPYmplY3QgVXNlcklEKSkgewogICAgICAgICRTZWxmLT57JF99ID0gJFBhcmFteyRffSB8fCBkaWUgIkdvdCBubyAkXyEiOwogICAgfQoKICAgICMgY3JlYXRlIG5lZWRlZCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZS0+bmV3KCVQYXJhbSk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBkZWZpbmUgYWN0aW9uLCBncm91cCwgbGFiZWwsIGltYWdlIGFuZCBwcmlvCiAgICBteSAkQWN0aW9uID0gJ0FnZW50SVRTTUNoYW5nZU15Q0FCJzsKICAgIG15ICRHcm91cCAgPSAnaXRzbS1jaGFuZ2UnOwogICAgbXkgJExhYmVsICA9ICdNeSBDQUJzJzsKICAgIG15ICRJbWFnZSAgPSAnbmV3LW1lc3NhZ2UucG5nJzsKICAgIG15ICRQcmlvICAgPSAnMDk5MjAwMCc7CgogICAgIyBnZXQgY29uZmlnIG9mIGZyb250ZW5kIG1vZHVsZQogICAgbXkgJENvbmZpZyA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCJJVFNNQ2hhbmdlOjpGcm9udGVuZDo6JEFjdGlvbiIpOwoKICAgICMgZ2V0IHRoZSBncm91cCBpZAogICAgbXkgJEdyb3VwSUQgPSAkU2VsZi0+e0dyb3VwT2JqZWN0fS0+R3JvdXBMb29rdXAoIEdyb3VwID0+ICRHcm91cCApOwoKICAgICMgZGVueSBhY2Nlc3MsIHdoZW4gdGhlIGdyb3VwIGlzIG5vdCBmb3VuZAogICAgcmV0dXJuIGlmICEkR3JvdXBJRDsKCiAgICAjIGdldCB1c2VyIGdyb3Vwcywgd2hlcmUgdGhlIHVzZXIgaGFzIHRoZSBhcHByb3ByaWF0ZSBwcml2aWxlZ2UKICAgIG15ICVHcm91cHMgPSAkU2VsZi0+e0dyb3VwT2JqZWN0fS0+R3JvdXBNZW1iZXJMaXN0KAogICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgVHlwZSAgID0+ICRDb25maWctPntQZXJtaXNzaW9ufSwKICAgICAgICBSZXN1bHQgPT4gJ0hBU0gnLAogICAgICAgIENhY2hlZCA9PiAxLAogICAgKTsKCiAgICAjIGRlbnkgYWNjZXNzIGlmIHRoZSBhZ2VudCBkb2Vzbid0IGhhdmUgdGhlIGFwcHJvcHJpYXRlIHR5cGUgaW4gdGhlIGFwcHJvcHJpYXRlIGdyb3VwCiAgICByZXR1cm4gaWYgISRHcm91cHN7JEdyb3VwSUR9OwoKICAgICMgZG8gbm90IHNob3cgaWNvbiBpZiBmcm9udGVuZCBtb2R1bGUgaXMgbm90IHJlZ2lzdGVyZWQKICAgIHJldHVybiBpZiAhJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0Zyb250ZW5kOjpNb2R1bGUnKS0+eyRBY3Rpb259OwoKICAgICMgZ2V0IHRoZSBudW1iZXIgb2Ygdmlld2FibGUgY2hhbmdlcwogICAgbXkgJENvdW50ID0gMDsKICAgIGlmICggJENvbmZpZy0+eydGaWx0ZXI6OkNoYW5nZVN0YXRlcyd9ICYmIEB7ICRDb25maWctPnsnRmlsdGVyOjpDaGFuZ2VTdGF0ZXMnfSB9ICkgewoKICAgICAgICAjIGNvdW50IHRoZSBudW1iZXIgb2Ygdmlld2FibGUgY2hhbmdlcwogICAgICAgICRDb3VudCA9ICRTZWxmLT57Q2hhbmdlT2JqZWN0fS0+Q2hhbmdlU2VhcmNoKAogICAgICAgICAgICBDQUJBZ2VudHMgICAgPT4gWyAkU2VsZi0+e1VzZXJJRH0gXSwKICAgICAgICAgICAgQ2hhbmdlU3RhdGVzID0+ICRDb25maWctPnsnRmlsdGVyOjpDaGFuZ2VTdGF0ZXMnfSwKICAgICAgICAgICAgTGltaXQgICAgICAgID0+IDEwMDAsCiAgICAgICAgICAgIFJlc3VsdCAgICAgICA9PiAnQ09VTlQnLAogICAgICAgICAgICBVc2VySUQgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICk7CiAgICB9CgogICAgIyBidWlsZCBpY29uIGxhYmVsCiAgICBteSAkVGV4dCA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCRMYWJlbCkgLiAiICgkQ291bnQpIjsKCiAgICAjIGJ1aWxkIGljb24gZGF0YQogICAgbXkgJUljb24gPSAoCiAgICAgICAgJFByaW8gPT4gewogICAgICAgICAgICBCbG9jayAgICAgICA9PiAnSXRlbVBlcnNvbmFsJywKICAgICAgICAgICAgRGVzY3JpcHRpb24gPT4gJFRleHQsCiAgICAgICAgICAgIE5hbWUgICAgICAgID0+ICRUZXh0LAogICAgICAgICAgICBJbWFnZSAgICAgICA9PiAkSW1hZ2UsCiAgICAgICAgICAgIExpbmsgICAgICAgID0+ICdBY3Rpb249JyAuICRBY3Rpb24sCiAgICAgICAgICAgIEFjY2Vzc0tleSAgID0+ICcnLAogICAgICAgIH0sCiAgICApOwoKICAgIHJldHVybiAlSWNvbjsKfQoKMTsK</File>
        <File Location="Kernel/Output/HTML/NavBarMyChanges.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9OYXZCYXJNeUNoYW5nZXMucG0KIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAwOSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IE5hdkJhck15Q2hhbmdlcy5wbSx2IDEuMSAyMDA5LzEyLzAxIDAxOjAyOjIxIHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6T3V0cHV0OjpIVE1MOjpOYXZCYXJNeUNoYW5nZXM7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjEgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIChxdyhDb25maWdPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IFRpY2tldE9iamVjdCBHcm91cE9iamVjdCBMYXlvdXRPYmplY3QgVXNlcklEKSkgewogICAgICAgICRTZWxmLT57JF99ID0gJFBhcmFteyRffSB8fCBkaWUgIkdvdCBubyAkXyEiOwogICAgfQoKICAgICMgY3JlYXRlIG5lZWRlZCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZS0+bmV3KCVQYXJhbSk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBkZWZpbmUgYWN0aW9uLCBncm91cCwgbGFiZWwsIGltYWdlIGFuZCBwcmlvCiAgICBteSAkQWN0aW9uID0gJ0FnZW50SVRTTUNoYW5nZU15Q2hhbmdlcyc7CiAgICBteSAkR3JvdXAgID0gJ2l0c20tY2hhbmdlLWJ1aWxkZXInOwogICAgbXkgJExhYmVsICA9ICdNeSBDaGFuZ2VzJzsKICAgIG15ICRJbWFnZSAgPSAnbmV3LW1lc3NhZ2UucG5nJzsKICAgIG15ICRQcmlvICAgPSAnMDk5MzAwMCc7CgogICAgIyBnZXQgY29uZmlnIG9mIGZyb250ZW5kIG1vZHVsZQogICAgbXkgJENvbmZpZyA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCJJVFNNQ2hhbmdlOjpGcm9udGVuZDo6JEFjdGlvbiIpOwoKICAgICMgZ2V0IHRoZSBncm91cCBpZAogICAgbXkgJEdyb3VwSUQgPSAkU2VsZi0+e0dyb3VwT2JqZWN0fS0+R3JvdXBMb29rdXAoIEdyb3VwID0+ICRHcm91cCApOwoKICAgICMgZGVueSBhY2Nlc3MsIHdoZW4gdGhlIGdyb3VwIGlzIG5vdCBmb3VuZAogICAgcmV0dXJuIGlmICEkR3JvdXBJRDsKCiAgICAjIGdldCB1c2VyIGdyb3Vwcywgd2hlcmUgdGhlIHVzZXIgaGFzIHRoZSBhcHByb3ByaWF0ZSBwcml2aWxlZ2UKICAgIG15ICVHcm91cHMgPSAkU2VsZi0+e0dyb3VwT2JqZWN0fS0+R3JvdXBNZW1iZXJMaXN0KAogICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgVHlwZSAgID0+ICRDb25maWctPntQZXJtaXNzaW9ufSwKICAgICAgICBSZXN1bHQgPT4gJ0hBU0gnLAogICAgICAgIENhY2hlZCA9PiAxLAogICAgKTsKCiAgICAjIGRlbnkgYWNjZXNzIGlmIHRoZSBhZ2VudCBkb2Vzbid0IGhhdmUgdGhlIGFwcHJvcHJpYXRlIHR5cGUgaW4gdGhlIGFwcHJvcHJpYXRlIGdyb3VwCiAgICByZXR1cm4gaWYgISRHcm91cHN7JEdyb3VwSUR9OwoKICAgICMgZG8gbm90IHNob3cgaWNvbiBpZiBmcm9udGVuZCBtb2R1bGUgaXMgbm90IHJlZ2lzdGVyZWQKICAgIHJldHVybiBpZiAhJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0Zyb250ZW5kOjpNb2R1bGUnKS0+eyRBY3Rpb259OwoKICAgICMgZ2V0IHRoZSBudW1iZXIgb2Ygdmlld2FibGUgY2hhbmdlcwogICAgbXkgJENvdW50ID0gMDsKICAgIGlmICggJENvbmZpZy0+eydGaWx0ZXI6OkNoYW5nZVN0YXRlcyd9ICYmIEB7ICRDb25maWctPnsnRmlsdGVyOjpDaGFuZ2VTdGF0ZXMnfSB9ICkgewoKICAgICAgICAjIGNvdW50IHRoZSBudW1iZXIgb2Ygdmlld2FibGUgY2hhbmdlcwogICAgICAgICRDb3VudCA9ICRTZWxmLT57Q2hhbmdlT2JqZWN0fS0+Q2hhbmdlU2VhcmNoKAogICAgICAgICAgICBDaGFuZ2VCdWlsZGVySURzID0+IFsgJFNlbGYtPntVc2VySUR9IF0sCiAgICAgICAgICAgIENoYW5nZVN0YXRlcyAgICAgPT4gJENvbmZpZy0+eydGaWx0ZXI6OkNoYW5nZVN0YXRlcyd9LAogICAgICAgICAgICBMaW1pdCAgICAgICAgICAgID0+IDEwMDAsCiAgICAgICAgICAgIFJlc3VsdCAgICAgICAgICAgPT4gJ0NPVU5UJywKICAgICAgICAgICAgVXNlcklEICAgICAgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGJ1aWxkIGljb24gbGFiZWwKICAgIG15ICRUZXh0ID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJExhYmVsKSAuICIgKCRDb3VudCkiOwoKICAgICMgYnVpbGQgaWNvbiBkYXRhCiAgICBteSAlSWNvbiA9ICgKICAgICAgICAkUHJpbyA9PiB7CiAgICAgICAgICAgIEJsb2NrICAgICAgID0+ICdJdGVtUGVyc29uYWwnLAogICAgICAgICAgICBEZXNjcmlwdGlvbiA9PiAkVGV4dCwKICAgICAgICAgICAgTmFtZSAgICAgICAgPT4gJFRleHQsCiAgICAgICAgICAgIEltYWdlICAgICAgID0+ICRJbWFnZSwKICAgICAgICAgICAgTGluayAgICAgICAgPT4gJ0FjdGlvbj0nIC4gJEFjdGlvbiwKICAgICAgICAgICAgQWNjZXNzS2V5ICAgPT4gJycsCiAgICAgICAgfSwKICAgICk7CgogICAgcmV0dXJuICVJY29uOwp9CgoxOwo=</File>
        <File Location="Kernel/Output/HTML/NavBarMyWorkOrders.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9OYXZCYXJNeVdvcmtPcmRlcnMucG0KIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAwOSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IE5hdkJhck15V29ya09yZGVycy5wbSx2IDEuMSAyMDA5LzEyLzAxIDAxOjAyOjIxIHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6T3V0cHV0OjpIVE1MOjpOYXZCYXJNeVdvcmtPcmRlcnM7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjEgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIChxdyhDb25maWdPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IFRpY2tldE9iamVjdCBHcm91cE9iamVjdCBMYXlvdXRPYmplY3QgVXNlcklEKSkgewogICAgICAgICRTZWxmLT57JF99ID0gJFBhcmFteyRffSB8fCBkaWUgIkdvdCBubyAkXyEiOwogICAgfQoKICAgICMgY3JlYXRlIG5lZWRlZCBvYmplY3RzCiAgICAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlci0+bmV3KCVQYXJhbSk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBkZWZpbmUgYWN0aW9uCiAgICBteSAkQWN0aW9uID0gJ0FnZW50SVRTTUNoYW5nZU15V29ya09yZGVycyc7CiAgICBteSAkR3JvdXAgID0gJ2l0c20tY2hhbmdlJzsKICAgIG15ICRMYWJlbCAgPSAnTXkgV29ya29yZGVycyc7CiAgICBteSAkSW1hZ2UgID0gJ25ldy1tZXNzYWdlLnBuZyc7CiAgICBteSAkUHJpbyAgID0gJzA5OTQwMDAnOwoKICAgICMgZ2V0IGNvbmZpZyBvZiBmcm9udGVuZCBtb2R1bGUKICAgIG15ICRDb25maWcgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgiSVRTTUNoYW5nZTo6RnJvbnRlbmQ6OiRBY3Rpb24iKTsKCiAgICAjIGdldCB0aGUgZ3JvdXAgaWQKICAgIG15ICRHcm91cElEID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTG9va3VwKCBHcm91cCA9PiAkR3JvdXAgKTsKCiAgICAjIGRlbnkgYWNjZXNzLCB3aGVuIHRoZSBncm91cCBpcyBub3QgZm91bmQKICAgIHJldHVybiBpZiAhJEdyb3VwSUQ7CgogICAgIyBnZXQgdXNlciBncm91cHMsIHdoZXJlIHRoZSB1c2VyIGhhcyB0aGUgYXBwcm9wcmlhdGUgcHJpdmlsZWdlCiAgICBteSAlR3JvdXBzID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgIFR5cGUgICA9PiAkQ29uZmlnLT57UGVybWlzc2lvbn0sCiAgICAgICAgUmVzdWx0ID0+ICdIQVNIJywKICAgICAgICBDYWNoZWQgPT4gMSwKICAgICk7CgogICAgIyBkZW55IGFjY2VzcyBpZiB0aGUgYWdlbnQgZG9lc24ndCBoYXZlIHRoZSBhcHByb3ByaWF0ZSB0eXBlIGluIHRoZSBhcHByb3ByaWF0ZSBncm91cAogICAgcmV0dXJuIGlmICEkR3JvdXBzeyRHcm91cElEfTsKCiAgICAjIGRvIG5vdCBzaG93IGljb24gaWYgZnJvbnRlbmQgbW9kdWxlIGlzIG5vdCByZWdpc3RlcmVkCiAgICByZXR1cm4gaWYgISRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdGcm9udGVuZDo6TW9kdWxlJyktPnskQWN0aW9ufTsKCiAgICAjIGdldCB0aGUgbnVtYmVyIG9mIHZpZXdhYmxlIGNoYW5nZXMKICAgIG15ICRDb3VudCA9IDA7CiAgICBpZiAoICRDb25maWctPnsnRmlsdGVyOjpXb3JrT3JkZXJTdGF0ZXMnfSAmJiBAeyAkQ29uZmlnLT57J0ZpbHRlcjo6V29ya09yZGVyU3RhdGVzJ30gfSApIHsKCiAgICAgICAgIyBjb3VudCB0aGUgbnVtYmVyIG9mIHZpZXdhYmxlIHdvcmtvcmRlcnMKICAgICAgICAkQ291bnQgPSAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0tPldvcmtPcmRlclNlYXJjaCgKICAgICAgICAgICAgV29ya09yZGVyQWdlbnRJRHMgPT4gWyAkU2VsZi0+e1VzZXJJRH0gXSwKICAgICAgICAgICAgV29ya09yZGVyU3RhdGVzICAgPT4gJENvbmZpZy0+eydGaWx0ZXI6OldvcmtPcmRlclN0YXRlcyd9LAogICAgICAgICAgICBMaW1pdCAgICAgICAgICAgICA9PiAxMDAwLAogICAgICAgICAgICBSZXN1bHQgICAgICAgICAgICA9PiAnQ09VTlQnLAogICAgICAgICAgICBVc2VySUQgICAgICAgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGJ1aWxkIGljb24gbGFiZWwKICAgIG15ICRUZXh0ID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJExhYmVsKSAuICIgKCRDb3VudCkiOwoKICAgICMgYnVpbGQgaWNvbiBkYXRhCiAgICBteSAlSWNvbiA9ICgKICAgICAgICAkUHJpbyA9PiB7CiAgICAgICAgICAgIEJsb2NrICAgICAgID0+ICdJdGVtUGVyc29uYWwnLAogICAgICAgICAgICBEZXNjcmlwdGlvbiA9PiAkVGV4dCwKICAgICAgICAgICAgTmFtZSAgICAgICAgPT4gJFRleHQsCiAgICAgICAgICAgIEltYWdlICAgICAgID0+ICRJbWFnZSwKICAgICAgICAgICAgTGluayAgICAgICAgPT4gJ0FjdGlvbj0nIC4gJEFjdGlvbiwKICAgICAgICAgICAgQWNjZXNzS2V5ICAgPT4gJycsCiAgICAgICAgfSwKICAgICk7CgogICAgcmV0dXJuICVJY29uOwp9CgoxOwo=</File>
        <File Location="Kernel/Output/HTML/Standard/AdminITSMChangeCIPAllocate.dtl" Permission="644" Encode="Base64">IyAtLQojIEFkbWluSVRTTUNoYW5nZUNJUEFsbG9jYXRlLmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWRtaW5JVFNNQ2hhbmdlQ0lQQWxsb2NhdGUKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFkbWluSVRTTUNoYW5nZUNJUEFsbG9jYXRlLmR0bCx2IDEuMTAgMjAxMC8wNC8yNyAyMDozOTowMiB1YiBFeHAgJAojICRPbGRJZDogQWRtaW5JVFNNQ0lQQWxsb2NhdGUuZHRsLHYgMS44IDIwMTAvMDEvMzEgMTc6MDA6NTggdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPHRyPgogICAgICAgIDx0ZCBjb2xzcGFuPSIyIiBjbGFzcz0ibWFpbmhlYWQiPgojIC0tLQojIElUU00gQ2hhbmdlIE1hbmFnZW1lbnQKIyAtLS0KIyAgICAgICAgICAgICRFbnZ7IkJveDAifSRUZXh0eyJDcml0aWNhbGl0eSA8LT4gSW1wYWN0IDwtPiBQcmlvcml0eSJ9JEVudnsiQm94MSJ9CiAgICAgICAgICAgICRFbnZ7IkJveDAifSAkVGV4dHsiQ2F0ZWdvcnkgPC0+IEltcGFjdCA8LT4gUHJpb3JpdHkifSAkRW52eyJCb3gxIn0KIyAtLS0KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1haW5ib2R5IiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgICAgPGJyPgogICAgICAgICAgICA8Zm9ybSBhY3Rpb249IiRFbnZ7IkNHSUhhbmRsZSJ9IiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQWN0aW9uIiB2YWx1ZT0iJEVudnsiQWN0aW9uIn0iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU3ViYWN0aW9uIiB2YWx1ZT0iQ0lQQWxsb2NhdGUiPgogICAgICAgICAgICAgICAgPHRhYmxlIHdpZHRoPSI4MDAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iNCI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRoZWFkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJQcmlvcml0eSJ9ICRUZXh0eyJhbGxvY2F0aW9uIn06CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIzIiB3aWR0aD0iMTAwJSI+CjwhLS0gZHRsOmJsb2NrOkNJUEFsbG9jYXRlUm93IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KPCEtLSBkdGw6YmxvY2s6Q0lQQWxsb2NhdGVSb3dDb2x1bW5EZXNjcmlwdGlvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIwIiB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiIGFsaWduPSJjZW50ZXIiPiRUZXh0eyIkUURhdGF7Ik9iamVjdFR5cGUifSJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiIGFsaWduPSJjZW50ZXIiPiRUZXh0eyIkUURhdGF7Ik9iamVjdE9wdGlvbiJ9In08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgo8IS0tIGR0bDpibG9jazpDSVBBbGxvY2F0ZVJvd0NvbHVtbkRlc2NyaXB0aW9uIC0tPgo8IS0tIGR0bDpibG9jazpDSVBBbGxvY2F0ZVJvd0NvbHVtbkNvbnRlbnQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudHZhbHVlIiBhbGlnbj0iY2VudGVyIj4kRGF0YXsiT3B0aW9uU3RyZyJ9PC90ZD4KPCEtLSBkdGw6YmxvY2s6Q0lQQWxsb2NhdGVSb3dDb2x1bW5Db250ZW50IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CjwhLS0gZHRsOmJsb2NrOkNJUEFsbG9jYXRlUm93IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50Zm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iYnV0dG9uIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSIkVGV4dHsiU2F2ZSJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8YnI+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwvdGFibGU+Cg==</File>
        <File Location="Kernel/Output/HTML/Standard/AdminITSMChangeNotification.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminITSMStateMachine.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMCABMemberSearch.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeAdd.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeCABTemplate.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNoYW5nZUNBQlRlbXBsYXRlLmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWdlbnRJVFNNQ2hhbmdlVGVtcGxhdGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IEFnZW50SVRTTUNoYW5nZUNBQlRlbXBsYXRlLmR0bCx2IDEuMTEgMjAxMC8wNS8xOCAxMzo1NDozMSB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgo8IS0tCgpmdW5jdGlvbiBzdWJtaXRfY29tcG9zZSgpIHsKCiAgICAvLyBjaGVjayB0aGUgdGVtcGxhdGUgbmFtZSwgYWxsIHdoaXRlc3BhY2UgY291bnRzIGFzIGVtcHR5CiAgICBpZiAoZG9jdW1lbnQuY29tcG9zZS5UZW1wbGF0ZU5hbWUudmFsdWUubWF0Y2goL15ccyokLykpIHsKICAgICAgICBhbGVydCgnJEpTVGV4dHsiQSB0ZW1wbGF0ZSBtdXN0IGhhdmUgYSBuYW1lISJ9Jyk7CiAgICAgICAgZG9jdW1lbnQuY29tcG9zZS5UZW1wbGF0ZU5hbWUuZm9jdXMoKTsKCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVybiB0cnVlOwp9CgovLy0tPgo8L3NjcmlwdD4KCjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmhlYWQiPgogICAgICAgICAgICA8ZGl2IHRpdGxlPSIkRW52eyJCb3gwIn0gJFRleHR7IlNhdmUgQ2hhbmdlIENBQiBhcyB0ZW1wbGF0ZSJ9IDogJENvbmZpZ3siSVRTTUNoYW5nZTo6SG9vayJ9OiAkRGF0YXsiQ2hhbmdlTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiQ2hhbmdlVGl0bGUifSI+CiAgICAgICAgICAgICAgICAkRW52eyJCb3gwIn0gJFRleHR7IlNhdmUgQ2hhbmdlIENBQiBhcyB0ZW1wbGF0ZSJ9IDogJENvbmZpZ3siSVRTTUNoYW5nZTo6SG9vayJ9OiAkRGF0YXsiQ2hhbmdlTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiQ2hhbmdlVGl0bGUifQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1lbnUiPgogICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPUFnZW50SVRTTUNoYW5nZUludm9sdmVkUGVyc29ucztDaGFuZ2VJRD0kTFFEYXRheyJDaGFuZ2VJRCJ9IiBvbm1vdXNlb3Zlcj0id2luZG93LnN0YXR1cz0nJEpTVGV4dHsiQmFjayJ9JzsgcmV0dXJuIHRydWU7IiBvbm1vdXNlb3V0PSJ3aW5kb3cuc3RhdHVzPScnOyIgY2xhc3M9Im1lbnVpdGVtIj4kVGV4dHsiQmFjayJ9PC9hPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgoKICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1haW5ib2R5Ij4KICAgICAgICAgICAgPGJyPgogICAgICAgICAgICA8Zm9ybSBhY3Rpb249IiRFbnZ7IkNHSUhhbmRsZSJ9IiBtZXRob2Q9InBvc3QiIG5hbWU9ImNvbXBvc2UiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQWN0aW9uIiAgICAgICB2YWx1ZT0iJEVudnsiQWN0aW9uIn0iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU3ViYWN0aW9uIiAgICB2YWx1ZT0iQWRkVGVtcGxhdGUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ2hhbmdlSUQiICAgICB2YWx1ZT0iJFFEYXRheyJDaGFuZ2VJRCJ9Ij4KICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSI4MDB4IiBhbGlnbj0iY2VudGVyIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjQiPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50aGVhZCI+JFRleHR7IlNhdmUgQ2hhbmdlIENBQiBhcyB0ZW1wbGF0ZSJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY29udGVudGJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9IjEzMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IlRlbXBsYXRlIE5hbWUifToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb250IGNvbG9yPSJyZWQiIHRpdGxlPSIkVGV4dHsiUmVxdWlyZWQifSI+KjwvZm9udD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IlRlbXBsYXRlTmFtZSIgdmFsdWU9IiRRRGF0YXsiVGVtcGxhdGVOYW1lIn0iIHNpemU9IjcwIiBtYXhsZW5ndGg9IjI1MCI+CjwhLS0gZHRsOmJsb2NrOkludmFsaWRUZW1wbGF0ZU5hbWUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb250IGNvbG9yPSJyZWQiIHNpemU9Ii0yIj4kVGV4dHsiSW5wdXQgaW52YWxpZCJ9PC9mb250Pgo8IS0tIGR0bDpibG9jazpJbnZhbGlkVGVtcGxhdGVOYW1lIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IkNvbW1lbnQifToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IkNvbW1lbnQiIHZhbHVlPSIkUURhdGF7IkNvbW1lbnQifSIgc2l6ZT0iNzAiIG1heGxlbmd0aD0iMjUwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50a2V5Ij4kVGV4dHsiVmFsaWQifTogPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPiREYXRheyJWYWxpZFNlbGVjdGlvblN0cmluZyJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50Zm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iYnV0dG9uIiBpZD0ic3VibWl0QWRkVGVtcGxhdGUiIGFjY2Vzc2tleT0iZyIgdHlwZT0ic3VibWl0IiBuYW1lPSJBZGRUZW1wbGF0ZSIgdmFsdWU9IiRUZXh0eyJBZGQifSIgb25jbGljaz0icmV0dXJuIHN1Ym1pdF9jb21wb3NlKCk7Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgPGJyPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgo8L3RhYmxlPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeCondition.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNoYW5nZUNvbmRpdGlvbi5kdGwgLSBwcm92aWRlcyBIVE1MIGZvcm0gZm9yIEFnZW50SVRTTUNoYW5nZUNvbmRpdGlvbgojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQWdlbnRJVFNNQ2hhbmdlQ29uZGl0aW9uLmR0bCx2IDEuMTAgMjAxMC8wMi8wNCAxMjowNDo1NiBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmhlYWQiPgogICAgICAgICAgICA8ZGl2IHRpdGxlPSIkRW52eyJCb3gwIn0gJFRleHR7Ik92ZXJ2aWV3In06ICRUZXh0eyJDb25kaXRpb25zIGFuZCBBY3Rpb25zIn0gOiAkQ29uZmlneyJJVFNNQ2hhbmdlOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiQ2hhbmdlVGl0bGUifSI+CiAgICAgICAgICAgICAgICAkRW52eyJCb3gwIn0gJFRleHR7Ik92ZXJ2aWV3In06ICRUZXh0eyJDb25kaXRpb25zIGFuZCBBY3Rpb25zIn0gOiAkQ29uZmlneyJJVFNNQ2hhbmdlOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiQ2hhbmdlVGl0bGUiLCI3MCJ9CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWVudSI+CiAgICAgICAgICAgIDxhIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn0kRW52eyJMYXN0Q2hhbmdlVmlldyJ9IiBvbm1vdXNlb3Zlcj0id2luZG93LnN0YXR1cz0nJEpTVGV4dHsiQmFjayJ9JzsgcmV0dXJuIHRydWU7IiBvbm1vdXNlb3V0PSJ3aW5kb3cuc3RhdHVzPScnOyIgY2xhc3M9Im1lbnVpdGVtIj4kVGV4dHsiQmFjayJ9PC9hPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmJvZHkiIGFsaWduPSJjZW50ZXIiPgogICAgICAgICAgICA8Zm9ybSBhY3Rpb249IiRFbnZ7IkNHSUhhbmRsZSJ9IiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQWN0aW9uIiB2YWx1ZT0iJEVudnsiQWN0aW9uIn0iLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlN1YmFjdGlvbiIgdmFsdWU9IiIvPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ2hhbmdlSUQiIHZhbHVlPSIkUURhdGF7IkNoYW5nZUlEIn0iLz4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkNvbmRpdGlvbklEIiB2YWx1ZT0iJFFEYXRheyJDb25kaXRpb25JRCJ9Ii8+CiAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjgwMCIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSI0Ij4KICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImNvbnRlbnRoZWFkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50a2V5Ij4kVGV4dHsiQ29uZGl0aW9ucyBhbmQgQWN0aW9ucyJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgo8IS0tIGR0bDpibG9jazpPdmVydmlldyAtLT4KICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImNvbnRlbnRib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxwYWRkaW5nPSIzIiBjZWxsc3BhY2luZz0iMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJjb250ZW50Ym9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSIgd2lkdGg9IjI1MCI+JFRleHR7Ik5hbWUifTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSIgd2lkdGg9IioiPiRUZXh0eyJDb21tZW50In08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiIHdpZHRoPSIxMDAiIGFsaWduPSJjZW50ZXIiPiRUZXh0eyJ2YWxpZCJ9LyRUZXh0eyJpbnZhbGlkIn08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiIHdpZHRoPSIxNTAiPiRUZXh0eyJDaGFuZ2VkIn08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiIHdpZHRoPSIxMCI+Jm5ic3A7PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgo8IS0tIGR0bDpibG9jazpPdmVydmlld1JvdyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiRRRGF0YXsiQ3NzQ2xhc3MifSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249QWdlbnRJVFNNQ2hhbmdlQ29uZGl0aW9uRWRpdDtDaGFuZ2VJRD0kUURhdGF7IkNoYW5nZUlEIn07Q29uZGl0aW9uSUQ9JFFEYXRheyJDb25kaXRpb25JRCJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRRRGF0YXsiTmFtZSJ9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kVGV4dHsiJFFEYXRheyJDb21tZW50In0ifTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0iY2VudGVyIj4kVGV4dHsiJFFEYXRheyJWYWxpZCJ9In08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JFRpbWVMb25neyIkUURhdGF7IkNoYW5nZVRpbWUifSJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSIxMCI+PGlucHV0IGNsYXNzPSJidXR0b24iIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiRUZXh0eyJEZWxldGUifSIgbmFtZT0iRGVsZXRlQ29uZGl0aW9uSUQ6OiRRRGF0YXsiQ29uZGl0aW9uSUQifSI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgo8IS0tIGR0bDpibG9jazpPdmVydmlld1JvdyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXcgLS0+CiMgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY29udGVudGhlYWQiPgojICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50a2V5Ij4kVGV4dHsiQWRkIn08L3RkPgojICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY29udGVudGZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0icmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IkFkZCBuZXcgY29uZGl0aW9uIGFuZCBhY3Rpb24gcGFpciJ9LiZuYnNwOyZuYnNwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidXR0b24iIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiRUZXh0eyJBZGQifSIgbmFtZT0iQWRkQ29uZGl0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgIDxici8+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L3RkPgogICAgPC90cj4KPC90YWJsZT4K</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeConditionEdit.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeEdit.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeHistory.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNoYW5nZUhpc3RvcnkuZHRsIC0gcHJvdmlkZXMgSFRNTCBmb3JtIGZvciBBZ2VudElUU01DaGFuZ2VIaXN0b3J5CiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBBZ2VudElUU01DaGFuZ2VIaXN0b3J5LmR0bCx2IDEuMjAgMjAxMC8wMi8wNCAxMjowNDo1NiBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmhlYWQiPgogICAgICAgICAgICA8ZGl2IHRpdGxlPSIkRW52eyJCb3gwIn0gJFRleHR7Ikhpc3Rvcnkgb2YifSAkQ29uZmlneyJJVFNNQ2hhbmdlOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiQ2hhbmdlVGl0bGUifSI+CiAgICAgICAgICAgICAgICAkRW52eyJCb3gwIn0gJFRleHR7Ikhpc3Rvcnkgb2YifSAkQ29uZmlneyJJVFNNQ2hhbmdlOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiQ2hhbmdlVGl0bGUiLCI3MCJ9CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWVudSI+CiAgICAgICAgICAgIDxhIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn0kRW52eyJMYXN0Q2hhbmdlVmlldyJ9IiBvbm1vdXNlb3Zlcj0id2luZG93LnN0YXR1cz0nJEpTVGV4dHsiQmFjayJ9JzsgcmV0dXJuIHRydWU7IiBvbm1vdXNlb3V0PSJ3aW5kb3cuc3RhdHVzPScnOyIgY2xhc3M9Im1lbnVpdGVtIj4kVGV4dHsiQmFjayJ9PC9hPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmJvZHkiPgogICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjIiIHdpZHRoPSIxMDAlIj4KICAgICAgICAgICAgICAgIDxjb2xncm91cD4KICAgICAgICAgICAgICAgICAgICA8Y29sPgogICAgICAgICAgICAgICAgICAgIDxjb2w+CiAgICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iNjAiIGFsaWduPSJjZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9IjYwIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8Y29sPgogICAgICAgICAgICAgICAgICAgIDxjb2w+CiAgICAgICAgICAgICAgICA8L2NvbGdyb3VwPgogICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJjb250ZW50aGVhZCI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiQWN0aW9uIn06CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJDb21tZW50In06CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJEZXRhaWxzIn06CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJXb3Jrb3JkZXIifToKICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IlVzZXIifToKICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IkNyZWF0ZXRpbWUifToKICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6Um93IC0tPgogICAgICAgICAgICAgICAgPHRyIGNsYXNzPSIkUURhdGF7ImNzcyJ9Ij4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICRRdW90ZXsiJERhdGF7Ikhpc3RvcnlUeXBlIn0ifQogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSIkUURhdGF7IkNvbnRlbnQifSI+JFFEYXRheyJDb250ZW50IiwiMTAwIn08L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0iY2VudGVyIj4KPCEtLSBkdGw6YmxvY2s6SGlzdG9yeVpvb21EYXNoIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAtCjwhLS0gZHRsOmJsb2NrOkhpc3Rvcnlab29tRGFzaCAtLT4KPCEtLSBkdGw6YmxvY2s6SGlzdG9yeVpvb20gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249QWdlbnRJVFNNJERhdGF7Ilpvb21UeXBlIn1IaXN0b3J5Wm9vbSZIaXN0b3J5RW50cnlJRD0kRGF0YXsiSGlzdG9yeUVudHJ5SUQifSIgb25tb3VzZW92ZXI9IndpbmRvdy5zdGF0dXM9JyRKU1RleHR7Ik1vcmUgSW5mbyJ9JzsgcmV0dXJuIHRydWU7IiBvbm1vdXNlb3V0PSJ3aW5kb3cuc3RhdHVzPScnOyI+eDwvYT4KPCEtLSBkdGw6YmxvY2s6SGlzdG9yeVpvb20gLS0+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249ImNlbnRlciI+CjwhLS0gZHRsOmJsb2NrOkRhc2ggLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIC0KPCEtLSBkdGw6YmxvY2s6RGFzaCAtLT4KPCEtLSBkdGw6YmxvY2s6V29ya09yZGVyWm9vbSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj1BZ2VudElUU01Xb3JrT3JkZXJab29tJldvcmtPcmRlcklEPSREYXRheyJXb3JrT3JkZXJJRCJ9IiBvbm1vdXNlb3Zlcj0id2luZG93LnN0YXR1cz0nJEpTVGV4dHsiWm9vbSJ9JzsgcmV0dXJuIHRydWU7IiBvbm1vdXNlb3V0PSJ3aW5kb3cuc3RhdHVzPScnOyI+eDwvYT4KPCEtLSBkdGw6YmxvY2s6V29ya09yZGVyWm9vbSAtLT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT0iJFF1b3RleyIkRGF0YXsiVXNlckxvZ2luIn0gKCREYXRheyJVc2VyRmlyc3RuYW1lIn0gJERhdGF7IlVzZXJMYXN0bmFtZSJ9KSJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRRdW90ZXsiJERhdGF7IlVzZXJMb2dpbiJ9In0gKCRRdW90ZXsiJERhdGF7IlVzZXJGaXJzdG5hbWUifSAkRGF0YXsiVXNlckxhc3RuYW1lIn0iLCIyMCJ9KQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgJFRpbWVMb25neyIkRGF0YXsiQ3JlYXRlVGltZSJ9In0KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6Um93IC0tPgogICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJjb250ZW50aGVhZCI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjYiPiZuYnNwOzwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgo8L3RhYmxlPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeHistoryZoom.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNoYW5nZUhpc3Rvcnlab29tLmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWdlbnRJVFNNQ2hhbmdlSGlzdG9yeVpvb20KIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTUNoYW5nZUhpc3Rvcnlab29tLmR0bCx2IDEuMTYgMjAxMC8wMi8wNCAxMjowNDo1NiBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+CiAgICAubm93cmFwIHsKICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgfQoKICAgIC5maWVsZHZhbHVlcyB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwMDAwOwogICAgICAgIHBhZGRpbmc6IDRweDsKICAgIH0KPC9zdHlsZT4KCjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmhlYWQiPgogICAgICAgICAgICA8ZGl2IHRpdGxlPSIkRW52eyJCb3gwIn0gJFRleHR7Ikhpc3Rvcnkgb2YifSAkQ29uZmlneyJJVFNNQ2hhbmdlOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiQ2hhbmdlVGl0bGUifSI+CiAgICAgICAgICAgICAgICAkRW52eyJCb3gwIn0gJFRleHR7Ikhpc3Rvcnkgb2YifSAkQ29uZmlneyJJVFNNQ2hhbmdlOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiQ2hhbmdlVGl0bGUiLCI3MCJ9CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWVudSI+CiAgICAgICAgICAgIDxhIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn0kRW52eyJMYXN0U2NyZWVuSGlzdG9yeSJ9IiBvbm1vdXNlb3Zlcj0id2luZG93LnN0YXR1cz0nJEpTVGV4dHsiQmFjayJ9JzsgcmV0dXJuIHRydWU7IiBvbm1vdXNlb3V0PSJ3aW5kb3cuc3RhdHVzPScnOyIgY2xhc3M9Im1lbnVpdGVtIj4kVGV4dHsiQmFjayJ9PC9hPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmJvZHkiPgogICAgICAgICAgICA8YnI+CiAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSI4MDAiIGFsaWduPSJjZW50ZXIiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50aGVhZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJEZXRhaWxlZCBoaXN0b3J5IGluZm9ybWF0aW9uIG9mIn0gJERhdGF7Ikhpc3RvcnlUeXBlIn0KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY29udGVudGJvZHkiPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iMTMwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2xncm91cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkgbm93cmFwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7Ik1vZGlmaWVkIn06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRRRGF0YXsiRmllbGRuYW1lIn0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkgbm93cmFwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7Ik9sZCBWYWx1ZSJ9OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWVsZHZhbHVlcyI+JERhdGF7IkNvbnRlbnRPbGQifTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSBub3dyYXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiTmV3IFZhbHVlIn06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZWxkdmFsdWVzIj4kRGF0YXsiQ29udGVudE5ldyJ9PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50a2V5IG5vd3JhcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJDaGFuZ2VkIn06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUaW1lTG9uZ3siJFFEYXRheyJDaGFuZ2VUaW1lIn0ifQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSBub3dyYXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiQ2hhbmdlZCBieSJ9OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSIkUXVvdGV7IiREYXRheyJVc2VyTG9naW4ifSAoJERhdGF7IlVzZXJGaXJzdG5hbWUifSAkRGF0YXsiVXNlckxhc3RuYW1lIn0pIn0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFF1b3RleyIkRGF0YXsiVXNlckxvZ2luIn0ifSAoJFF1b3RleyIkRGF0YXsiVXNlckZpcnN0bmFtZSJ9ICREYXRheyJVc2VyTGFzdG5hbWUifSIsIjQwIn0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOwogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICA8YnI+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwvdGFibGU+Cg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeInvolvedPersons.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeOverviewNavBar.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNoYW5nZU92ZXJ2aWV3TmF2QmFyLmR0bCAtIGh0bWwgZm9yIGNoYW5nZSBvdmVydmlldyB0YWJsZQojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQWdlbnRJVFNNQ2hhbmdlT3ZlcnZpZXdOYXZCYXIuZHRsLHYgMS44IDIwMTAvMDIvMDMgMTM6MTM6MTcgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCjxhIG5hbWU9InN1Ym5hdiI+PC9hPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhciAtLT4KPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluaGVhZCI+CiAgICAgICAgICAgICRFbnZ7IkJveDAifSAkVGV4dHsiJFFEYXRheyJUaXRsZU5hbWUifSJ9OiAkVGV4dHsiJFFEYXRheyJUaXRsZVZhbHVlIn0ifSAkRW52eyJCb3gxIn0KICAgICAgICA8L3RkPgogICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJNYWluIC0tPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWVudSI+CiAgICAgICAgICAgICRUZXh0eyIkUURhdGF7Ik1haW5OYW1lIn0ifTogJERhdGF7Ik1haW5Db250ZW50In0KICAgICAgICA8L3RkPgogICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJNYWluIC0tPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWVudSI+CiAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjAiPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iOTAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSIxMDAlIj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJGaWx0ZXIifToKPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW1TZWxlY3RlZCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgbmFtZT0iT3ZlcnZpZXdDb250cm9sIiBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPSRFbnZ7IkFjdGlvbiJ9JiREYXRheyJGaWx0ZXJMaW5rIn1GaWx0ZXI9JExRRGF0YXsiRmlsdGVyIn0iIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiJFFEYXRheyJOYW1lIn0ifQo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW1TZWxlY3RlZENvdW50IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJFFEYXRheyJDb3VudCJ9KQo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW1TZWxlY3RlZENvdW50IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU2VsZWN0ZWQgLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNlbGVjdGVkTm90IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJPdmVydmlld0NvbnRyb2wiIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249JEVudnsiQWN0aW9uIn0mJERhdGF7IkZpbHRlckxpbmsifUZpbHRlcj0kTFFEYXRheyJGaWx0ZXIifSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyIkUURhdGF7Ik5hbWUifSJ9CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNlbGVjdGVkTm90Q291bnQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkUURhdGF7IkNvdW50In0pCjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNlbGVjdGVkTm90Q291bnQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU2VsZWN0ZWROb3QgLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNwbGl0IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNwbGl0IC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW0gLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVyIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iMTAwJSI+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyUGFnZUJhY2sgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9Ik92ZXJ2aWV3Q29udHJvbCIgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj0kRW52eyJBY3Rpb24ifSYkRGF0YXsiTGlua0JhY2sifSI+JFRleHR7IkNoYW5nZSBzZWFyY2ggb3B0aW9ucyJ9PC9hPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclBhZ2VCYWNrIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclBhZ2VOYXZCYXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJDaGFuZ2VzIn06ICREYXRheyJSZXN1bHQifSAkVGV4dHsib2YifSAkRGF0YXsiVG90YWxIaXRzIn0gLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiUGFnZSJ9OiAkRGF0YXsiU2l0ZU5hdkJhciJ9CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyUGFnZU5hdkJhciAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iMjAlIiBhbGlnbj0icmlnaHQiIHZhbGlnbj0idG9wIj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZSAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZVNlbGVjdGVkIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJPdmVydmlld0NvbnRyb2wiIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249JEVudnsiQWN0aW9uIn0mRmlsdGVyPSRMUURhdGF7IkZpbHRlciJ9JlZpZXc9JExRRGF0YXsiVmlldyJ9JiREYXRheyJMaW5rRmlsdGVyIn0jc3VibmF2IiB0aXRsZT0iJFRleHR7IiRRRGF0YXsiTmFtZSJ9In0iPjxpbWcgYm9yZGVyPSIwIiBzcmM9IiRDb25maWd7IkZyb250ZW5kOjpJbWFnZVBhdGgifSRRRGF0YXsiSW1hZ2VTZWxlY3RlZCJ9IiBhbHQ9IiRUZXh0eyIkUURhdGF7Ik5hbWUifSJ9Ii8+PC9hPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclZpZXdNb2RlU2VsZWN0ZWQgLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyVmlld01vZGVOb3RTZWxlY3RlZCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgbmFtZT0iT3ZlcnZpZXdDb250cm9sIiBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPSRFbnZ7IkFjdGlvbiJ9JkZpbHRlcj0kTFFEYXRheyJGaWx0ZXIifSZWaWV3PSRMUURhdGF7IlZpZXcifSYkRGF0YXsiTGlua0ZpbHRlciJ9I3N1Ym5hdiIgdGl0bGU9IiRUZXh0eyIkUURhdGF7Ik5hbWUifSJ9Ij48aW1nIGJvcmRlcj0iMCIgc3JjPSIkQ29uZmlneyJGcm9udGVuZDo6SW1hZ2VQYXRoIn0kUURhdGF7IkltYWdlIn0iIGFsdD0iJFRleHR7IiRRRGF0YXsiTmFtZSJ9In0iLz48L2E+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyVmlld01vZGVOb3RTZWxlY3RlZCAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwvdGFibGU+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyIC0tPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeOverviewNavBarSmall.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNoYW5nZU92ZXJ2aWV3TmF2QmFyU21hbGwuZHRsIC0gaHRtbCBmb3IgY2hhbmdlIG92ZXJ2aWV3IHRhYmxlCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBBZ2VudElUU01DaGFuZ2VPdmVydmlld05hdkJhclNtYWxsLmR0bCx2IDEuMyAyMDEwLzAxLzIxIDE2OjEwOjA4IGJlcyBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhciAtLT4KPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtZW51Ij4KICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSI5MCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgd2lkdGg9IjEwMCUiPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclBhZ2VOYXZCYXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJDaGFuZ2VzIn06ICREYXRheyJSZXN1bHQifSAkVGV4dHsib2YifSAkRGF0YXsiVG90YWxIaXRzIn0gLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiUGFnZSJ9OiAkRGF0YXsiU2l0ZU5hdkJhciJ9CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyUGFnZU5hdkJhciAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgd2lkdGg9IjEwMCUiPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlciAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IkZpbHRlciJ9Ogo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW0gLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNlbGVjdGVkIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJPdmVydmlld0NvbnRyb2wiIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249JEVudnsiQWN0aW9uIn0mJERhdGF7IkZpbHRlckxpbmsifUZpbHRlcj0kTFFEYXRheyJGaWx0ZXIifSIgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lIj48Yj4kVGV4dHsiJFFEYXRheyJOYW1lIn0ifSAoJFFEYXRheyJDb3VudCJ9KTwvYj48L2E+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNlbGVjdGVkIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW1TZWxlY3RlZE5vdCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgbmFtZT0iT3ZlcnZpZXdDb250cm9sIiBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPSRFbnZ7IkFjdGlvbiJ9JiREYXRheyJGaWx0ZXJMaW5rIn1GaWx0ZXI9JExRRGF0YXsiRmlsdGVyIn0iPiRUZXh0eyIkUURhdGF7Ik5hbWUifSJ9ICgkUURhdGF7IkNvdW50In0pPC9hPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW1TZWxlY3RlZE5vdCAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU3BsaXQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU3BsaXQgLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbSAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgd2lkdGg9IjIwJSIgYWxpZ249InJpZ2h0IiB2YWxpZ249InRvcCI+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyVmlld01vZGUgLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyVmlld01vZGVTZWxlY3RlZCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgbmFtZT0iT3ZlcnZpZXdDb250cm9sIiBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPSRFbnZ7IkFjdGlvbiJ9JkZpbHRlcj0kTFFEYXRheyJGaWx0ZXIifSZWaWV3PSRMUURhdGF7IlZpZXcifSNzdWJuYXYiIHRpdGxlPSIkVGV4dHsiJFFEYXRheyJOYW1lIn0ifSI+PGltZyBib3JkZXI9IjAiIHNyYz0iJENvbmZpZ3siRnJvbnRlbmQ6OkltYWdlUGF0aCJ9JFFEYXRheyJJbWFnZVNlbGVjdGVkIn0iIGFsdD0iJFRleHR7IiRRRGF0YXsiTmFtZSJ9In0iLz48L2E+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyVmlld01vZGVTZWxlY3RlZCAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZU5vdFNlbGVjdGVkIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJPdmVydmlld0NvbnRyb2wiIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249JEVudnsiQWN0aW9uIn0mRmlsdGVyPSRMUURhdGF7IkZpbHRlciJ9JlZpZXc9JExRRGF0YXsiVmlldyJ9I3N1Ym5hdiIgdGl0bGU9IiRUZXh0eyIkUURhdGF7Ik5hbWUifSJ9Ij48aW1nIGJvcmRlcj0iMCIgc3JjPSIkQ29uZmlneyJGcm9udGVuZDo6SW1hZ2VQYXRoIn0kUURhdGF7IkltYWdlIn0iIGFsdD0iJFRleHR7IiRRRGF0YXsiTmFtZSJ9In0iLz48L2E+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyVmlld01vZGVOb3RTZWxlY3RlZCAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyTWFpbiAtLT4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1haW5ib2R5Ij4KICAgICAgICAgICAgJFRleHR7IiRRRGF0YXsiTWFpbk5hbWUifSJ9OiAkRGF0YXsiTWFpbkNvbnRlbnQifQogICAgICAgIDwvdGQ+CiAgICA8L3RyPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhck1haW4gLS0+CjwvdGFibGU+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyIC0tPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeOverviewSmall.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangePrint.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeSearch.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeTemplate.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNoYW5nZVRlbXBsYXRlLmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWdlbnRJVFNNQ2hhbmdlVGVtcGxhdGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IEFnZW50SVRTTUNoYW5nZVRlbXBsYXRlLmR0bCx2IDEuMTQgMjAxMC8wNS8xOCAxMzo1NDozMSB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgo8IS0tCgpmdW5jdGlvbiBzdWJtaXRfY29tcG9zZSgpIHsKCiAgICAvLyBjaGVjayB0aGUgdGVtcGxhdGUgbmFtZSwgYWxsIHdoaXRlc3BhY2UgY291bnRzIGFzIGVtcHR5CiAgICBpZiAoZG9jdW1lbnQuY29tcG9zZS5UZW1wbGF0ZU5hbWUudmFsdWUubWF0Y2goL15ccyokLykpIHsKICAgICAgICBhbGVydCgnJEpTVGV4dHsiQSB0ZW1wbGF0ZSBtdXN0IGhhdmUgYSBuYW1lISJ9Jyk7CiAgICAgICAgZG9jdW1lbnQuY29tcG9zZS5UZW1wbGF0ZU5hbWUuZm9jdXMoKTsKCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVybiB0cnVlOwp9CgovLy0tPgo8L3NjcmlwdD4KCjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmhlYWQiPgogICAgICAgICAgICA8ZGl2IHRpdGxlPSIkRW52eyJCb3gwIn0gJFRleHR7IlNhdmUgQ2hhbmdlIGFzIHRlbXBsYXRlIn0gOiAkQ29uZmlneyJJVFNNQ2hhbmdlOjpIb29rIn06ICREYXRheyJDaGFuZ2VOdW1iZXIifSAkRW52eyJCb3gxIn0gJFFEYXRheyJDaGFuZ2VUaXRsZSJ9Ij4KICAgICAgICAgICAgICAgICRFbnZ7IkJveDAifSAkVGV4dHsiU2F2ZSBDaGFuZ2UgYXMgdGVtcGxhdGUifSA6ICRDb25maWd7IklUU01DaGFuZ2U6Okhvb2sifTogJERhdGF7IkNoYW5nZU51bWJlciJ9ICRFbnZ7IkJveDEifSAkUURhdGF7IkNoYW5nZVRpdGxlIiwiNzAifQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1lbnUiPgogICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9JEVudnsiTGFzdENoYW5nZVZpZXcifSIgb25tb3VzZW92ZXI9IndpbmRvdy5zdGF0dXM9JyRKU1RleHR7IkJhY2sifSc7IHJldHVybiB0cnVlOyIgb25tb3VzZW91dD0id2luZG93LnN0YXR1cz0nJzsiIGNsYXNzPSJtZW51aXRlbSI+JFRleHR7IkJhY2sifTwvYT4KICAgICAgICA8L3RkPgogICAgPC90cj4KCiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluYm9keSI+CiAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIkRW52eyJDR0lIYW5kbGUifSIgbWV0aG9kPSJwb3N0IiBuYW1lPSJjb21wb3NlIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkFjdGlvbiIgICAgICAgdmFsdWU9IiRFbnZ7IkFjdGlvbiJ9Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlN1YmFjdGlvbiIgICAgdmFsdWU9IkFkZFRlbXBsYXRlIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkNoYW5nZUlEIiAgICAgdmFsdWU9IiRRRGF0YXsiQ2hhbmdlSUQifSI+CiAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iODAwIiBhbGlnbj0iY2VudGVyIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjQiPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50aGVhZCI+JFRleHR7IlNhdmUgQ2hhbmdlIGFzIHRlbXBsYXRlIn08L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJjb250ZW50Ym9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2xncm91cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iMTMwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2xncm91cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiVGVtcGxhdGUgTmFtZSJ9OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvbnQgY29sb3I9InJlZCIgdGl0bGU9IiRUZXh0eyJSZXF1aXJlZCJ9Ij4qPC9mb250PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iVGVtcGxhdGVOYW1lIiB2YWx1ZT0iJFFEYXRheyJUZW1wbGF0ZU5hbWUifSIgc2l6ZT0iNzAiIG1heGxlbmd0aD0iMjUwIj4KPCEtLSBkdGw6YmxvY2s6SW52YWxpZFRlbXBsYXRlTmFtZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvbnQgY29sb3I9InJlZCIgc2l6ZT0iLTIiPiRUZXh0eyJJbnB1dCBpbnZhbGlkIn08L2ZvbnQ+CjwhLS0gZHRsOmJsb2NrOkludmFsaWRUZW1wbGF0ZU5hbWUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiQ29tbWVudCJ9OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iQ29tbWVudCIgdmFsdWU9IiRRRGF0YXsiQ29tbWVudCJ9IiBzaXplPSI3MCIgbWF4bGVuZ3RoPSIyNTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiPiRUZXh0eyJWYWxpZCJ9OiA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+JERhdGF7IlZhbGlkU2VsZWN0aW9uU3RyaW5nIn08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRmb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidXR0b24iIGlkPSJzdWJtaXRBZGRUZW1wbGF0ZSIgYWNjZXNza2V5PSJnIiB0eXBlPSJzdWJtaXQiIG5hbWU9IkFkZFRlbXBsYXRlIiB2YWx1ZT0iJFRleHR7IkFkZCJ9IiBvbmNsaWNrPSJyZXR1cm4gc3VibWl0X2NvbXBvc2UoKTsiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8YnI+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwvdGFibGU+Cg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeTimeSlot.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNoYW5nZVRpbWVTbG90LmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWdlbnRJVFNNQ2hhbmdlVGltZVNsb3QKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTUNoYW5nZVRpbWVTbG90LmR0bCx2IDEuMTUgMjAxMC8wMi8wNCAxMjowNDo1NiBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCiRJbmNsdWRleyJBSkFYIn0KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9IiRDb25maWd7IkZyb250ZW5kOjpKYXZhU2NyaXB0UGF0aCJ9aXRzbS1jaGFuZ2VtYW5hZ2VtZW50LmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgo8IS0tCgpmdW5jdGlvbiBzdWJtaXRfY29tcG9zZSgpIHsKCiAgICAvLyBjaGVjayBzYW5pdHkgb2YgbW92ZSB0aW1lCiAgICAvLyAyMDEwLTAxLTMyIGlzIHJlamVjdGVkLCBidXQgMjAxMC0wMi0zMSBpcyBhbGxvd2VkCiAgICAvLyBhbiBleGFjdCB0aW1lIGNoZWNrIGlzIHBlcmZvcm1lZCBvbiB0aGUgc2VydmVyc2lkZQogICAgaWYgKCAhQ2hlY2tUaW1lKCAnTW92ZVRpbWUnICkgKSB7CiAgICAgICAgYWxlcnQoJyRKU1RleHR7IlRoZSBwbGFubmVkIHRpbWUgaXMgaW52YWxpZCEifScpOwoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcmV0dXJuIHRydWU7Cn0KCi8vLS0+Cjwvc2NyaXB0PgoKPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluaGVhZCI+CiAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRFbnZ7IkJveDAifSAkVGV4dHsiTW92ZSBUaW1lIFNsb3QifSAkQ29uZmlneyJJVFNNQ2hhbmdlOjpIb29rIn06ICREYXRheyJDaGFuZ2VOdW1iZXIifSAkRW52eyJCb3gxIn0iPgogICAgICAgICAgICAgICAgJEVudnsiQm94MCJ9ICRUZXh0eyJNb3ZlIFRpbWUgU2xvdCJ9ICRDb25maWd7IklUU01DaGFuZ2U6Okhvb2sifTogJERhdGF7IkNoYW5nZU51bWJlciJ9ICRFbnZ7IkJveDEifQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1lbnUiPgogICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9JEVudnsiTGFzdENoYW5nZVZpZXcifSIgb25tb3VzZW92ZXI9IndpbmRvdy5zdGF0dXM9JyRKU1RleHR7IkJhY2sifSc7IHJldHVybiB0cnVlOyIgb25tb3VzZW91dD0id2luZG93LnN0YXR1cz0nJzsiIGNsYXNzPSJtZW51aXRlbSI+JFRleHR7IkJhY2sifTwvYT4KICAgICAgICA8L3RkPgogICAgPC90cj4KCiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluYm9keSI+CiAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIkRW52eyJDR0lIYW5kbGUifSIgbWV0aG9kPSJwb3N0IiBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIiBuYW1lPSJjb21wb3NlIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkFjdGlvbiIgICAgdmFsdWU9IiRFbnZ7IkFjdGlvbiJ9Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlN1YmFjdGlvbiIgdmFsdWU9Ik1vdmVUaW1lU2xvdCI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJDaGFuZ2VJRCIgIHZhbHVlPSIkUURhdGF7IkNoYW5nZUlEIn0iPgogICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjgwMCIgYWxpZ249ImNlbnRlciIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSI0Ij4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGhlYWQiPiRUZXh0eyJNb3ZlIFRpbWUgU2xvdCJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY29udGVudGJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9IjEzMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiPiRUZXh0eyJUaW1lIHR5cGUifTo8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRGF0YXsiTW92ZVRpbWVUeXBlU2VsZWN0aW9uU3RyaW5nIn0KPCEtLSBkdGw6YmxvY2s6SW52YWxpZFRpbWVUeXBlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9udCBjb2xvcj0icmVkIiBzaXplPSItMiI+JFRleHR7IklucHV0IGludmFsaWQifTwvZm9udD4KPCEtLSBkdGw6YmxvY2s6SW52YWxpZFRpbWVUeXBlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiPiRUZXh0eyJOZXcgdGltZSJ9OjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudHZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICREYXRheyJNb3ZlVGltZVNlbGVjdGlvblN0cmluZyJ9CjwhLS0gZHRsOmJsb2NrOkludmFsaWRNb3ZlVGltZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvbnQgY29sb3I9InJlZCIgc2l6ZT0iLTIiPiRUZXh0eyJJbnB1dCBpbnZhbGlkIn08L2ZvbnQ+CjwhLS0gZHRsOmJsb2NrOkludmFsaWRNb3ZlVGltZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50Zm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iYnV0dG9uIiBpZD0ic3VibWl0TW92ZVRpbWVTbG90IiBhY2Nlc3NrZXk9ImciIHR5cGU9InN1Ym1pdCIgbmFtZT0iTW92ZVRpbWVTbG90IiB2YWx1ZT0iJFRleHR7Ik1vdmUifSIgb25jbGljaz0icmV0dXJuIHN1Ym1pdF9jb21wb3NlKCk7Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgPGJyPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgo8L3RhYmxlPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMChangeZoom.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMTemplateDelete.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVRlbXBsYXRlRGVsZXRlLmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWdlbnRJVFNNVGVtcGxhdGVEZWxldGUKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTVRlbXBsYXRlRGVsZXRlLmR0bCx2IDEuNSAyMDEwLzA0LzI3IDIwOjQyOjM1IHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgo8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIzIj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1haW5oZWFkIj4KICAgICAgICAgICAgPGRpdiB0aXRsZT0iJEVudnsiQm94MCJ9ICRUZXh0eyJEZWxldGUifSAkVGV4dHsiVGVtcGxhdGUifSAkUURhdGF7Ik5hbWUifSAkRW52eyJCb3gxIn0iPgogICAgICAgICAgICAgICAgJEVudnsiQm94MCJ9ICRUZXh0eyJEZWxldGUifSAkVGV4dHsiVGVtcGxhdGUifSAkUURhdGF7Ik5hbWUifSAkRW52eyJCb3gxIn0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtZW51Ij4KICAgICAgICAgICAgPGEgaHJlZj0iJEVudnsiQmFzZWxpbmsifSRFbnZ7Ikxhc3RTY3JlZW5UZW1wbGF0ZXMifSIgb25tb3VzZW92ZXI9IndpbmRvdy5zdGF0dXM9JyRKU1RleHR7IkJhY2sifSc7IHJldHVybiB0cnVlOyIgb25tb3VzZW91dD0id2luZG93LnN0YXR1cz0nJzsiIGNsYXNzPSJtZW51aXRlbSI+JFRleHR7IkJhY2sifTwvYT4KICAgICAgICA8L3RkPgogICAgPC90cj4KCiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluYm9keSI+CiAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjM1MCIgYWxpZ249ImNlbnRlciIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSI0Ij4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRoZWFkIj4kVGV4dHsiRGVsZXRlIn0gJFRleHR7IlRlbXBsYXRlIn0gJFFEYXRheyJOYW1lIn08L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY29udGVudGJvZHkiPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2xncm91cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPSIxMzAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvbGdyb3VwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSI+JFRleHR7Ik5hbWUifTo8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudHZhbHVlIj4kUURhdGF7Ik5hbWUifTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSI+JFRleHR7IlR5cGUifTo8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudHZhbHVlIj4kVGV4dHsiJFFEYXRheyJUeXBlIn0ifTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSI+JFRleHR7IkNvbW1lbnQifTo8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudHZhbHVlIj4kUURhdGF7IkNvbW1lbnQiLCAiNDAifTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSIyIj4mbmJzcDs8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMiIgY2xhc3M9ImNvbnRlbnRrZXkiPiRUZXh0eyJEbyB5b3UgcmVhbGx5IHdhbnQgdG8gZGVsZXRlIHRoaXMgdGVtcGxhdGU/In08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRmb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgd2lkdGg9IjEwMCUiIGJvcmRlcj0iMCIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2xncm91cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50Zm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIkRW52eyJDR0lIYW5kbGUifSIgbWV0aG9kPSJwb3N0IiBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkFjdGlvbiIgICAgdmFsdWU9IkFnZW50SVRTTVRlbXBsYXRlT3ZlcnZpZXciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iVGVtcGxhdGVJRCIgdmFsdWU9IiRRRGF0YXsiVGVtcGxhdGVJRCJ9Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTdWJhY3Rpb24iIHZhbHVlPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidXR0b24iIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiRUZXh0eyJObyJ9Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iJEVudnsiQ0dJSGFuZGxlIn0iIG1ldGhvZD0icG9zdCIgZW5jdHlwZT0ibXVsdGlwYXJ0L2Zvcm0tZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJBY3Rpb24iIHZhbHVlPSIkRW52eyJBY3Rpb24ifSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU3ViYWN0aW9uIiB2YWx1ZT0iVGVtcGxhdGVEZWxldGUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlRlbXBsYXRlSUQiIHZhbHVlPSIkUURhdGF7IlRlbXBsYXRlSUQifSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidXR0b24iIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiRUZXh0eyJZZXMifSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwvdGFibGU+Cg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMTemplateEdit.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVRlbXBsYXRlRWRpdC5kdGwgLSBwcm92aWRlcyBIVE1MIGZvcm0gZm9yIEFnZW50SVRTTVRlbXBsYXRlRWRpdAojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQWdlbnRJVFNNVGVtcGxhdGVFZGl0LmR0bCx2IDEuNSAyMDEwLzA0LzI3IDIwOjQyOjM1IHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CjwhLS0KCmZ1bmN0aW9uIHN1Ym1pdF9jb21wb3NlKCkgewoKICAgIC8vIGNoZWNrIHRoZSB0ZW1wbGF0ZSBuYW1lLCBhbGwgd2hpdGVzcGFjZSBjb3VudHMgYXMgZW1wdHkKICAgIGlmIChkb2N1bWVudC5jb21wb3NlLlRlbXBsYXRlTmFtZS52YWx1ZS5tYXRjaCgvXlxzKiQvKSkgewogICAgICAgIGFsZXJ0KCckSlNUZXh0eyJBIHRlbXBsYXRlIG11c3QgaGF2ZSBhIG5hbWUhIn0nKTsKICAgICAgICBkb2N1bWVudC5jb21wb3NlLlRlbXBsYXRlTmFtZS5mb2N1cygpOwoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcmV0dXJuIHRydWU7Cn0KCi8vLS0+Cjwvc2NyaXB0PgoKPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluaGVhZCI+CiAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRFbnZ7IkJveDAifSAkVGV4dHsiRWRpdCJ9ICRUZXh0eyIkUURhdGF7IlR5cGUifSJ9ICRUZXh0eyJUZW1wbGF0ZSJ9ICRRRGF0YXsiTmFtZSJ9ICRFbnZ7IkJveDEifSI+CiAgICAgICAgICAgICAgICAkRW52eyJCb3gwIn0gJFRleHR7IkVkaXQifSAkVGV4dHsiJFFEYXRheyJUeXBlIn0ifSAkVGV4dHsiVGVtcGxhdGUifSAkUURhdGF7Ik5hbWUifSAkRW52eyJCb3gxIn0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtZW51Ij4KICAgICAgICAgICAgPGEgaHJlZj0iJEVudnsiQmFzZWxpbmsifSRFbnZ7Ikxhc3RTY3JlZW5UZW1wbGF0ZXMifSIgb25tb3VzZW92ZXI9IndpbmRvdy5zdGF0dXM9JyRKU1RleHR7IkJhY2sifSc7IHJldHVybiB0cnVlOyIgb25tb3VzZW91dD0id2luZG93LnN0YXR1cz0nJzsiIGNsYXNzPSJtZW51aXRlbSI+JFRleHR7IkJhY2sifTwvYT4KICAgICAgICA8L3RkPgogICAgPC90cj4KCiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluYm9keSI+CiAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIkRW52eyJDR0lIYW5kbGUifSIgbWV0aG9kPSJwb3N0IiBuYW1lPSJjb21wb3NlIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkFjdGlvbiIgICAgIHZhbHVlPSIkRW52eyJBY3Rpb24ifSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTdWJhY3Rpb24iICB2YWx1ZT0iVXBkYXRlVGVtcGxhdGUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iVGVtcGxhdGVJRCIgdmFsdWU9IiRRRGF0YXsiVGVtcGxhdGVJRCJ9Ij4KICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSI4MDAiIGFsaWduPSJjZW50ZXIiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iNCI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRoZWFkIj4kVGV4dHsiRWRpdCBUZW1wbGF0ZSJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY29udGVudGJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9IjEzMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IlRlbXBsYXRlIE5hbWUifToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb250IGNvbG9yPSJyZWQiIHRpdGxlPSIkVGV4dHsiUmVxdWlyZWQifSI+KjwvZm9udD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IlRlbXBsYXRlTmFtZSIgdmFsdWU9IiRRRGF0YXsiVGVtcGxhdGVOYW1lIn0iIHNpemU9IjcwIiBtYXhsZW5ndGg9IjI1MCI+CjwhLS0gZHRsOmJsb2NrOkludmFsaWRUZW1wbGF0ZU5hbWUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb250IGNvbG9yPSJyZWQiIHNpemU9Ii0yIj4kVGV4dHsiSW5wdXQgaW52YWxpZCJ9PC9mb250Pgo8IS0tIGR0bDpibG9jazpJbnZhbGlkVGVtcGxhdGVOYW1lIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IkNvbW1lbnQifToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9IkNvbW1lbnQiIHZhbHVlPSIkUURhdGF7IkNvbW1lbnQifSIgc2l6ZT0iNzAiIG1heGxlbmd0aD0iMjUwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50a2V5Ij4kVGV4dHsiVmFsaWQifTogPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPiREYXRheyJWYWxpZFNlbGVjdGlvblN0cmluZyJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50Zm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iYnV0dG9uIiBpZD0ic3VibWl0RWRpdFRlbXBsYXRlIiBhY2Nlc3NrZXk9ImciIHR5cGU9InN1Ym1pdCIgbmFtZT0iRWRpdFRlbXBsYXRlIiB2YWx1ZT0iJFRleHR7IlNhdmUifSIgb25jbGljaz0icmV0dXJuIHN1Ym1pdF9jb21wb3NlKCk7Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgPGJyPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgo8L3RhYmxlPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMTemplateOverviewNavBar.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVRlbXBsYXRlT3ZlcnZpZXdOYXZCYXIuZHRsIC0gaHRtbCBmb3IgdGVtcGxhdGUgb3ZlcnZpZXcgdGFibGUKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTVRlbXBsYXRlT3ZlcnZpZXdOYXZCYXIuZHRsLHYgMS42IDIwMTAvMDIvMDMgMTM6MTM6MTcgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCjxhIG5hbWU9InN1Ym5hdiI+PC9hPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhciAtLT4KPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluaGVhZCI+CiAgICAgICAgICAgICRFbnZ7IkJveDAifSAkVGV4dHsiJFFEYXRheyJUaXRsZU5hbWUifSJ9OiAkVGV4dHsiJFFEYXRheyJUaXRsZVZhbHVlIn0ifSAkRW52eyJCb3gxIn0KICAgICAgICA8L3RkPgogICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJNYWluIC0tPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWVudSI+CiAgICAgICAgICAgICRUZXh0eyIkUURhdGF7Ik1haW5OYW1lIn0ifTogJERhdGF7Ik1haW5Db250ZW50In0KICAgICAgICA8L3RkPgogICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJNYWluIC0tPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWVudSI+CiAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjAiPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iOTAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSIxMDAlIj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJGaWx0ZXIifToKPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW1TZWxlY3RlZCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgbmFtZT0iT3ZlcnZpZXdDb250cm9sIiBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPSRFbnZ7IkFjdGlvbiJ9OyREYXRheyJGaWx0ZXJMaW5rIn1GaWx0ZXI9JExRRGF0YXsiRmlsdGVyIn0iIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSI+PGI+JFRleHR7IiRRRGF0YXsiTmFtZSJ9In0gKCRRRGF0YXsiQ291bnQifSk8L2I+PC9hPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW1TZWxlY3RlZCAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU2VsZWN0ZWROb3QgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9Ik92ZXJ2aWV3Q29udHJvbCIgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj0kRW52eyJBY3Rpb24ifTskRGF0YXsiRmlsdGVyTGluayJ9RmlsdGVyPSRMUURhdGF7IkZpbHRlciJ9Ij4kVGV4dHsiJFFEYXRheyJOYW1lIn0ifSAoJFFEYXRheyJDb3VudCJ9KTwvYT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU2VsZWN0ZWROb3QgLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNwbGl0IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNwbGl0IC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW0gLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVyIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iMTAwJSI+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyUGFnZUJhY2sgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9Ik92ZXJ2aWV3Q29udHJvbCIgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj0kRW52eyJBY3Rpb24ifTskRGF0YXsiTGlua0JhY2sifSI+JFRleHR7IkNoYW5nZSBzZWFyY2ggb3B0aW9ucyJ9PC9hPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclBhZ2VCYWNrIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclBhZ2VOYXZCYXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJUZW1wbGF0ZXMifTogJERhdGF7IlJlc3VsdCJ9ICRUZXh0eyJvZiJ9ICREYXRheyJUb3RhbEhpdHMifSAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJQYWdlIn06ICREYXRheyJTaXRlTmF2QmFyIn0KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJQYWdlTmF2QmFyIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSIyMCUiIGFsaWduPSJyaWdodCIgdmFsaWduPSJ0b3AiPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclZpZXdNb2RlIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclZpZXdNb2RlU2VsZWN0ZWQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9Ik92ZXJ2aWV3Q29udHJvbCIgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj0kRW52eyJBY3Rpb24ifTtGaWx0ZXI9JExRRGF0YXsiRmlsdGVyIn07Vmlldz0kTFFEYXRheyJWaWV3In07JERhdGF7IkxpbmtGaWx0ZXIifSNzdWJuYXYiIHRpdGxlPSIkVGV4dHsiJFFEYXRheyJOYW1lIn0ifSI+PGltZyBib3JkZXI9IjAiIHNyYz0iJENvbmZpZ3siRnJvbnRlbmQ6OkltYWdlUGF0aCJ9JFFEYXRheyJJbWFnZVNlbGVjdGVkIn0iIGFsdD0iJFRleHR7IiRRRGF0YXsiTmFtZSJ9In0iLz48L2E+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyVmlld01vZGVTZWxlY3RlZCAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZU5vdFNlbGVjdGVkIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJPdmVydmlld0NvbnRyb2wiIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249JEVudnsiQWN0aW9uIn07RmlsdGVyPSRMUURhdGF7IkZpbHRlciJ9O1ZpZXc9JExRRGF0YXsiVmlldyJ9OyREYXRheyJMaW5rRmlsdGVyIn0jc3VibmF2IiB0aXRsZT0iJFRleHR7IiRRRGF0YXsiTmFtZSJ9In0iPjxpbWcgYm9yZGVyPSIwIiBzcmM9IiRDb25maWd7IkZyb250ZW5kOjpJbWFnZVBhdGgifSRRRGF0YXsiSW1hZ2UifSIgYWx0PSIkVGV4dHsiJFFEYXRheyJOYW1lIn0ifSIvPjwvYT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZU5vdFNlbGVjdGVkIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclZpZXdNb2RlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsKICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICA8L3RkPgogICAgPC90cj4KPC90YWJsZT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXIgLS0+Cg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMTemplateOverviewNavBarSmall.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVRlbXBsYXRlT3ZlcnZpZXdOYXZCYXJTbWFsbC5kdGwgLSBodG1sIGZvciB0ZW1wbGF0ZSBvdmVydmlldyB0YWJsZQojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQWdlbnRJVFNNVGVtcGxhdGVPdmVydmlld05hdkJhclNtYWxsLmR0bCx2IDEuNCAyMDEwLzAxLzIyIDExOjM1OjE2IGJlcyBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhciAtLT4KPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtZW51Ij4KICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSI5MCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgd2lkdGg9IjEwMCUiPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclBhZ2VOYXZCYXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJUZW1wbGF0ZXMifTogJERhdGF7IlJlc3VsdCJ9ICRUZXh0eyJvZiJ9ICREYXRheyJUb3RhbEhpdHMifSAtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJQYWdlIn06ICREYXRheyJTaXRlTmF2QmFyIn0KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJQYWdlTmF2QmFyIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iMTAwJSI+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVyIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiRmlsdGVyIn06CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbSAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU2VsZWN0ZWQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9Ik92ZXJ2aWV3Q29udHJvbCIgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj0kRW52eyJBY3Rpb24ifTskRGF0YXsiRmlsdGVyTGluayJ9RmlsdGVyPSRMUURhdGF7IkZpbHRlciJ9IiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiPjxiPiRUZXh0eyIkUURhdGF7Ik5hbWUifSJ9ICgkUURhdGF7IkNvdW50In0pPC9iPjwvYT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtU2VsZWN0ZWQgLS0+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNlbGVjdGVkTm90IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJPdmVydmlld0NvbnRyb2wiIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249JEVudnsiQWN0aW9uIn07JERhdGF7IkZpbHRlckxpbmsifUZpbHRlcj0kTFFEYXRheyJGaWx0ZXIifSI+JFRleHR7IiRRRGF0YXsiTmFtZSJ9In0gKCRRRGF0YXsiQ291bnQifSk8L2E+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyRmlsdGVySXRlbVNlbGVjdGVkTm90IC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW1TcGxpdCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLQo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlckl0ZW1TcGxpdCAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJGaWx0ZXJJdGVtIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhckZpbHRlciAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iMjAlIiBhbGlnbj0icmlnaHQiIHZhbGlnbj0idG9wIj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZSAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZVNlbGVjdGVkIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJPdmVydmlld0NvbnRyb2wiIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249JEVudnsiQWN0aW9uIn07RmlsdGVyPSRMUURhdGF7IkZpbHRlciJ9O1ZpZXc9JExRRGF0YXsiVmlldyJ9I3N1Ym5hdiIgdGl0bGU9IiRUZXh0eyIkUURhdGF7Ik5hbWUifSJ9Ij48aW1nIGJvcmRlcj0iMCIgc3JjPSIkQ29uZmlneyJGcm9udGVuZDo6SW1hZ2VQYXRoIn0kUURhdGF7IkltYWdlU2VsZWN0ZWQifSIgYWx0PSIkVGV4dHsiJFFEYXRheyJOYW1lIn0ifSIvPjwvYT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZVNlbGVjdGVkIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclZpZXdNb2RlTm90U2VsZWN0ZWQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9Ik92ZXJ2aWV3Q29udHJvbCIgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj0kRW52eyJBY3Rpb24ifTtGaWx0ZXI9JExRRGF0YXsiRmlsdGVyIn07Vmlldz0kTFFEYXRheyJWaWV3In0jc3VibmF2IiB0aXRsZT0iJFRleHR7IiRRRGF0YXsiTmFtZSJ9In0iPjxpbWcgYm9yZGVyPSIwIiBzcmM9IiRDb25maWd7IkZyb250ZW5kOjpJbWFnZVBhdGgifSRRRGF0YXsiSW1hZ2UifSIgYWx0PSIkVGV4dHsiJFFEYXRheyJOYW1lIn0ifSIvPjwvYT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJWaWV3TW9kZU5vdFNlbGVjdGVkIC0tPgo8IS0tIGR0bDpibG9jazpPdmVydmlld05hdkJhclZpZXdNb2RlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsKICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICA8L3RkPgogICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXJNYWluIC0tPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmJvZHkiPgogICAgICAgICAgICAkVGV4dHsiJFFEYXRheyJNYWluTmFtZSJ9In06ICREYXRheyJNYWluQ29udGVudCJ9CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TmF2QmFyTWFpbiAtLT4KPC90YWJsZT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdOYXZCYXIgLS0+Cg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMTemplateOverviewSmall.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMUserSearch.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderAdd.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderAgent.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVdvcmtPcmRlckFnZW50LmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWdlbnRJVFNNV29ya09yZGVyQWdlbnQKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTVdvcmtPcmRlckFnZW50LmR0bCx2IDEuMjUgMjAxMC8wNC8yNyAyMDo0NTowNCB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKJEluY2x1ZGV7IkFKQVgifQoKJEluY2x1ZGV7IkFnZW50SVRTTVVzZXJTZWFyY2gifQoKPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KLm15QXV0b0NvbXBsZXRlIHsKICAgIHdpZHRoOjMyZW07IC8qIHNldCB3aWR0aCBoZXJlIG9yIGVsc2Ugd2lkZ2V0IHdpbGwgZXhwYW5kIHRvIGZpdCBpdHMgY29udGFpbmVyICovCiAgICBwYWRkaW5nLWJvdHRvbTowLjVlbTsKfQo8L3N0eWxlPgoKPHNjcmlwdCBsYW5ndWFnZT0iSmF2YVNjcmlwdCIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KPCEtLQpmdW5jdGlvbiBjbGVhcl9maWVsZCgpIHsKICAgIGRvY3VtZW50LmNvbXBvc2UuQWdlbnQudmFsdWUgPSAiIjsKICAgIGRvY3VtZW50LmNvbXBvc2UuQWdlbnQuZm9jdXMoKTsKfQoKLy8gZG8gaW5pdGlhbGl6YXRpb24gd2hlbiB0aGUgRE9NIGlzIGZ1bGx5IGxvYWRlZApkb2N1bWVudC5vYnNlcnZlKCAiZG9tOmxvYWRlZCIsIGZ1bmN0aW9uKCkgewoKICAgIC8vIGNsZWFyIHRoZSBVc2VyIGlucHV0IGZpZWxkLCB3aGVuIGl0IGdhaW5zIGZvY3VzCiAgICAkKCdteUF1dG9Db21wbGV0ZUlucHV0Jykub2JzZXJ2ZSgKICAgICAgICAnZm9jdXMnLAogICAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0aGlzLnNldFZhbHVlKCcnKTsKICAgICAgICB9CiAgICApOwoKfSApOwoKCi8vLS0+Cjwvc2NyaXB0PgoKPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluaGVhZCI+CiAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRFbnZ7IkJveDAifSAkVGV4dHsiRWRpdCJ9ICRUZXh0eyJXb3JrT3JkZXJBZ2VudCJ9ICRUZXh0eyJvZiJ9ICRDb25maWd7IklUU01Xb3JrT3JkZXI6Okhvb2sifTogJFFEYXRheyJDaGFuZ2VOdW1iZXIifS0kUURhdGF7IldvcmtPcmRlck51bWJlciJ9ICRFbnZ7IkJveDEifSAkUURhdGF7IldvcmtPcmRlclRpdGxlIn0iPgogICAgICAgICAgICAgICAgJEVudnsiQm94MCJ9ICRUZXh0eyJFZGl0In0gJFRleHR7IldvcmtPcmRlckFnZW50In0gJFRleHR7Im9mIn0gJENvbmZpZ3siSVRTTVdvcmtPcmRlcjo6SG9vayJ9OiAkUURhdGF7IkNoYW5nZU51bWJlciJ9LSRRRGF0YXsiV29ya09yZGVyTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiV29ya09yZGVyVGl0bGUiLCI3MCJ9CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWVudSI+CiAgICAgICAgICAgIDxhIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn0kRW52eyJMYXN0V29ya09yZGVyVmlldyJ9IiBvbm1vdXNlb3Zlcj0id2luZG93LnN0YXR1cz0nJEpTVGV4dHsiQmFjayJ9JzsgcmV0dXJuIHRydWU7IiBvbm1vdXNlb3V0PSJ3aW5kb3cuc3RhdHVzPScnOyIgY2xhc3M9Im1lbnVpdGVtIj4kVGV4dHsiQmFjayJ9PC9hPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgoKICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1haW5ib2R5Ij4KICAgICAgICAgICAgPGJyPgogICAgICAgICAgICA8Zm9ybSBhY3Rpb249IiRFbnZ7IkNHSUhhbmRsZSJ9IiBtZXRob2Q9InBvc3QiIG5hbWU9ImNvbXBvc2UiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQWN0aW9uIiAgICB2YWx1ZT0iJEVudnsiQWN0aW9uIn0iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU3ViYWN0aW9uIiB2YWx1ZT0iU2F2ZSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJXb3JrT3JkZXJJRCIgdmFsdWU9IiRRRGF0YXsiV29ya09yZGVySUQifSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTZWxlY3RlZFVzZXIiIHZhbHVlPSIkUURhdGF7IlVzZXJJRCJ9Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlVzZXJTZWFyY2hHcm91cHMiIHZhbHVlPSJpdHNtLWNoYW5nZSI+CiAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iODAwIiBhbGlnbj0iY2VudGVyIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjQiPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50aGVhZCI+JFRleHR7IldvcmtPcmRlckFnZW50In08L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJjb250ZW50Ym9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2xncm91cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iMTMwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvbGdyb3VwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50a2V5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJXb3JrT3JkZXJBZ2VudCJ9OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CjwhLS0gZHRsOmJsb2NrOlVzZXJTZWFyY2hBdXRvQ29tcGxldGVEaXZTdGFydCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im15QXV0b0NvbXBsZXRlIiBjbGFzcz0ibXlBdXRvQ29tcGxldGUiPgo8IS0tIGR0bDpibG9jazpVc2VyU2VhcmNoQXV0b0NvbXBsZXRlRGl2U3RhcnQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJteUF1dG9Db21wbGV0ZUlucHV0IiB0eXBlPSJ0ZXh0IiBuYW1lPSJVc2VyIiB2YWx1ZT0iJFFEYXRheyJVc2VyIn0iIHNpemU9IjcwIi8+CjwhLS0gZHRsOmJsb2NrOlVzZXJTZWFyY2hBdXRvQ29tcGxldGVEaXZFbmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibXlBdXRvQ29tcGxldGVDb250YWluZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwhLS0gZHRsOmJsb2NrOlVzZXJTZWFyY2hBdXRvQ29tcGxldGVEaXZFbmQgLS0+CjwhLS0gZHRsOmJsb2NrOkludmFsaWRVc2VyIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9udCBjb2xvcj0icmVkIiBzaXplPSItMiI+JFRleHR7IklucHV0IGludmFsaWQifTwvZm9udD4KPCEtLSBkdGw6YmxvY2s6SW52YWxpZFVzZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJERhdGF7IlVzZXJTdHJnIn0KPCEtLSBkdGw6YmxvY2s6VGFrZVVzZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPjxpbnB1dCBjbGFzcz0iYnV0dG9uIiB0eXBlPSJzdWJtaXQiIG5hbWU9IkV4cGFuZFVzZXJOYW1lMiIgdmFsdWU9IiRUZXh0eyJUYWtlIHRoaXMgVXNlciJ9Ii8+CjwhLS0gZHRsOmJsb2NrOlRha2VVc2VyIC0tPgo8IS0tIGR0bDpibG9jazpTZWFyY2hVc2VyQnV0dG9uIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidXR0b24iIHR5cGU9InN1Ym1pdCIgbmFtZT0iRXhwYW5kVXNlck5hbWUxIiB2YWx1ZT0iJFRleHR7IlNlYXJjaCBVc2VyIn0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iYnV0dG9uIiB0eXBlPSJzdWJtaXQiIG5hbWU9IkNsZWFyVXNlciIgdmFsdWU9IiRUZXh0eyJDbGVhciJ9ICRUZXh0eyJVc2VyIn0iIG9uY2xpY2s9ImphdmFzY3JpcHQ6Y2xlYXJfZmllbGQoKTsgcmV0dXJuIGZhbHNlOyIvPgo8IS0tIGR0bDpibG9jazpTZWFyY2hVc2VyQnV0dG9uIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRmb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidXR0b24iIHR5cGU9InN1Ym1pdCIgbmFtZT0iU3VibWl0IiB2YWx1ZT0iJFRleHR7IlNhdmUifSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgPGJyPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgo8L3RhYmxlPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderDelete.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderEdit.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderHistory.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVdvcmtPcmRlckhpc3RvcnkuZHRsIC0gcHJvdmlkZXMgSFRNTCBmb3JtIGZvciBBZ2VudElUU01Xb3JrT3JkZXJIaXN0b3J5CiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBBZ2VudElUU01Xb3JrT3JkZXJIaXN0b3J5LmR0bCx2IDEuMTIgMjAxMC8wMi8wNCAxMjoyODoyNCBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmhlYWQiPgogICAgICAgICAgICA8ZGl2IHRpdGxlPSIkRW52eyJCb3gwIn0gJFRleHR7Ikhpc3Rvcnkgb2YifSAkQ29uZmlneyJJVFNNV29ya09yZGVyOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0tJFFEYXRheyJXb3JrT3JkZXJOdW1iZXIifSAkRW52eyJCb3gxIn0gJFFEYXRheyJXb3JrT3JkZXJUaXRsZSJ9Ij4KICAgICAgICAgICAgICAgICRFbnZ7IkJveDAifSAkVGV4dHsiSGlzdG9yeSBvZiJ9ICRDb25maWd7IklUU01Xb3JrT3JkZXI6Okhvb2sifTogJFFEYXRheyJDaGFuZ2VOdW1iZXIifS0kUURhdGF7IldvcmtPcmRlck51bWJlciJ9ICRFbnZ7IkJveDEifSAkUURhdGF7IldvcmtPcmRlclRpdGxlIiwiNzAifQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1lbnUiPgogICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9JEVudnsiTGFzdFdvcmtPcmRlclZpZXcifSIgb25tb3VzZW92ZXI9IndpbmRvdy5zdGF0dXM9JyRKU1RleHR7IkJhY2sifSc7IHJldHVybiB0cnVlOyIgb25tb3VzZW91dD0id2luZG93LnN0YXR1cz0nJzsiIGNsYXNzPSJtZW51aXRlbSI+JFRleHR7IkJhY2sifTwvYT4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1haW5ib2R5Ij4KICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIyIiB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICA8Y29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgPGNvbD4KICAgICAgICAgICAgICAgICAgICA8Y29sPgogICAgICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9IjYwIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPSI2MCIgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGNvbD4KICAgICAgICAgICAgICAgICAgICA8Y29sPgogICAgICAgICAgICAgICAgPC9jb2xncm91cD4KICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY29udGVudGhlYWQiPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IkFjdGlvbiJ9OgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiQ29tbWVudCJ9OgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiRGV0YWlscyJ9OgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiV29ya29yZGVyIn06CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJVc2VyIn06CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJDcmVhdGV0aW1lIn06CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CjwhLS0gZHRsOmJsb2NrOlJvdyAtLT4KICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iJFFEYXRheyJjc3MifSI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAkUXVvdGV7IiREYXRheyJIaXN0b3J5VHlwZSJ9In0KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT0iJFFEYXRheyJDb250ZW50In0iPiRRRGF0YXsiQ29udGVudCIsIjEwMCJ9PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249ImNlbnRlciI+CjwhLS0gZHRsOmJsb2NrOkhpc3Rvcnlab29tRGFzaCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgLQo8IS0tIGR0bDpibG9jazpIaXN0b3J5Wm9vbURhc2ggLS0+CjwhLS0gZHRsOmJsb2NrOkhpc3Rvcnlab29tIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPUFnZW50SVRTTVdvcmtPcmRlckhpc3Rvcnlab29tJkhpc3RvcnlFbnRyeUlEPSREYXRheyJIaXN0b3J5RW50cnlJRCJ9IiBvbm1vdXNlb3Zlcj0id2luZG93LnN0YXR1cz0nJEpTVGV4dHsiTW9yZSBJbmZvIn0nOyByZXR1cm4gdHJ1ZTsiIG9ubW91c2VvdXQ9IndpbmRvdy5zdGF0dXM9Jyc7Ij54PC9hPgo8IS0tIGR0bDpibG9jazpIaXN0b3J5Wm9vbSAtLT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0iY2VudGVyIj4KPCEtLSBkdGw6YmxvY2s6RGFzaCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgLQo8IS0tIGR0bDpibG9jazpEYXNoIC0tPgo8IS0tIGR0bDpibG9jazpXb3JrT3JkZXJab29tIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPUFnZW50SVRTTVdvcmtPcmRlclpvb20mV29ya09yZGVySUQ9JERhdGF7IldvcmtPcmRlcklEIn0iIG9ubW91c2VvdmVyPSJ3aW5kb3cuc3RhdHVzPSckSlNUZXh0eyJab29tIn0nOyByZXR1cm4gdHJ1ZTsiIG9ubW91c2VvdXQ9IndpbmRvdy5zdGF0dXM9Jyc7Ij54PC9hPgo8IS0tIGR0bDpibG9jazpXb3JrT3JkZXJab29tIC0tPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSIkUXVvdGV7IiREYXRheyJVc2VyTG9naW4ifSAoJERhdGF7IlVzZXJGaXJzdG5hbWUifSAkRGF0YXsiVXNlckxhc3RuYW1lIn0pIn0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFF1b3RleyIkRGF0YXsiVXNlckxvZ2luIn0ifSAoJFF1b3RleyIkRGF0YXsiVXNlckZpcnN0bmFtZSJ9ICREYXRheyJVc2VyTGFzdG5hbWUifSIsIjIwIn0pCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAkVGltZUxvbmd7IiREYXRheyJDcmVhdGVUaW1lIn0ifQogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgo8IS0tIGR0bDpibG9jazpSb3cgLS0+CiAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImNvbnRlbnRoZWFkIj4KICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iNiI+Jm5ic3A7PC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwvdGFibGU+Cg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderHistoryZoom.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVdvcmtPcmRlckhpc3Rvcnlab29tLmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWdlbnRJVFNNV29ya09yZGVySGlzdG9yeVpvb20KIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTVdvcmtPcmRlckhpc3Rvcnlab29tLmR0bCx2IDEuMTUgMjAxMC8wMi8wNCAxMjoyODoyNCBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+CiAgICAubm93cmFwIHsKICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgfQoKICAgIC5maWVsZHZhbHVlcyB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwMDAwOwogICAgICAgIHBhZGRpbmc6IDRweDsKICAgIH0KPC9zdHlsZT4KCjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmhlYWQiPgogICAgICAgICAgICA8ZGl2IHRpdGxlPSIkRW52eyJCb3gwIn0gJFRleHR7Ikhpc3Rvcnkgb2YifSAkQ29uZmlneyJJVFNNV29ya09yZGVyOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0tJFFEYXRheyJXb3JrT3JkZXJOdW1iZXIifSAkRW52eyJCb3gxIn0gJFFEYXRheyJXb3JrT3JkZXJUaXRsZSJ9Ij4KICAgICAgICAgICAgICAgICRFbnZ7IkJveDAifSAkVGV4dHsiSGlzdG9yeSBvZiJ9ICRDb25maWd7IklUU01Xb3JrT3JkZXI6Okhvb2sifTogJFFEYXRheyJDaGFuZ2VOdW1iZXIifS0kUURhdGF7IldvcmtPcmRlck51bWJlciJ9ICRFbnZ7IkJveDEifSAkUURhdGF7IldvcmtPcmRlclRpdGxlIiwiNzAifQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1lbnUiPgogICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9JEVudnsiTGFzdFNjcmVlbkhpc3RvcnkifSIgb25tb3VzZW92ZXI9IndpbmRvdy5zdGF0dXM9JyRKU1RleHR7IkJhY2sifSc7IHJldHVybiB0cnVlOyIgb25tb3VzZW91dD0id2luZG93LnN0YXR1cz0nJzsiIGNsYXNzPSJtZW51aXRlbSI+JFRleHR7IkJhY2sifTwvYT4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1haW5ib2R5Ij4KICAgICAgICAgICAgPGJyPgogICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iODAwIiBhbGlnbj0iY2VudGVyIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGhlYWQiPgogICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiRGV0YWlsZWQgaGlzdG9yeSBpbmZvcm1hdGlvbiBvZiJ9IFdvcmtvcmRlciB1cGRhdGUKICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iY29udGVudGJvZHkiPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iMTMwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2xncm91cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkgbm93cmFwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7Ik1vZGlmaWVkIn06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRRRGF0YXsiRmllbGRuYW1lIn0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkgbm93cmFwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7Ik9sZCBWYWx1ZSJ9OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaWVsZHZhbHVlcyI+JERhdGF7IkNvbnRlbnRPbGQifTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSBub3dyYXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiTmV3IFZhbHVlIn06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZWxkdmFsdWVzIj4kRGF0YXsiQ29udGVudE5ldyJ9PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50a2V5IG5vd3JhcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJDaGFuZ2VkIn06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUaW1lTG9uZ3siJERhdGF7IkNoYW5nZVRpbWUifSJ9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50a2V5IG5vd3JhcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJDaGFuZ2VkIGJ5In06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRRdW90ZXsiJERhdGF7IlVzZXJMb2dpbiJ9ICgkRGF0YXsiVXNlckZpcnN0bmFtZSJ9ICREYXRheyJVc2VyTGFzdG5hbWUifSkifSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUXVvdGV7IiREYXRheyJVc2VyTG9naW4ifSJ9ICgkUXVvdGV7IiREYXRheyJVc2VyRmlyc3RuYW1lIn0gJERhdGF7IlVzZXJMYXN0bmFtZSJ9IiwiMjAifSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50Zm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDxicj4KICAgICAgICA8L3RkPgogICAgPC90cj4KPC90YWJsZT4K</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderPrint.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVdvcmtPcmRlclByaW50LmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWdlbnRJVFNNV29ya09yZGVyUHJpbnQKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAwOSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEFnZW50SVRTTVdvcmtPcmRlclByaW50LmR0bCx2IDEuMSAyMDA5LzEwLzExIDIzOjE4OjQ5IHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderReport.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderTake.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVdvcmtPcmRlclRha2UuZHRsIC0gcHJvdmlkZXMgSFRNTCBmb3JtIGZvciBBZ2VudElUU01Xb3JrT3JkZXJUYWtlCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMub3JnLwojIC0tCiMgJElkOiBBZ2VudElUU01Xb3JrT3JkZXJUYWtlLmR0bCx2IDEuNyAyMDEwLzA1LzE4IDE1OjAyOjQ0IHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgo8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIzIj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1haW5oZWFkIj4KICAgICAgICAgICAgPGRpdiB0aXRsZT0iJEVudnsiQm94MCJ9ICRUZXh0eyJUYWtlIFdvcmtvcmRlciJ9IDogJENvbmZpZ3siSVRTTVdvcmtPcmRlcjo6SG9vayJ9OiAkUURhdGF7IkNoYW5nZU51bWJlciJ9LSRRRGF0YXsiV29ya09yZGVyTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiV29ya09yZGVyVGl0bGUifSI+CiAgICAgICAgICAgICAgICAkRW52eyJCb3gwIn0gJFRleHR7IlRha2UgV29ya29yZGVyIn0gOiAkQ29uZmlneyJJVFNNV29ya09yZGVyOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0tJFFEYXRheyJXb3JrT3JkZXJOdW1iZXIifSAkRW52eyJCb3gxIn0gJFFEYXRheyJXb3JrT3JkZXJUaXRsZSIsIjcwIn0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtZW51Ij4KICAgICAgICAgICAgPGEgaHJlZj0iJEVudnsiQmFzZWxpbmsifSRFbnZ7Ikxhc3RXb3JrT3JkZXJWaWV3In0iIG9ubW91c2VvdmVyPSJ3aW5kb3cuc3RhdHVzPSckSlNUZXh0eyJCYWNrIn0nOyByZXR1cm4gdHJ1ZTsiIG9ubW91c2VvdXQ9IndpbmRvdy5zdGF0dXM9Jyc7IiBjbGFzcz0ibWVudWl0ZW0iPiRUZXh0eyJCYWNrIn08L2E+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmJvZHkiPgogICAgICAgICAgICA8YnI+CiAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSI0MDAiIGFsaWduPSJjZW50ZXIiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iNCI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50aGVhZCI+JFRleHR7IlRha2UgV29ya29yZGVyIn0gOiAkQ29uZmlneyJJVFNNV29ya09yZGVyOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0tJFFEYXRheyJXb3JrT3JkZXJOdW1iZXIifTwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJjb250ZW50Ym9keSI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50Ym9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbGdyb3VwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2wgd2lkdGg9IjEzMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50a2V5Ij4kVGV4dHsiVGl0bGUifTo8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudHZhbHVlIj4kUURhdGF7IldvcmtPcmRlclRpdGxlIn08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiPiRUZXh0eyJDdXJyZW50IEFnZW50In06PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+JFFEYXRheyJXb3JrT3JkZXJBZ2VudCJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjIiPiZuYnNwOzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSIyIiBjbGFzcz0iY29udGVudGtleSI+JFRleHR7IkRvIHlvdSByZWFsbHkgd2FudCB0byB0YWtlIHRoaXMgd29ya29yZGVyPyJ9PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50Zm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIHdpZHRoPSIxMDAlIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPSIxMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvbGdyb3VwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iJEVudnsiQ0dJSGFuZGxlIn0iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJBY3Rpb24iICAgIHZhbHVlPSJBZ2VudElUU01Xb3JrT3JkZXJab29tIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IldvcmtPcmRlcklEIiB2YWx1ZT0iJFFEYXRheyJXb3JrT3JkZXJJRCJ9Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTdWJhY3Rpb24iIHZhbHVlPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidXR0b24iIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiRUZXh0eyJObyJ9Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iJEVudnsiQ0dJSGFuZGxlIn0iIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJBY3Rpb24iIHZhbHVlPSIkRW52eyJBY3Rpb24ifSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU3ViYWN0aW9uIiB2YWx1ZT0iV29ya09yZGVyVGFrZSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iV29ya09yZGVySUQiIHZhbHVlPSIkUURhdGF7IldvcmtPcmRlcklEIn0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iYnV0dG9uIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSIkVGV4dHsiWWVzIn0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgo8L3RhYmxlPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderTemplate.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVdvcmtPcmRlclRlbXBsYXRlLmR0bCAtIHByb3ZpZGVzIEhUTUwgZm9ybSBmb3IgQWdlbnRJVFNNV29ya09yZGVyVGVtcGxhdGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IEFnZW50SVRTTVdvcmtPcmRlclRlbXBsYXRlLmR0bCx2IDEuMTIgMjAxMC8wNS8xOCAxMzo1NDozMSB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgo8IS0tCgpmdW5jdGlvbiBzdWJtaXRfY29tcG9zZSgpIHsKCiAgICAvLyBjaGVjayB0aGUgdGVtcGxhdGUgbmFtZSwgYWxsIHdoaXRlc3BhY2UgY291bnRzIGFzIGVtcHR5CiAgICBpZiAoZG9jdW1lbnQuY29tcG9zZS5UZW1wbGF0ZU5hbWUudmFsdWUubWF0Y2goL15ccyokLykpIHsKICAgICAgICBhbGVydCgnJEpTVGV4dHsiQSB0ZW1wbGF0ZSBtdXN0IGhhdmUgYSBuYW1lISJ9Jyk7CiAgICAgICAgZG9jdW1lbnQuY29tcG9zZS5UZW1wbGF0ZU5hbWUuZm9jdXMoKTsKCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVybiB0cnVlOwp9CgovLy0tPgo8L3NjcmlwdD4KCjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPHRyPgogICAgICAgIDx0ZCBjbGFzcz0ibWFpbmhlYWQiPgogICAgICAgICAgICA8ZGl2IHRpdGxlPSIkRW52eyJCb3gwIn0gJFRleHR7IlNhdmUgV29ya29yZGVyIGFzIHRlbXBsYXRlIn0gOiAkQ29uZmlneyJJVFNNV29ya09yZGVyOjpIb29rIn06ICRRRGF0YXsiQ2hhbmdlTnVtYmVyIn0tJFFEYXRheyJXb3JrT3JkZXJOdW1iZXIifSAkRW52eyJCb3gxIn0gJFFEYXRheyJXb3JrT3JkZXJUaXRsZSJ9Ij4KICAgICAgICAgICAgICAgICRFbnZ7IkJveDAifSAkVGV4dHsiU2F2ZSBXb3Jrb3JkZXIgYXMgdGVtcGxhdGUifSA6ICRDb25maWd7IklUU01Xb3JrT3JkZXI6Okhvb2sifTogJFFEYXRheyJDaGFuZ2VOdW1iZXIifS0kUURhdGF7IldvcmtPcmRlck51bWJlciJ9ICRFbnZ7IkJveDEifSAkUURhdGF7IldvcmtPcmRlclRpdGxlIiwiNzAifQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1lbnUiPgogICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9JEVudnsiTGFzdFdvcmtPcmRlclZpZXcifSIgb25tb3VzZW92ZXI9IndpbmRvdy5zdGF0dXM9JyRKU1RleHR7IkJhY2sifSc7IHJldHVybiB0cnVlOyIgb25tb3VzZW91dD0id2luZG93LnN0YXR1cz0nJzsiIGNsYXNzPSJtZW51aXRlbSI+JFRleHR7IkJhY2sifTwvYT4KICAgICAgICA8L3RkPgogICAgPC90cj4KCiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluYm9keSI+CiAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIkRW52eyJDR0lIYW5kbGUifSIgbWV0aG9kPSJwb3N0IiBuYW1lPSJjb21wb3NlIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkFjdGlvbiIgICAgICAgdmFsdWU9IiRFbnZ7IkFjdGlvbiJ9Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlN1YmFjdGlvbiIgICAgdmFsdWU9IkFkZFRlbXBsYXRlIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IldvcmtPcmRlcklEIiAgdmFsdWU9IiRRRGF0YXsiV29ya09yZGVySUQifSI+CiAgICAgICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iODAwIiBhbGlnbj0iY2VudGVyIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjQiPgogICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50aGVhZCI+JFRleHR7IlNhdmUgV29ya29yZGVyIGFzIHRlbXBsYXRlIn08L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJjb250ZW50Ym9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2xncm91cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iMTMwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2xncm91cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiVGVtcGxhdGUgTmFtZSJ9OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvbnQgY29sb3I9InJlZCIgdGl0bGU9IiRUZXh0eyJSZXF1aXJlZCJ9Ij4qPC9mb250PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iVGVtcGxhdGVOYW1lIiB2YWx1ZT0iJFFEYXRheyJUZW1wbGF0ZU5hbWUifSIgc2l6ZT0iNzAiIG1heGxlbmd0aD0iMjUwIj4KPCEtLSBkdGw6YmxvY2s6SW52YWxpZFRlbXBsYXRlTmFtZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvbnQgY29sb3I9InJlZCIgc2l6ZT0iLTIiPiRUZXh0eyJJbnB1dCBpbnZhbGlkIn08L2ZvbnQ+CjwhLS0gZHRsOmJsb2NrOkludmFsaWRUZW1wbGF0ZU5hbWUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiQ29tbWVudCJ9OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iQ29tbWVudCIgdmFsdWU9IiRRRGF0YXsiQ29tbWVudCJ9IiBzaXplPSI3MCIgbWF4bGVuZ3RoPSIyNTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRrZXkiPiRUZXh0eyJWYWxpZCJ9OiA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+JERhdGF7IlZhbGlkU2VsZWN0aW9uU3RyaW5nIn08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRmb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidXR0b24iIGlkPSJzdWJtaXRBZGRUZW1wbGF0ZSIgYWNjZXNza2V5PSJnIiB0eXBlPSJzdWJtaXQiIG5hbWU9IkFkZFRlbXBsYXRlIiB2YWx1ZT0iJFRleHR7IkFkZCJ9IiBvbmNsaWNrPSJyZXR1cm4gc3VibWl0X2NvbXBvc2UoKTsiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8YnI+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwvdGFibGU+Cg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMWorkOrderZoom.dtl" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTVdvcmtPcmRlclpvb20uZHRsIC0gcHJvdmlkZXMgSFRNTCBmb3JtIGZvciBBZ2VudElUU01Xb3JrT3JkZXJab29tCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBBZ2VudElUU01Xb3JrT3JkZXJab29tLmR0bCx2IDEuNDIgMjAxMC8wNC8yNyAyMDo0NTowNCB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICA8dHI+CiAgICAgICAgPHRkIGNsYXNzPSJtYWluaGVhZCI+CiAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRFbnZ7IkJveDAifSAkVGV4dHsiWm9vbSJ9ICRDb25maWd7IklUU01Xb3JrT3JkZXI6Okhvb2sifTogJFFEYXRheyJDaGFuZ2VOdW1iZXIifS0kUURhdGF7IldvcmtPcmRlck51bWJlciJ9ICRFbnZ7IkJveDEifSAkUURhdGF7IldvcmtPcmRlclRpdGxlIn0iPgogICAgICAgICAgICAgICAgJEVudnsiQm94MCJ9ICRUZXh0eyJab29tIn0gJENvbmZpZ3siSVRTTVdvcmtPcmRlcjo6SG9vayJ9OiAkUURhdGF7IkNoYW5nZU51bWJlciJ9LSRRRGF0YXsiV29ya09yZGVyTnVtYmVyIn0gJEVudnsiQm94MSJ9ICRRRGF0YXsiV29ya09yZGVyVGl0bGUiLCI3MCJ9CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgo8L3RhYmxlPgo8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIzIj4KICAgIDx0cj4KICAgICAgICA8dGQgd2lkdGg9Ijc1JSIgY2xhc3M9Im1lbnUiPgo8IS0tIGR0bDpibG9jazpNZW51IC0tPgo8IS0tIGR0bDpibG9jazpNZW51SXRlbVNwbGl0IC0tPgogICAgICAgICAgICAtCjwhLS0gZHRsOmJsb2NrOk1lbnVJdGVtU3BsaXQgLS0+CjwhLS0gZHRsOmJsb2NrOk1lbnVJdGVtIC0tPgogICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9JERhdGF7IkxpbmsifSIgJERhdGF7IkxpbmtQYXJhbSJ9IG9ubW91c2VvdmVyPSJ3aW5kb3cuc3RhdHVzPSckSlNUZXh0eyIkUURhdGF7Ik5hbWUifSJ9JzsgcmV0dXJuIHRydWU7IiBvbm1vdXNlb3V0PSJ3aW5kb3cuc3RhdHVzPScnOyIgY2xhc3M9Im1lbnVpdGVtIiB0aXRsZT0iJFRleHR7IiRRRGF0YXsiRGVzY3JpcHRpb24ifSJ9Ij4kVGV4dHsiJFFEYXRheyJOYW1lIn0ifTwvYT4KPCEtLSBkdGw6YmxvY2s6TWVudUl0ZW0gLS0+CjwhLS0gZHRsOmJsb2NrOk1lbnUgLS0+CiAgICAgICAgPC90ZD4KICAgICAgICA8dGQgYWxpZ249InJpZ2h0IiB3aWR0aD0iMjUlIiBjbGFzcz0ibWVudSI+PC90ZD4KICAgIDwvdHI+CjwvdGFibGU+Cjx0YWJsZSBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjMiPgogICAgPGNvbGdyb3VwPgogICAgICAgIDxjb2wgd2lkdGg9Ijc1JSI+CiAgICAgICAgPGNvbCB3aWR0aD0iMjUlIj4KICAgIDwvY29sZ3JvdXA+CiAgICA8dHI+CiAgICAgICAgPHRkIHZhbGlnbj0idG9wIiBjbGFzcz0ibWFpbmJvZHkiPgogICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIxIj4KICAgICAgICAgICAgICAgIDxjb2xncm91cD4KICAgICAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPSIzMCI+CiAgICAgICAgICAgICAgICAgICAgPGNvbD4KICAgICAgICAgICAgICAgIDwvY29sZ3JvdXA+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGJvcmRlcj0iMCIgc3JjPSIkQ29uZmlneyJGcm9udGVuZDo6SW1hZ2VQYXRoIn0kUURhdGF7IkNoYW5nZVN0YXRlU2lnbmFsIn0ucG5nIiB0aXRsZT0iJFRleHR7IiRRRGF0YXsiQ2hhbmdlU3RhdGUifSJ9IiBhbHQ9IiRUZXh0eyIkUURhdGF7IkNoYW5nZVN0YXRlIn0ifSI+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ29uZmlneyJJVFNNQ2hhbmdlOjpIb29rIn0gJFFEYXRheyJDaGFuZ2VOdW1iZXIifQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iJEVudnsiQmFzZWxpbmsifSREYXRheyJMaW5rIn0mYW1wO0FjdGlvbj1BZ2VudElUU01DaGFuZ2Vab29tJmFtcDtDaGFuZ2VJRD0kTFFEYXRheyJDaGFuZ2VJRCJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUURhdGF7IkNoYW5nZVRpdGxlIiwiNzAifQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGJvcmRlcj0iMCIgc3JjPSIkQ29uZmlneyJGcm9udGVuZDo6SW1hZ2VQYXRoIn0kUURhdGF7IldvcmtPcmRlclN0YXRlU2lnbmFsIn0tc21hbGwucG5nIiB0aXRsZT0iJFRleHR7IiRRRGF0YXsiV29ya09yZGVyU3RhdGUifSJ9IiBhbHQ9IiRUZXh0eyIkUURhdGF7IldvcmtPcmRlclN0YXRlIn0ifSI+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyBmb250LXNpemU6MTBweDsgZm9udC1zdHlsZTppdGFsaWM7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRDb25maWd7IklUU01Xb3JrT3JkZXI6Okhvb2sifSAkUURhdGF7IkNoYW5nZU51bWJlciJ9LSRRRGF0YXsiV29ya09yZGVyTnVtYmVyIn0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJjb2xvcjojNTU3Nzk5OyI+JFFEYXRheyJXb3JrT3JkZXJUaXRsZSIsIjcwIn08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPGhyIHNpemU9IjIiPgogICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIxIj4KICAgICAgICAgICAgICAgIDxjb2xncm91cD4KICAgICAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPSIxMzAiPgogICAgICAgICAgICAgICAgICAgIDxjb2w+CiAgICAgICAgICAgICAgICA8L2NvbGdyb3VwPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRUZXh0eyJJbnN0cnVjdGlvbiJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJJbnN0cnVjdGlvbiJ9OiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOwogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudHZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgJERhdGF7Ikluc3RydWN0aW9uIn0KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj48dGQgY29sc3Bhbj0iMiI+Jm5ic3A7PC90ZD48L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRUZXh0eyJSZXBvcnQifSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiUmVwb3J0In06Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAkRGF0YXsiUmVwb3J0In0KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj48dGQgY29sc3Bhbj0iMiI+Jm5ic3A7PC90ZD48L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudGtleSIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiB0b3AiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSIkVGV4dHsiQXR0YWNobWVudCJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUZXh0eyJBdHRhY2htZW50In06Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb250ZW50dmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iMjUwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sIHdpZHRoPSIxNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbCB3aWR0aD0iMTAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2xncm91cD4KPCEtLSBkdGw6YmxvY2s6QXR0YWNobWVudFJvdyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JERhdGF7IkZpbGVuYW1lIn08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YSBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPSRFbnZ7IkFjdGlvbiJ9O1N1YmFjdGlvbj1Eb3dubG9hZEF0dGFjaG1lbnQ7RmlsZUlEPSRRRGF0YXsiRmlsZUlEIn07V29ya09yZGVySUQ9JFFEYXRheyJXb3JrT3JkZXJJRCJ9Ij48aW1nIHNyYz0iJENvbmZpZ3siRnJvbnRlbmQ6OkltYWdlUGF0aCJ9ZGlzay1zLnBuZyIgYm9yZGVyPSIwIiBhbHQ9IkRvd25sb2FkIiB0aXRsZT0iRG93bmxvYWQiLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+JERhdGF7IkZpbGVzaXplIn08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6QXR0YWNobWVudFJvdyAtLT4KPCEtLSBlbXB0eSByb3csIGZvciBoYXZpbmcgYSB2YWxpZCBIVE1MIHRhYmxlIGluIHRoZSBhYnNlbmNlIG9mIGF0dGFjaG1lbnRzIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZCBjb2xzcGFuPSIzIj48L3RkPjwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+PHRkIGNvbHNwYW49IjIiPiZuYnNwOzwvdGQ+PC90cj4KICAgICAgICAgICAgPC90YWJsZT4KPCEtLSBkdGw6YmxvY2s6TGlua1RhYmxlQ29tcGxleCAtLT4KICAgICAgICAgICAgPGhyIHNpemU9IjIiPgogICAgICAgICAgICA8YnI+CiAgICAgICAgICAgIDx0YWJsZSB3aWR0aD0iOTglIiBhbGlnbj0iY2VudGVyIiBib3JkZXI9IjAiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMCI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAkRGF0YXsiTGlua1RhYmxlU3RyZyJ9CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDxicj4KPCEtLSBkdGw6YmxvY2s6TGlua1RhYmxlQ29tcGxleCAtLT4KICAgICAgICA8L3RkPgogICAgICAgIDx0ZCB2YWxpZ249InRvcCIgY2xhc3M9Im1lbnUiPgo8IS0tIGR0bDpibG9jazpNZXRhIC0tPgogICAgICAgICAgICA8dGFibGUgYm9yZGVyPSIwIiBjZWxsc3BhY2luZz0iMSIgY2VsbHBhZGRpbmc9IjAiIHdpZHRoPSIxMDAlIj4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQ+PGI+JFRleHR7IldvcmtPcmRlclN0YXRlIn06IDwvYj48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRUZXh0eyIkUURhdGF7IldvcmtPcmRlclN0YXRlIn0ifSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRleHR7IiREYXRheyJXb3JrT3JkZXJTdGF0ZSJ9In0mbmJzcDsmbmJzcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGJvcmRlcj0iMCIgc3JjPSIkQ29uZmlneyJGcm9udGVuZDo6SW1hZ2VQYXRoIn0kUURhdGF7IldvcmtPcmRlclN0YXRlU2lnbmFsIn0ucG5nIiB0aXRsZT0iJFRleHR7IiRRRGF0YXsiV29ya09yZGVyU3RhdGUifSJ9IiBhbHQ9IiRUZXh0eyIkUURhdGF7IldvcmtPcmRlclN0YXRlIn0ifSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPjxiPiRUZXh0eyJXb3JrT3JkZXJUeXBlIn06IDwvYj48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KPCEtLSBkdGw6YmxvY2s6RW1wdHlXb3JrT3JkZXJUeXBlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSItIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwhLS0gZHRsOmJsb2NrOkVtcHR5V29ya09yZGVyVHlwZSAtLT4KPCEtLSBkdGw6YmxvY2s6V29ya09yZGVyVHlwZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT0iJFFEYXRheyJXb3JrT3JkZXJUeXBlIn0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFFEYXRheyJXb3JrT3JkZXJUeXBlIn0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwhLS0gZHRsOmJsb2NrOldvcmtPcmRlclR5cGUgLS0+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjIiPiZuYnNwOzwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD48Yj4kVGV4dHsiUGxhbm5lZFN0YXJ0VGltZSJ9OiA8L2I+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CjwhLS0gZHRsOmJsb2NrOkVtcHR5UGxhbm5lZFN0YXJ0VGltZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT0iLSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pgo8IS0tIGR0bDpibG9jazpFbXB0eVBsYW5uZWRTdGFydFRpbWUgLS0+CjwhLS0gZHRsOmJsb2NrOlBsYW5uZWRTdGFydFRpbWUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRRRGF0YXsiUGxhbm5lZFN0YXJ0VGltZSJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUaW1lTG9uZ3siJERhdGF7IlBsYW5uZWRTdGFydFRpbWUifSJ9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pgo8IS0tIGR0bDpibG9jazpQbGFubmVkU3RhcnRUaW1lIC0tPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD48Yj4kVGV4dHsiUGxhbm5lZEVuZFRpbWUifTogPC9iPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgo8IS0tIGR0bDpibG9jazpFbXB0eVBsYW5uZWRFbmRUaW1lIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSItIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwhLS0gZHRsOmJsb2NrOkVtcHR5UGxhbm5lZEVuZFRpbWUgLS0+CjwhLS0gZHRsOmJsb2NrOlBsYW5uZWRFbmRUaW1lIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSIkUURhdGF7IlBsYW5uZWRFbmRUaW1lIn0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRpbWVMb25neyIkRGF0YXsiUGxhbm5lZEVuZFRpbWUifSJ9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pgo8IS0tIGR0bDpibG9jazpQbGFubmVkRW5kVGltZSAtLT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQ+PGI+JFRleHR7IkFjdHVhbFN0YXJ0VGltZSJ9OiA8L2I+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CjwhLS0gZHRsOmJsb2NrOkVtcHR5QWN0dWFsU3RhcnRUaW1lIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSItIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwhLS0gZHRsOmJsb2NrOkVtcHR5QWN0dWFsU3RhcnRUaW1lIC0tPgo8IS0tIGR0bDpibG9jazpBY3R1YWxTdGFydFRpbWUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRRRGF0YXsiQWN0dWFsU3RhcnRUaW1lIn0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFRpbWVMb25neyIkRGF0YXsiQWN0dWFsU3RhcnRUaW1lIn0ifQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KPCEtLSBkdGw6YmxvY2s6QWN0dWFsU3RhcnRUaW1lIC0tPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD48Yj4kVGV4dHsiQWN0dWFsRW5kVGltZSJ9OiA8L2I+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CjwhLS0gZHRsOmJsb2NrOkVtcHR5QWN0dWFsRW5kVGltZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT0iLSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pgo8IS0tIGR0bDpibG9jazpFbXB0eUFjdHVhbEVuZFRpbWUgLS0+CjwhLS0gZHRsOmJsb2NrOkFjdHVhbEVuZFRpbWUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRRRGF0YXsiQWN0dWFsRW5kVGltZSJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUaW1lTG9uZ3siJERhdGF7IkFjdHVhbEVuZFRpbWUifSJ9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pgo8IS0tIGR0bDpibG9jazpBY3R1YWxFbmRUaW1lIC0tPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSIyIj4mbmJzcDs8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6U2hvd1BsYW5uZWRFZmZvcnQgLS0+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkPjxiPiRUZXh0eyJQbGFubmVkRWZmb3J0In06IDwvYj48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KPCEtLSBkdGw6YmxvY2s6RW1wdHlQbGFubmVkRWZmb3J0IC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSItIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwhLS0gZHRsOmJsb2NrOkVtcHR5UGxhbm5lZEVmZm9ydCAtLT4KPCEtLSBkdGw6YmxvY2s6UGxhbm5lZEVmZm9ydCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT0iJFFEYXRheyJQbGFubmVkRWZmb3J0In0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFFEYXRheyJQbGFubmVkRWZmb3J0In0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwhLS0gZHRsOmJsb2NrOlBsYW5uZWRFZmZvcnQgLS0+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CjwhLS0gZHRsOmJsb2NrOlNob3dQbGFubmVkRWZmb3J0IC0tPgo8IS0tIGR0bDpibG9jazpTaG93QWNjb3VudGVkVGltZSAtLT4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQ+PGI+JFRleHR7IkFjY291bnRlZFRpbWUifTogPC9iPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgo8IS0tIGR0bDpibG9jazpFbXB0eUFjY291bnRlZFRpbWUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9Ii0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KPCEtLSBkdGw6YmxvY2s6RW1wdHlBY2NvdW50ZWRUaW1lIC0tPgo8IS0tIGR0bDpibG9jazpBY2NvdW50ZWRUaW1lIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSIkUURhdGF7IkFjY291bnRlZFRpbWUifSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUURhdGF7IkFjY291bnRlZFRpbWUifQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KPCEtLSBkdGw6YmxvY2s6QWNjb3VudGVkVGltZSAtLT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KPCEtLSBkdGw6YmxvY2s6U2hvd0FjY291bnRlZFRpbWUgLS0+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjIiPiZuYnNwOzwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD48Yj4kVGV4dHsiQ2hhbmdlIEJ1aWxkZXIifTo8L2I+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CjwhLS0gZHRsOmJsb2NrOkVtcHR5Q2hhbmdlQnVpbGRlciAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT0iLSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pgo8IS0tIGR0bDpibG9jazpFbXB0eUNoYW5nZUJ1aWxkZXIgLS0+CjwhLS0gZHRsOmJsb2NrOkNoYW5nZUJ1aWxkZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRRRGF0YXsiQ2hhbmdlQnVpbGRlclVzZXJMb2dpbiJ9ICgkUXVvdGV7IiREYXRheyJDaGFuZ2VCdWlsZGVyVXNlckZpcnN0bmFtZSJ9ICREYXRheyJDaGFuZ2VCdWlsZGVyVXNlckxhc3RuYW1lIn0ifSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFFEYXRheyJDaGFuZ2VCdWlsZGVyVXNlckxvZ2luIiwiMTUifSAoJFF1b3RleyIkRGF0YXsiQ2hhbmdlQnVpbGRlclVzZXJGaXJzdG5hbWUifSAkRGF0YXsiQ2hhbmdlQnVpbGRlclVzZXJMYXN0bmFtZSJ9IiwiMTUifSkKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwhLS0gZHRsOmJsb2NrOkNoYW5nZUJ1aWxkZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjIiPiZuYnNwOzwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZD48Yj4kVGV4dHsiV29ya09yZGVyQWdlbnQifTo8L2I+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQ+CjwhLS0gZHRsOmJsb2NrOkVtcHR5V29ya09yZGVyQWdlbnQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9Ii0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KPCEtLSBkdGw6YmxvY2s6RW1wdHlXb3JrT3JkZXJBZ2VudCAtLT4KPCEtLSBkdGw6YmxvY2s6V29ya09yZGVyQWdlbnQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRRRGF0YXsiV29ya09yZGVyQWdlbnRVc2VyTG9naW4ifSAoJFF1b3RleyIkRGF0YXsiV29ya09yZGVyQWdlbnRVc2VyRmlyc3RuYW1lIn0gJERhdGF7IldvcmtPcmRlckFnZW50VXNlckxhc3RuYW1lIn0ifSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFFEYXRheyJXb3JrT3JkZXJBZ2VudFVzZXJMb2dpbiIsIjE1In0gKCRRdW90ZXsiJERhdGF7IldvcmtPcmRlckFnZW50VXNlckZpcnN0bmFtZSJ9ICREYXRheyJXb3JrT3JkZXJBZ2VudFVzZXJMYXN0bmFtZSJ9IiwiMTUifSkKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CjwhLS0gZHRsOmJsb2NrOldvcmtPcmRlckFnZW50IC0tPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSIyIj4mbmJzcDs8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im1haW5rZXkiPiRUZXh0eyJDcmVhdGVkIn06PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im1haW52YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRRRGF0YXsiQ3JlYXRlVGltZSJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUaW1lTG9uZ3siJERhdGF7IkNyZWF0ZVRpbWUifSJ9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWFpbmtleSI+JFRleHR7IkNyZWF0ZWQgYnkifTo8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0aXRsZT0iJFFEYXRheyJDcmVhdGVVc2VyTG9naW4ifSAoJFF1b3RleyIkRGF0YXsiQ3JlYXRlVXNlckZpcnN0bmFtZSJ9ICREYXRheyJDcmVhdGVVc2VyTGFzdG5hbWUifSJ9KSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUURhdGF7IkNyZWF0ZVVzZXJMb2dpbiIsIjE1In0gKCRRdW90ZXsiJERhdGF7IkNyZWF0ZVVzZXJGaXJzdG5hbWUifSAkRGF0YXsiQ3JlYXRlVXNlckxhc3RuYW1lIn0iLCIxNSJ9KQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMiI+Jm5ic3A7PC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJtYWlua2V5Ij4kVGV4dHsiTGFzdCBjaGFuZ2VkIn06PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im1haW52YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGl0bGU9IiRRRGF0YXsiQ2hhbmdlVGltZSJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUaW1lTG9uZ3siJERhdGF7IkNoYW5nZVRpbWUifSJ9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibWFpbmtleSI+JFRleHR7Ikxhc3QgY2hhbmdlZCBieSJ9OjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPSIkUURhdGF7IkNoYW5nZVVzZXJMb2dpbiJ9ICgkUXVvdGV7IiREYXRheyJDaGFuZ2VVc2VyRmlyc3RuYW1lIn0gJERhdGF7IkNoYW5nZVVzZXJMYXN0bmFtZSJ9In0pIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRRRGF0YXsiQ2hhbmdlVXNlckxvZ2luIiwiMTUifSAoJFF1b3RleyIkRGF0YXsiQ2hhbmdlVXNlckZpcnN0bmFtZSJ9ICREYXRheyJDaGFuZ2VVc2VyTGFzdG5hbWUifSIsIjE1In0pCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgo8IS0tIGR0bDpibG9jazpMaW5rVGFibGVTaW1wbGUgLS0+CiAgICAgICAgICAgICAgICAkRGF0YXsiTGlua1RhYmxlU3RyZyJ9CjwhLS0gZHRsOmJsb2NrOkxpbmtUYWJsZVNpbXBsZSAtLT4KICAgICAgICAgICAgPC90YWJsZT4KPCEtLSBkdGw6YmxvY2s6TWV0YSAtLT4KICAgICAgICA8L3RkPgogICAgPC90cj4KPC90YWJsZT4K</File>
        <File Location="Kernel/Output/HTML/Standard/ITSMChange.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMChangeCIPAllocate.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/History.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9IaXN0b3J5LnBtIC0gYWxsIGNoYW5nZSBhbmQgd29ya29yZGVyIGhpc3RvcnkgZnVuY3Rpb25zCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMub3JnLwojIC0tCiMgJElkOiBIaXN0b3J5LnBtLHYgMS4yNi4yLjIgMjAxMC8wNi8xNCAxNzozMDowNCB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SGlzdG9yeTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6VXNlcjsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuMjYuMi4yICQpIFsxXTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SGlzdG9yeSAtIGFsbCBjaGFuZ2UgYW5kIHdvcmtvcmRlciBoaXN0b3J5IGZ1bmN0aW9ucwoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgaGlzdG9yeSBmdW5jdGlvbnMuCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICB1c2UgS2VybmVsOjpDb25maWc7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkVuY29kZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TG9nOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpEQjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TWFpbjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6VGltZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SGlzdG9yeTsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkVGltZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpUaW1lLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJERCT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkRCLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIG15ICRIaXN0b3J5T2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6Okhpc3RvcnktPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIFRpbWVPYmplY3QgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAocXcoREJPYmplY3QgQ29uZmlnT2JqZWN0IEVuY29kZU9iamVjdCBMb2dPYmplY3QgTWFpbk9iamVjdCBUaW1lT2JqZWN0KSkgewogICAgICAgICRTZWxmLT57JE9iamVjdH0gPSAkUGFyYW17JE9iamVjdH0gfHwgZGllICJHb3Qgbm8gJE9iamVjdCEiOwogICAgfQoKICAgICMgc2V0IGRlZmF1bHQgZGVidWcgZmxhZwogICAgJFNlbGYtPntEZWJ1Z30gfHw9IDA7CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCiAgICAkU2VsZi0+e1VzZXJPYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OlVzZXItPm5ldyggJXskU2VsZn0gKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIEhpc3RvcnlBZGQoKQoKQWRkcyBhIHNpbmdsZSBoaXN0b3J5IGVudHJ5IHRvIHRoZSBoaXN0b3J5LiBSZXR1cm5zIDEgb24gc3VjY2VzcywgQzx1bmRlZj4gb3RoZXJ3aXNlLgoKICAgIG15ICRTdWNjZXNzID0gJEhpc3RvcnlPYmplY3QtPkhpc3RvcnlBZGQoCiAgICAgICAgQ2hhbmdlSUQgICAgICA9PiAxMjM0LCAgICAgICAgICAgICMgZWl0aGVyIENoYW5nZUlEIG9yIFdvcmtPcmRlcklEIGlzIG5lZWRlZAogICAgICAgIFdvcmtPcmRlcklEICAgPT4gMTIzLCAgICAgICAgICAgICAjIGVpdGhlciBDaGFuZ2VJRCBvciBXb3JrT3JkZXJJRCBpcyBuZWVkZWQKICAgICAgICBIaXN0b3J5VHlwZSAgID0+ICdXb3JrT3JkZXJBZGQnLCAgIyBlaXRoZXIgSGlzdG9yeVR5cGUgb3IgSGlzdG9yeVR5cGVJRCBpcyBuZWVkZWQKICAgICAgICBIaXN0b3J5VHlwZUlEID0+IDEsICAgICAgICAgICAgICAgIyBlaXRoZXIgSGlzdG9yeVR5cGUgb3IgSGlzdG9yeVR5cGVJRCBpcyBuZWVkZWQKICAgICAgICBGaWVsZG5hbWUgICAgID0+ICdKdXN0aWZpY2F0aW9uJywgIyBvcHRpb25hbAogICAgICAgIENvbnRlbnROZXcgICAgPT4gJ0FueSB1c2VmdWwgaW5mb3JtYXRpb24nLCAjIG9wdGlvbmFsCiAgICAgICAgQ29udGVudE9sZCAgICA9PiAnT2xkIHZhbHVlIG9mIGZpZWxkJywgICAgICMgb3B0aW9uYWwKICAgICAgICBVc2VySUQgICAgICAgID0+IDEsCiAgICApOwoKPWN1dAoKc3ViIEhpc3RvcnlBZGQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgIyBDaGFuZ2VJRCBpcyBhbHdheXMgbmVlZGVkLCB3b3Jrb3JkZXIgaWQgaXMgb25seSBuZWVkZWQgZm9yIHdvcmtvcmRlciBldmVudHMKICAgIGZvciBteSAkTmVlZGVkIChxdyhVc2VySUQgQ2hhbmdlSUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyROZWVkZWR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkTmVlZGVkISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBlaXRoZXIgSGlzdG9yeVR5cGUgb3IgSGlzdG9yeVR5cGVJRCBpcyBuZWVkZWQKICAgIGlmICggISggJFBhcmFte0hpc3RvcnlUeXBlfSB8fCAkUGFyYW17SGlzdG9yeVR5cGVJRH0gKSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgSGlzdG9yeVR5cGUgb3IgSGlzdG9yeVR5cGVJRCEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgZ2V0IGhpc3RvcnkgdHlwZSBpZCBmcm9tIGhpc3RvcnkgdHlwZSBpZiBoaXN0b3J5IHR5cGUgaXMgZ2l2ZW4uCiAgICBpZiAoICRQYXJhbXtIaXN0b3J5VHlwZX0gKSB7CiAgICAgICAgbXkgJElEID0gJFNlbGYtPkhpc3RvcnlUeXBlTG9va3VwKCBIaXN0b3J5VHlwZSA9PiAkUGFyYW17SGlzdG9yeVR5cGV9ICk7CgogICAgICAgICMgbm8gdmFsaWQgaGlzdG9yeSB0eXBlIGdpdmVuCiAgICAgICAgaWYgKCAhJElEICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiSW52YWxpZCBoaXN0b3J5IHR5cGUgJyRQYXJhbXtIaXN0b3J5VHlwZX0nIGdpdmVuISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgICRQYXJhbXtIaXN0b3J5VHlwZUlEfSA9ICRJRDsKICAgIH0KCiAgICAjIGluc2VydCBoaXN0b3J5IGVudHJ5CiAgICByZXR1cm4gaWYgISRTZWxmLT57REJPYmplY3R9LT5EbygKICAgICAgICBTUUwgPT4gJ0lOU0VSVCBJTlRPIGNoYW5nZV9oaXN0b3J5ICggY2hhbmdlX2lkLCB3b3Jrb3JkZXJfaWQsIGNvbnRlbnRfbmV3LCAnCiAgICAgICAgICAgIC4gJ2NvbnRlbnRfb2xkLCBjcmVhdGVfYnksIGNyZWF0ZV90aW1lLCB0eXBlX2lkLCBmaWVsZG5hbWUgKSAnCiAgICAgICAgICAgIC4gJ1ZBTFVFUyAoID8sID8sID8sID8sID8sIGN1cnJlbnRfdGltZXN0YW1wLCA/LCA/ICknLAogICAgICAgIEJpbmQgPT4gWwogICAgICAgICAgICBcJFBhcmFte0NoYW5nZUlEfSwKICAgICAgICAgICAgXCRQYXJhbXtXb3JrT3JkZXJJRH0sCiAgICAgICAgICAgIFwkUGFyYW17Q29udGVudE5ld30sCiAgICAgICAgICAgIFwkUGFyYW17Q29udGVudE9sZH0sCiAgICAgICAgICAgIFwkUGFyYW17VXNlcklEfSwKICAgICAgICAgICAgXCRQYXJhbXtIaXN0b3J5VHlwZUlEfSwKICAgICAgICAgICAgXCRQYXJhbXtGaWVsZG5hbWV9LAogICAgICAgIF0sCiAgICApOwoKICAgIHJldHVybiAxOwp9Cgo9aXRlbSBXb3JrT3JkZXJIaXN0b3J5R2V0KCkKClJldHVybnMgYSBsaXN0IG9mIGFsbCBoaXN0b3J5IGVudHJpZXMgdGhhdCBiZWxvbmcgdG8gdGhlIGdpdmVuIFdvcmtPcmRlcklELiBUaGUKbGlzdCBjb250YWlucyBoYXNoIHJlZmVyZW5jZXMgd2l0aCB0aGVzZSBpbmZvcm1hdGlvbjoKCiAgICAkSW5mb3tIaXN0b3J5RW50cnlJRH0KICAgICRJbmZve0NoYW5nZUlEfQogICAgJEluZm97V29ya09yZGVySUR9CiAgICAkSW5mb3tIaXN0b3J5VHlwZX0KICAgICRJbmZve0hpc3RvcnlUeXBlSUR9CiAgICAkSW5mb3tGaWVsZG5hbWV9CiAgICAkSW5mb3tDb250ZW50TmV3fQogICAgJEluZm97Q29udGVudE9sZH0KICAgICRJbmZve0NyZWF0ZUJ5fQogICAgJEluZm97Q3JlYXRlVGltZX0KICAgICRJbmZve1VzZXJJRH0KICAgICRJbmZve1VzZXJMb2dpbn0KICAgICRJbmZve1VzZXJMYXN0bmFtZX0KICAgICRJbmZve1VzZXJGaXJzdG5hbWV9CgogICAgbXkgJEhpc3RvcnlFbnRyaWVzID0gJEhpc3RvcnlPYmplY3QtPldvcmtPcmRlckhpc3RvcnlHZXQoCiAgICAgICAgV29ya09yZGVySUQgPT4gMTIzLAogICAgICAgIFVzZXJJRCAgID0+IDEsCiAgICApOwoKPWN1dAoKc3ViIFdvcmtPcmRlckhpc3RvcnlHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIGZvciBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXR0cmlidXRlIChxdyhXb3JrT3JkZXJJRCBVc2VySUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRBdHRyaWJ1dGV9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXR0cmlidXRlISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBydW4gdGhlIHNxbCBzdGF0ZW1lbnQgdG8gZ2V0IGhpc3RvcnkKICAgIHJldHVybiBpZiAhJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoCiAgICAgICAgU1FMID0+ICdTRUxFQ1QgY2guaWQsIGNoYW5nZV9pZCwgd29ya29yZGVyX2lkLCBjb250ZW50X25ldywgY29udGVudF9vbGQsICcKICAgICAgICAgICAgLiAnY2guY3JlYXRlX2J5LCBjaC5jcmVhdGVfdGltZSwgdHlwZV9pZCwgY2h0Lm5hbWUsIGZpZWxkbmFtZSAnCiAgICAgICAgICAgIC4gJ0ZST00gY2hhbmdlX2hpc3RvcnkgY2gsIGNoYW5nZV9oaXN0b3J5X3R5cGUgY2h0ICcKICAgICAgICAgICAgLiAnV0hFUkUgY2gudHlwZV9pZCA9IGNodC5pZCAnCiAgICAgICAgICAgIC4gJ0FORCB3b3Jrb3JkZXJfaWQgPSA/IE9SREVSIEJZIGNoLmNyZWF0ZV90aW1lLCBjaC5pZCcsCiAgICAgICAgQmluZCA9PiBbIFwkUGFyYW17V29ya09yZGVySUR9IF0sCiAgICApOwoKICAgICMgZmV0Y2ggdGhlIGVudHJpZXMgYW5kIHNhdmUgaW5mb3JtYXRpb24gaW4gYXJyYXkKICAgIG15IEBIaXN0b3J5RW50cmllczsKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgbXkgJUhpc3RvcnlFbnRyeSA9ICgKICAgICAgICAgICAgSGlzdG9yeUVudHJ5SUQgPT4gJFJvd1swXSwKICAgICAgICAgICAgQ2hhbmdlSUQgICAgICAgPT4gJFJvd1sxXSwKICAgICAgICAgICAgV29ya09yZGVySUQgICAgPT4gJFJvd1syXSwKICAgICAgICAgICAgQ29udGVudE5ldyAgICAgPT4gZGVmaW5lZCggJFJvd1szXSApID8gJFJvd1szXSA6ICcnLAogICAgICAgICAgICBDb250ZW50T2xkICAgICA9PiBkZWZpbmVkKCAkUm93WzRdICkgPyAkUm93WzRdIDogJycsCiAgICAgICAgICAgIENyZWF0ZUJ5ICAgICAgID0+ICRSb3dbNV0sCiAgICAgICAgICAgIENyZWF0ZVRpbWUgICAgID0+ICRSb3dbNl0sCiAgICAgICAgICAgIEhpc3RvcnlUeXBlSUQgID0+ICRSb3dbN10sCiAgICAgICAgICAgIEhpc3RvcnlUeXBlICAgID0+ICRSb3dbOF0sCiAgICAgICAgICAgIEZpZWxkbmFtZSAgICAgID0+ICRSb3dbOV0sCiAgICAgICAgKTsKCiAgICAgICAgcHVzaCBASGlzdG9yeUVudHJpZXMsIFwlSGlzdG9yeUVudHJ5OwogICAgfQoKICAgICMgZ2V0IG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdXNlciB3aG8gY3JlYXRlZCBlbnRyeQogICAgZm9yIG15ICRIaXN0b3J5RW50cnkgKEBIaXN0b3J5RW50cmllcykgewoKICAgICAgICAjIGdldCB1c2VyIG5hbWUKICAgICAgICBteSAlVXNlciA9ICRTZWxmLT57VXNlck9iamVjdH0tPkdldFVzZXJEYXRhKAogICAgICAgICAgICBVc2VySUQgPT4gJEhpc3RvcnlFbnRyeS0+e0NyZWF0ZUJ5fSwKICAgICAgICAgICAgQ2FjaGUgID0+IDEsCiAgICAgICAgKTsKCiAgICAgICAgIyBzYXZlIHVzZXIgaW5mbyBpbiBoaXN0b3J5IGVudHJ5CiAgICAgICAgaWYgKCVVc2VyKSB7CiAgICAgICAgICAgICRIaXN0b3J5RW50cnktPntVc2VySUR9ICAgICAgICA9ICRVc2Vye1VzZXJJRH07CiAgICAgICAgICAgICRIaXN0b3J5RW50cnktPntVc2VyTG9naW59ICAgICA9ICRVc2Vye1VzZXJMb2dpbn07CiAgICAgICAgICAgICRIaXN0b3J5RW50cnktPntVc2VyRmlyc3RuYW1lfSA9ICRVc2Vye1VzZXJGaXJzdG5hbWV9OwogICAgICAgICAgICAkSGlzdG9yeUVudHJ5LT57VXNlckxhc3RuYW1lfSAgPSAkVXNlcntVc2VyTGFzdG5hbWV9OwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gXEBIaXN0b3J5RW50cmllczsKfQoKPWl0ZW0gQ2hhbmdlSGlzdG9yeUdldCgpCgpSZXR1cm5zIGEgbGlzdCBvZiBhbGwgaGlzdG9yeSBlbnRyaWVzIHRoYXQgYmVsb25nIHRvIHRoZSBnaXZlbiBDaGFuZ2VJRCAtIGluY2x1ZGluZwpoaXN0b3J5IGVudHJpZXMgZm9yIHdvcmtvcmRlcnMuIFRoZSBsaXN0IGNvbnRhaW5zIGhhc2ggcmVmZXJlbmNlcyB3aXRoIHRoZXNlIGluZm9ybWF0aW9uOgoKICAgICRJbmZve0hpc3RvcnlFbnRyeUlEfQogICAgJEluZm97Q2hhbmdlSUR9CiAgICAkSW5mb3tXb3JrT3JkZXJJRH0KICAgICRJbmZve0hpc3RvcnlUeXBlfQogICAgJEluZm97SGlzdG9yeVR5cGVJRH0KICAgICRJbmZve0ZpZWxkbmFtZX0KICAgICRJbmZve0NvbnRlbnROZXd9CiAgICAkSW5mb3tDb250ZW50T2xkfQogICAgJEluZm97Q3JlYXRlQnl9CiAgICAkSW5mb3tDcmVhdGVUaW1lfQogICAgJEluZm97VXNlcklEfQogICAgJEluZm97VXNlckxvZ2lufQogICAgJEluZm97VXNlckxhc3RuYW1lfQogICAgJEluZm97VXNlckZpcnN0bmFtZX0KCiAgICBteSAkSGlzdG9yeUVudHJpZXMgPSAkSGlzdG9yeU9iamVjdC0+Q2hhbmdlSGlzdG9yeUdldCgKICAgICAgICBDaGFuZ2VJRCA9PiAxMjMsCiAgICAgICAgVXNlcklEICAgPT4gMSwKICAgICk7Cgo9Y3V0CgpzdWIgQ2hhbmdlSGlzdG9yeUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgZm9yIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBdHRyaWJ1dGUgKHF3KENoYW5nZUlEIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEF0dHJpYnV0ZX0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBdHRyaWJ1dGUhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIHJ1biB0aGUgc3FsIHN0YXRlbWVudCB0byBnZXQgaGlzdG9yeQogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSgKICAgICAgICBTUUwgPT4gJ1NFTEVDVCBjaC5pZCwgY2hhbmdlX2lkLCB3b3Jrb3JkZXJfaWQsIGNvbnRlbnRfbmV3LCBjb250ZW50X29sZCwgJwogICAgICAgICAgICAuICdjaC5jcmVhdGVfYnksIGNoLmNyZWF0ZV90aW1lLCB0eXBlX2lkLCBjaHQubmFtZSwgZmllbGRuYW1lICcKICAgICAgICAgICAgLiAnRlJPTSBjaGFuZ2VfaGlzdG9yeSBjaCwgY2hhbmdlX2hpc3RvcnlfdHlwZSBjaHQgJwogICAgICAgICAgICAuICdXSEVSRSBjaC50eXBlX2lkID0gY2h0LmlkICcKICAgICAgICAgICAgLiAnQU5EIGNoYW5nZV9pZCA9ID8gT1JERVIgQlkgY2guY3JlYXRlX3RpbWUsIGNoLmlkJywKICAgICAgICBCaW5kID0+IFsgXCRQYXJhbXtDaGFuZ2VJRH0gXSwKICAgICk7CgogICAgIyBmZXRjaCB0aGUgZW50cmllcyBhbmQgc2F2ZSBpbmZvcm1hdGlvbiBpbiBhcnJheQogICAgbXkgQEhpc3RvcnlFbnRyaWVzOwogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICBteSAlSGlzdG9yeUVudHJ5ID0gKAogICAgICAgICAgICBIaXN0b3J5RW50cnlJRCA9PiAkUm93WzBdLAogICAgICAgICAgICBDaGFuZ2VJRCAgICAgICA9PiAkUm93WzFdLAogICAgICAgICAgICBXb3JrT3JkZXJJRCAgICA9PiAkUm93WzJdLAogICAgICAgICAgICBDb250ZW50TmV3ICAgICA9PiBkZWZpbmVkKCAkUm93WzNdICkgPyAkUm93WzNdIDogJycsCiAgICAgICAgICAgIENvbnRlbnRPbGQgICAgID0+IGRlZmluZWQoICRSb3dbNF0gKSA/ICRSb3dbNF0gOiAnJywKICAgICAgICAgICAgQ3JlYXRlQnkgICAgICAgPT4gJFJvd1s1XSwKICAgICAgICAgICAgQ3JlYXRlVGltZSAgICAgPT4gJFJvd1s2XSwKICAgICAgICAgICAgSGlzdG9yeVR5cGVJRCAgPT4gJFJvd1s3XSwKICAgICAgICAgICAgSGlzdG9yeVR5cGUgICAgPT4gJFJvd1s4XSwKICAgICAgICAgICAgRmllbGRuYW1lICAgICAgPT4gJFJvd1s5XSwKICAgICAgICApOwoKICAgICAgICAjIGNsZWFudXAgdGltZSBzdGFtcHMgKHNvbWUgZGF0YWJhc2VzIGFyZSB1c2luZyBlLiBnLiAyMDA4LTAyLTI1IDIyOjAzOjAwLjAwMDAwMCkKICAgICAgICAkSGlzdG9yeUVudHJ5e0NyZWF0ZVRpbWV9CiAgICAgICAgICAgID1+IHN7IFxBICggXGRcZFxkXGQgLSBcZFxkIC0gXGRcZCBccyBcZFxkOlxkXGQ6XGRcZCApIFwuIC4rPyBceiB9eyQxfXhtczsKCiAgICAgICAgcHVzaCBASGlzdG9yeUVudHJpZXMsIFwlSGlzdG9yeUVudHJ5OwogICAgfQoKICAgICMgZ2V0IG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdXNlciB3aG8gY3JlYXRlZCBlbnRyeQogICAgZm9yIG15ICRIaXN0b3J5RW50cnkgKEBIaXN0b3J5RW50cmllcykgewoKICAgICAgICAjIGdldCB1c2VyIG5hbWUKICAgICAgICBteSAlVXNlciA9ICRTZWxmLT57VXNlck9iamVjdH0tPkdldFVzZXJEYXRhKAogICAgICAgICAgICBVc2VySUQgPT4gJEhpc3RvcnlFbnRyeS0+e0NyZWF0ZUJ5fSwKICAgICAgICAgICAgQ2FjaGUgID0+IDEsCiAgICAgICAgKTsKCiAgICAgICAgIyBzYXZlIHVzZXIgaW5mbyBpbiBoaXN0b3J5IGVudHJ5CiAgICAgICAgaWYgKCVVc2VyKSB7CiAgICAgICAgICAgICRIaXN0b3J5RW50cnktPntVc2VySUR9ICAgICAgICA9ICRVc2Vye1VzZXJJRH07CiAgICAgICAgICAgICRIaXN0b3J5RW50cnktPntVc2VyTG9naW59ICAgICA9ICRVc2Vye1VzZXJMb2dpbn07CiAgICAgICAgICAgICRIaXN0b3J5RW50cnktPntVc2VyRmlyc3RuYW1lfSA9ICRVc2Vye1VzZXJGaXJzdG5hbWV9OwogICAgICAgICAgICAkSGlzdG9yeUVudHJ5LT57VXNlckxhc3RuYW1lfSAgPSAkVXNlcntVc2VyTGFzdG5hbWV9OwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gXEBIaXN0b3J5RW50cmllczsKfQoKPWl0ZW0gSGlzdG9yeUVudHJ5R2V0KCkKClJldHVybnMgYSBzaW5nbGUgaGlzdG9yeSBlbnRyeS4gVGhlIGhhc2ggcmVmZXJlbmNlIGhhcyB0aGVzZSBpbmZvcm1hdGlvbjoKCiAgICAkSW5mb3tIaXN0b3J5RW50cnlJRH0KICAgICRJbmZve0NoYW5nZUlEfQogICAgJEluZm97V29ya09yZGVySUR9CiAgICAkSW5mb3tIaXN0b3J5VHlwZX0KICAgICRJbmZve0hpc3RvcnlUeXBlSUR9CiAgICAkSW5mb3tGaWVsZG5hbWV9CiAgICAkSW5mb3tDb250ZW50TmV3fQogICAgJEluZm97Q29udGVudE9sZH0KICAgICRJbmZve0NyZWF0ZUJ5fQogICAgJEluZm97Q3JlYXRlVGltZX0KICAgICRJbmZve1VzZXJJRH0KICAgICRJbmZve1VzZXJMb2dpbn0KICAgICRJbmZve1VzZXJMYXN0bmFtZX0KICAgICRJbmZve1VzZXJGaXJzdG5hbWV9CgogICAgbXkgJEhpc3RvcnlFbnRyeSA9ICRIaXN0b3J5T2JqZWN0LT5IaXN0b3J5RW50cnlHZXQoCiAgICAgICAgSGlzdG9yeUVudHJ5SUQgPT4gMTIzLAogICAgICAgIFVzZXJJRCAgICAgICAgID0+IDEsCiAgICApOwoKPWN1dAoKc3ViIEhpc3RvcnlFbnRyeUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgZm9yIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBdHRyaWJ1dGUgKHF3KEhpc3RvcnlFbnRyeUlEIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEF0dHJpYnV0ZX0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBdHRyaWJ1dGUhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIHJ1biB0aGUgc3FsIHN0YXRlbWVudCB0byBnZXQgaGlzdG9yeQogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSgKICAgICAgICBTUUwgPT4gJ1NFTEVDVCBjaC5pZCwgY2hhbmdlX2lkLCB3b3Jrb3JkZXJfaWQsIGNvbnRlbnRfbmV3LCBjb250ZW50X29sZCwgJwogICAgICAgICAgICAuICdjaC5jcmVhdGVfYnksIGNoLmNyZWF0ZV90aW1lLCB0eXBlX2lkLCBjaHQubmFtZSwgZmllbGRuYW1lICcKICAgICAgICAgICAgLiAnRlJPTSBjaGFuZ2VfaGlzdG9yeSBjaCwgY2hhbmdlX2hpc3RvcnlfdHlwZSBjaHQgJwogICAgICAgICAgICAuICdXSEVSRSBjaC50eXBlX2lkID0gY2h0LmlkICcKICAgICAgICAgICAgLiAnQU5EIGNoLmlkID0gPycsCiAgICAgICAgQmluZCA9PiBbIFwkUGFyYW17SGlzdG9yeUVudHJ5SUR9IF0sCiAgICApOwoKICAgICMgZmV0Y2ggdGhlIGVudHJpZXMgYW5kIHNhdmUgaW5mb3JtYXRpb24gaW4gYXJyYXkKICAgIG15ICVIaXN0b3J5RW50cnk7CiAgICB3aGlsZSAoIG15IEBSb3cgPSAkU2VsZi0+e0RCT2JqZWN0fS0+RmV0Y2hyb3dBcnJheSgpICkgewogICAgICAgICVIaXN0b3J5RW50cnkgPSAoCiAgICAgICAgICAgIEhpc3RvcnlFbnRyeUlEID0+ICRSb3dbMF0sCiAgICAgICAgICAgIENoYW5nZUlEICAgICAgID0+ICRSb3dbMV0sCiAgICAgICAgICAgIFdvcmtPcmRlcklEICAgID0+ICRSb3dbMl0sCiAgICAgICAgICAgIENvbnRlbnROZXcgICAgID0+ICRSb3dbM10sCiAgICAgICAgICAgIENvbnRlbnRPbGQgICAgID0+ICRSb3dbNF0sCiAgICAgICAgICAgIENyZWF0ZUJ5ICAgICAgID0+ICRSb3dbNV0sCiAgICAgICAgICAgIENyZWF0ZVRpbWUgICAgID0+ICRSb3dbNl0sCiAgICAgICAgICAgIEhpc3RvcnlUeXBlSUQgID0+ICRSb3dbN10sCiAgICAgICAgICAgIEhpc3RvcnlUeXBlICAgID0+ICRSb3dbOF0sCiAgICAgICAgICAgIEZpZWxkbmFtZSAgICAgID0+ICRSb3dbOV0sCiAgICAgICAgKTsKCiAgICAgICAgIyBjbGVhbnVwIHRpbWUgc3RhbXBzIChzb21lIGRhdGFiYXNlcyBhcmUgdXNpbmcgZS4gZy4gMjAwOC0wMi0yNSAyMjowMzowMC4wMDAwMDApCiAgICAgICAgJEhpc3RvcnlFbnRyeXtDcmVhdGVUaW1lfQogICAgICAgICAgICA9fiBzeyBcQSAoIFxkXGRcZFxkIC0gXGRcZCAtIFxkXGQgXHMgXGRcZDpcZFxkOlxkXGQgKSBcLiAuKz8gXHogfXskMX14bXM7CiAgICB9CgogICAgIyBnZXQgdXNlciBuYW1lCiAgICBteSAlVXNlciA9ICRTZWxmLT57VXNlck9iamVjdH0tPkdldFVzZXJEYXRhKAogICAgICAgIFVzZXJJRCA9PiAkSGlzdG9yeUVudHJ5e0NyZWF0ZUJ5fSwKICAgICAgICBDYWNoZSAgPT4gMSwKICAgICk7CgogICAgIyBzYXZlIHVzZXIgaW5mbyBpbiBoaXN0b3J5IGVudHJ5CiAgICBpZiAoJVVzZXIpIHsKICAgICAgICAkSGlzdG9yeUVudHJ5e1VzZXJJRH0gICAgICAgID0gJFVzZXJ7VXNlcklEfTsKICAgICAgICAkSGlzdG9yeUVudHJ5e1VzZXJMb2dpbn0gICAgID0gJFVzZXJ7VXNlckxvZ2lufTsKICAgICAgICAkSGlzdG9yeUVudHJ5e1VzZXJGaXJzdG5hbWV9ID0gJFVzZXJ7VXNlckZpcnN0bmFtZX07CiAgICAgICAgJEhpc3RvcnlFbnRyeXtVc2VyTGFzdG5hbWV9ICA9ICRVc2Vye1VzZXJMYXN0bmFtZX07CiAgICB9CgogICAgcmV0dXJuIFwlSGlzdG9yeUVudHJ5Owp9Cgo9aXRlbSBXb3JrT3JkZXJIaXN0b3J5RGVsZXRlKCkKCkRlbGV0ZXMgYWxsIGVudHJpZXMgaW4gaGlzdG9yeSB0YWJsZSB0aGF0IGJlbG9uZ3MgdG8gdGhlIGdpdmVuIFdvcmtPcmRlcklELgpUaGUgbWV0aG9kIHJldHVybnMgMSBvbiBzdWNjZXNzIGFuZCBDPHVuZGVmPiBvdGhlcndpc2UuCgogICAgbXkgJFN1Y2Nlc3MgPSAkSGlzdG9yeU9iamVjdC0+V29ya09yZGVySGlzdG9yeURlbGV0ZSgKICAgICAgICBXb3JrT3JkZXJJRCA9PiAxMjMsCiAgICAgICAgVXNlcklEICAgICAgPT4gMSwKICAgICk7Cgo9Y3V0CgpzdWIgV29ya09yZGVySGlzdG9yeURlbGV0ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgZm9yIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBdHRyaWJ1dGUgKHF3KFdvcmtPcmRlcklEIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEF0dHJpYnV0ZX0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBdHRyaWJ1dGUhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGRlbGV0ZSBlbnRyaWVzIGZvciB0aGUgZ2l2ZW4gd29ya29yZGVyCiAgICByZXR1cm4gaWYgISRTZWxmLT57REJPYmplY3R9LT5EbygKICAgICAgICBTUUwgID0+ICdERUxFVEUgRlJPTSBjaGFuZ2VfaGlzdG9yeSBXSEVSRSB3b3Jrb3JkZXJfaWQgPSA/JywKICAgICAgICBCaW5kID0+IFsgXCRQYXJhbXtXb3JrT3JkZXJJRH0gXSwKICAgICk7CgogICAgIyBzdWNjZXNzCiAgICByZXR1cm4gMTsKfQoKPWl0ZW0gQ2hhbmdlSGlzdG9yeURlbGV0ZSgpCgpEZWxldGVzIGFsbCBlbnRyaWVzIGluIGhpc3RvcnkgdGFibGUgdGhhdCBiZWxvbmdzIHRvIHRoZSBnaXZlbiBDaGFuZ2VJRC4KVGhlIG1ldGhvZCByZXR1cm5zIDEgb24gc3VjY2VzcyBhbmQgQzx1bmRlZj4gb3RoZXJ3aXNlLgoKICAgIG15ICRTdWNjZXNzID0gJEhpc3RvcnlPYmplY3QtPkNoYW5nZUhpc3RvcnlEZWxldGUoCiAgICAgICAgQ2hhbmdlSUQgPT4gMTIzLAogICAgICAgIFVzZXJJRCAgID0+IDEsCiAgICApOwoKPWN1dAoKc3ViIENoYW5nZUhpc3RvcnlEZWxldGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIGZvciBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXR0cmlidXRlIChxdyhDaGFuZ2VJRCBVc2VySUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRBdHRyaWJ1dGV9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXR0cmlidXRlISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBkZWxldGUgZW50cmllcyBmb3IgdGhlIGdpdmVuIGNoYW5nZQogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+RG8oCiAgICAgICAgU1FMICA9PiAnREVMRVRFIEZST00gY2hhbmdlX2hpc3RvcnkgV0hFUkUgY2hhbmdlX2lkID0gPycsCiAgICAgICAgQmluZCA9PiBbIFwkUGFyYW17Q2hhbmdlSUR9IF0sCiAgICApOwoKICAgICMgc3VjY2VzcwogICAgcmV0dXJuIDE7Cn0KCj1pdGVtIEhpc3RvcnlVcGRhdGUoKQoKVGhpcyBtZXRob2QgdXBkYXRlcyBhIGhpc3RvcnkgZW50cnkuIEl0IHJldHVybnMgMSBvbiBzdWNjZXNzLCBhbmQgQzx1bmRlZj4gb3RoZXJ3aXNlLgoKICAgIG15ICRTdWNjZXNzID0gJEhpc3RvcnlPYmplY3QtPkhpc3RvcnlVcGRhdGUoCiAgICAgICAgSGlzdG9yeUVudHJ5SUQgPT4gMTIzLAogICAgICAgIFdvcmtPcmRlcklEICAgID0+IDM0NTEsICAgICAgICAgIyBvcHRpb25hbAogICAgICAgIENoYW5nZUlEICAgICAgID0+IDEyMzUsICAgICAgICAgIyBvcHRpb25hbAogICAgICAgIENvbnRlbnROZXcgICAgID0+ICduZXcgdmFsdWUnLCAgIyBvcHRpb25hbAogICAgICAgIENvbnRlbnRPbGQgICAgID0+ICdvbGQgdmFsdWUnLCAgIyBvcHRpb25hbAogICAgICAgIFVzZXJJRCAgICAgICAgID0+IDEsCiAgICApOwoKPWN1dAoKc3ViIEhpc3RvcnlVcGRhdGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIGZvciBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXR0cmlidXRlIChxdyhIaXN0b3J5RW50cnlJRCBVc2VySUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRBdHRyaWJ1dGV9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXR0cmlidXRlISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBnZXQgaGlzdG9yeSBlbnRyeSBpZCBhbmQgdXNlciBpZAogICAgbXkgJEhpc3RvcnlFbnRyeUlEID0gZGVsZXRlICRQYXJhbXtIaXN0b3J5RW50cnlJRH07CiAgICBteSAkVXNlcklEICAgICAgICAgPSBkZWxldGUgJFBhcmFte1VzZXJJRH07CgogICAgIyB3ZSBoYXZlIHRvIHVwZGF0ZSBhdCBsZWFzdCBvbmUgY29sdW1uCiAgICBpZiAoICFrZXlzICVQYXJhbSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgYXQgbGVhc3Qgb25lIGNvbHVtbiB0byB1cGRhdGUhJywKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIHdoYXQgY29sdW1ucyBzaG91bGQgYmUgdXBkYXRlZAogICAgbXkgQENvbHVtbnMgPSBrZXlzICVQYXJhbTsKICAgIG15IEBCaW5kOwoKICAgICMgZ2V0IGJpbmQgdmFyaWFibGVzCiAgICBmb3IgbXkgJENvbHVtbiAoQENvbHVtbnMpIHsKICAgICAgICBwdXNoIEBCaW5kLCBcJFBhcmFteyRDb2x1bW59OwogICAgfQoKICAgICMgZ2V0IGJpbmQgc3RyaW5nCiAgICBteSAlUGFyYW1LZXkyQ29sdW1uTmFtZSA9ICgKICAgICAgICBDaGFuZ2VJRCAgICAgID0+ICdjaGFuZ2VfaWQnLAogICAgICAgIFdvcmtPcmRlcklEICAgPT4gJ3dvcmtvcmRlcl9pZCcsCiAgICAgICAgQ29udGVudE5ldyAgICA9PiAnY29udGVudF9uZXcnLAogICAgICAgIENvbnRlbnRPbGQgICAgPT4gJ2NvbnRlbnRfb2xkJywKICAgICAgICBIaXN0b3J5VHlwZUlEID0+ICd0eXBlX2lkJywKICAgICAgICBGaWVsZG5hbWUgICAgID0+ICdmaWVsZG5hbWUnLAogICAgKTsKICAgIG15ICRCaW5kcyA9IGpvaW4gJywgJywgbWFwIHsgJFBhcmFtS2V5MkNvbHVtbk5hbWV7JF99IC4gJyA9ID8gJyB9IEBDb2x1bW5zOwoKICAgICMgZG8gdGhlIHVwZGF0ZQogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+RG8oCiAgICAgICAgU1FMID0+ICdVUERBVEUgY2hhbmdlX2hpc3RvcnkgU0VUICcgLiAkQmluZHMgLiAnICcKICAgICAgICAgICAgLiAnV0hFUkUgaWQgPSA/JywKICAgICAgICBCaW5kID0+IFsgQEJpbmQsIFwkSGlzdG9yeUVudHJ5SUQgXSwKICAgICk7CgogICAgcmV0dXJuIDE7Cn0KCj1pdGVtIEhpc3RvcnlTZWFyY2goKQoKU2VhcmNoZXMgZm9yIGNoYW5nZXMvd29ya29yZGVycyB0aGF0IG1hdGNoZXMgdGhlIGdpdmVuIHNlYXJjaCBjcml0ZXJpYS4gSXQgcmV0dXJucwphbiBhcnJheSByZWZlcmVuY2Ugd2l0aCBjaGFuZ2Ugb3Igd29ya29yZGVyIElEcy4gSWYgIlJlc3VsdCA9PiAnQ09VTlQnIiB0aGVuIHRoZQpudW1iZXIgb2YgZm91bmQgY2hhbmdlcyBpcyByZXR1cm5lZC4KCiAgICBteSAkSURzID0gJEhpc3RvcnlPYmplY3QtPkhpc3RvcnlTZWFyY2goCiAgICAgICAgVHlwZSAgICAgICAgICAgICAgICA9PiAnQ2hhbmdlJywgICAgICAgIyBDaGFuZ2V8V29ya29yZGVyIHdoaWNoIElEcyBzaG91bGQgYmUgcmV0dXJuZWQKICAgICAgICBBdHRyaWJ1dGUgICAgICAgICAgID0+ICdDaGFuZ2VTdGF0ZScsCiAgICAgICAgT2xkVmFsdWVzICAgICAgICAgICA9PiBbICdyZWplY3RlZCcgXSwgIyBvcHRpb25hbCAtIE9sZFZhbHVlcyBPUiBOZXdWYWx1ZXMgaXMgbmVlZGVkCiAgICAgICAgTmV3VmFsdWVzICAgICAgICAgICA9PiBbICdhcHByb3ZlZCcgXSwgIyBvcHRpb25hbCAtIE9sZFZhbHVlcyBPUiBOZXdWYWx1ZXMgaXMgbmVlZGVkCiAgICAgICAgQ2hhbmdlQnkgICAgICAgICAgICA9PiBbIDEsIDIsIDMgXSwgICAgIyBvcHRpb25hbAogICAgICAgIENoYW5nZURhdGVOZXdlckRhdGUgPT4gJzIwMDktMDEtMTMgMDA6MDA6MDEnLCAjb3B0aW9uYWwKICAgICAgICBDaGFuZ2VEYXRlT2xkZXJEYXRlID0+ICcyMDA5LTAxLTEzIDAwOjAwOjAxJywgI29wdGlvbmFsCiAgICAgICAgVXNlcklEICAgICAgICAgICAgICA9PiAxLAogICAgICAgIFVzaW5nV2lsZGNhcmRzICAgICAgPT4gMCwgICAgICAgICAgICAgICMgMHwxIC0gZGVmYXVsdCAxCiAgICAgICAgUmVzdWx0ICAgICAgICAgICAgICA9PiAnQVJSQVknLCAgICAgICAgIyBBUlJBWXxDT1VOVCAtIGRlZmF1bHQgQVJSQVkKICAgICk7Cgo9Y3V0CgpzdWIgSGlzdG9yeVNlYXJjaCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgZm9yIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBdHRyaWJ1dGUgKHF3KFR5cGUgQXR0cmlidXRlIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEF0dHJpYnV0ZX0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBdHRyaWJ1dGUhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIHZlcmlmeSB0aGF0IGFsbCBwYXNzZWQgYXJyYXkgcGFyYW1ldGVycyBjb250YWluIGFuIGFycmF5cmVmCiAgICBBUkdVTUVOVDoKICAgIGZvciBteSAkQXJndW1lbnQgKAogICAgICAgIHF3KAogICAgICAgIE9sZFZhbHVlcwogICAgICAgIE5ld1ZhbHVlcwogICAgICAgIENoYW5nZUJ5CiAgICAgICAgKQogICAgICAgICkKICAgIHsKICAgICAgICBpZiAoICFkZWZpbmVkICRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkUGFyYW17JEFyZ3VtZW50fSB8fD0gW107CgogICAgICAgICAgICBuZXh0IEFSR1VNRU5UOwogICAgICAgIH0KCiAgICAgICAgaWYgKCByZWYgJFBhcmFteyRBcmd1bWVudH0gbmUgJ0FSUkFZJyApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIiRBcmd1bWVudCBtdXN0IGJlIGFuIGFycmF5IHJlZmVyZW5jZSEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgICMgc2V0IGRlZmF1bHQgdmFsdWVzCiAgICBpZiAoICFkZWZpbmVkICRQYXJhbXtVc2luZ1dpbGRjYXJkc30gKSB7CiAgICAgICAgJFBhcmFte1VzaW5nV2lsZGNhcmRzfSA9IDE7CiAgICB9CgogICAgIyBzZXQgdGhlIGRlZmF1bHQgYmVoYXZpb3VyIGZvciB0aGUgcmV0dXJuIHR5cGUKICAgIG15ICRSZXN1bHQgPSAkUGFyYW17UmVzdWx0fSB8fCAnQVJSQVknOwoKICAgIG15IEBTUUxXaGVyZTsgICAgIyBhc3NlbWJsZSB0aGUgY29uZGl0aW9ucyB1c2VkIGluIHRoZSBXSEVSRSBjbGF1c2UKCiAgICAjIGFkZCBzdHJpbmcgcGFyYW1zIHRvIHRoZSBXSEVSRSBjbGF1c2UKICAgIG15ICVTdHJpbmdQYXJhbXMgPSAoCgogICAgICAgICMgc3RyaW5ncyBpbiBjaGFuZ2VfaGlzdG9yeQogICAgICAgIEF0dHJpYnV0ZSA9PiAnY2guZmllbGRuYW1lJywKICAgICk7CgogICAgIyBhZGQgc3RyaW5nIHBhcmFtcyB0byBzcWwtd2hlcmUtYXJyYXkKICAgIFNUUklOR1BBUkFNOgogICAgZm9yIG15ICRTdHJpbmdQYXJhbSAoIGtleXMgJVN0cmluZ1BhcmFtcyApIHsKCiAgICAgICAgIyBjaGVjayBzdHJpbmcgcGFyYW1zIGZvciB1c2VmdWwgdmFsdWVzLCB0aGUgc3RyaW5nICcwJyBpcyBhbGxvd2VkCiAgICAgICAgbmV4dCBTVFJJTkdQQVJBTSBpZiAhZXhpc3RzICRQYXJhbXskU3RyaW5nUGFyYW19OwogICAgICAgIG5leHQgU1RSSU5HUEFSQU0gaWYgIWRlZmluZWQgJFBhcmFteyRTdHJpbmdQYXJhbX07CiAgICAgICAgbmV4dCBTVFJJTkdQQVJBTSBpZiAkUGFyYW17JFN0cmluZ1BhcmFtfSBlcSAnJzsKCiAgICAgICAgIyBxdW90ZQogICAgICAgICRQYXJhbXskU3RyaW5nUGFyYW19ID0gJFNlbGYtPntEQk9iamVjdH0tPlF1b3RlKCAkUGFyYW17JFN0cmluZ1BhcmFtfSApOwoKICAgICAgICAjIHdpbGRjYXJkcyBhcmUgdXNlZAogICAgICAgIGlmICggJFBhcmFte1VzaW5nV2lsZGNhcmRzfSApIHsKCiAgICAgICAgICAgICMgUXVvdGUKICAgICAgICAgICAgJFBhcmFteyRTdHJpbmdQYXJhbX0gPSAkU2VsZi0+e0RCT2JqZWN0fS0+UXVvdGUoICRQYXJhbXskU3RyaW5nUGFyYW19LCAnTGlrZScgKTsKCiAgICAgICAgICAgICMgcmVwbGFjZSAqIHdpdGggJQogICAgICAgICAgICAkUGFyYW17JFN0cmluZ1BhcmFtfSA9fiBzeyBcKisgfXslfXhtc2c7CgogICAgICAgICAgICAjIGRvIG5vdCB1c2Ugc3RyaW5nIHBhcmFtcyB3aGljaCBjb250YWluIG9ubHkgJQogICAgICAgICAgICBuZXh0IFNUUklOR1BBUkFNIGlmICRQYXJhbXskU3RyaW5nUGFyYW19ID1+IG17IFxBICUqIFx6IH14bXM7CgogICAgICAgICAgICBwdXNoIEBTUUxXaGVyZSwKICAgICAgICAgICAgICAgICJMT1dFUigkU3RyaW5nUGFyYW1zeyRTdHJpbmdQYXJhbX0pIExJS0UgTE9XRVIoJyRQYXJhbXskU3RyaW5nUGFyYW19JykiOwogICAgICAgIH0KCiAgICAgICAgIyBubyB3aWxkY2FyZHMgYXJlIHVzZWQKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcHVzaCBAU1FMV2hlcmUsCiAgICAgICAgICAgICAgICAiTE9XRVIoJFN0cmluZ1BhcmFtc3skU3RyaW5nUGFyYW19KSA9IExPV0VSKCckUGFyYW17JFN0cmluZ1BhcmFtfScpIjsKICAgICAgICB9CiAgICB9CgogICAgIyBzZXQgYXJyYXkgcGFyYW1zCiAgICBteSAlQXJyYXlQYXJhbXMgPSAoCiAgICAgICAgT2xkVmFsdWVzID0+ICdjaC5jb250ZW50X29sZCcsCiAgICAgICAgTmV3VmFsdWVzID0+ICdjaC5jb250ZW50X25ldycsCiAgICAgICAgQ2hhbmdlQnkgID0+ICdjaC5jcmVhdGVfYnknLAogICAgKTsKCiAgICAjIGFkZCBhcnJheSBwYXJhbXMgdG8gc3FsLXdoZXJlLWFycmF5CiAgICBBUlJBWVBBUkFNOgogICAgZm9yIG15ICRBcnJheVBhcmFtICgga2V5cyAlQXJyYXlQYXJhbXMgKSB7CgogICAgICAgICMgaWdub3JlIGVtcHR5IGxpc3RzCiAgICAgICAgbmV4dCBBUlJBWVBBUkFNIGlmICFAeyAkUGFyYW17JEFycmF5UGFyYW19IH07CgogICAgICAgICMgcXVvdGUKICAgICAgICBmb3IgbXkgJE9uZVBhcmFtICggQHsgJFBhcmFteyRBcnJheVBhcmFtfSB9ICkgewogICAgICAgICAgICAkT25lUGFyYW0gPSAkU2VsZi0+e0RCT2JqZWN0fS0+UXVvdGUoJE9uZVBhcmFtKTsKCiAgICAgICAgICAgICMgZm9yIHN0cmluZ3Mgd2UgbmVlZCBzaW5nbGUgcXVvdGVzCiAgICAgICAgICAgIGlmICggJE9uZVBhcmFtICF+IG17IFxBIFsrLV0/IFxkKyAoPzpcLlxkKyk/IFx6IH14bXMgKSB7CiAgICAgICAgICAgICAgICAkT25lUGFyYW0gPSAiJyRPbmVQYXJhbSciOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGNyZWF0ZSBzdHJpbmcKICAgICAgICBteSAkSW5TdHJpbmcgPSBqb2luICcsICcsIEB7ICRQYXJhbXskQXJyYXlQYXJhbX0gfTsKCiAgICAgICAgcHVzaCBAU1FMV2hlcmUsICIkQXJyYXlQYXJhbXN7JEFycmF5UGFyYW19IElOICgkSW5TdHJpbmcpIjsKICAgIH0KCiAgICAjIHNldCB0aW1lIHBhcmFtcwogICAgbXkgJVRpbWVQYXJhbXMgPSAoCgogICAgICAgICMgdGltZXMgaW4gY2hhbmdlX2hpc3RvcnkKICAgICAgICBDaGFuZ2VUaW1lTmV3ZXJEYXRlID0+ICdjaC5jcmVhdGVfdGltZSA+PScsCiAgICAgICAgQ2hhbmdlVGltZU9sZGVyRGF0ZSA9PiAnY2guY3JlYXRlX3RpbWUgPD0nLAogICAgKTsKCiAgICAjIGNoZWNrIGFuZCBhZGQgdGltZSBwYXJhbXMgdG8gV0hFUkUKICAgIFRJTUVQQVJBTToKICAgIGZvciBteSAkVGltZVBhcmFtICgga2V5cyAlVGltZVBhcmFtcyApIHsKCiAgICAgICAgbmV4dCBUSU1FUEFSQU0gaWYgISRQYXJhbXskVGltZVBhcmFtfTsKCiAgICAgICAgaWYgKCAkUGFyYW17JFRpbWVQYXJhbX0gIX4gbXsgXEEgXGRcZFxkXGQtXGRcZC1cZFxkIFxzIFxkXGQ6XGRcZDpcZFxkIFx6IH14bXMgKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJUaGUgcGFyYW1ldGVyICRUaW1lUGFyYW0gaGFzIGFuIGludmFsaWQgZGF0ZSBmb3JtYXQhIiwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgICRQYXJhbXskVGltZVBhcmFtfSA9ICRTZWxmLT57REJPYmplY3R9LT5RdW90ZSggJFBhcmFteyRUaW1lUGFyYW19ICk7CgogICAgICAgICMgdGhlIHRpbWUgYXR0cmlidXRlcyBvZiBjaGFuZ2VfaGlzdG9yeSBzaG93IHVwIGluIHRoZSBXSEVSRSBjbGF1c2UKICAgICAgICBwdXNoIEBTUUxXaGVyZSwgIiRUaW1lUGFyYW1zeyRUaW1lUGFyYW19ICckUGFyYW17JFRpbWVQYXJhbX0nIjsKICAgIH0KCiAgICAjIGNyZWF0ZSBTUUwgc3RhdGVtZW50CiAgICBteSAkVHlwZSA9IGxjICRQYXJhbXtUeXBlfTsKICAgIG15ICRTUUwgID0gIlNFTEVDVCBESVNUSU5DVCBjaC4ke1R5cGV9X2lkIEZST00gY2hhbmdlX2hpc3RvcnkgY2ggIjsKCiAgICBpZiAoICRSZXN1bHQgZXEgJ0NPVU5UJyApIHsKICAgICAgICAkU1FMID0gIlNFTEVDVCBDT1VOVCggRElTVElOQ1QoIGNoLiR7VHlwZX1faWQgKSApIEZST00gY2hhbmdlX2hpc3RvcnkgY2ggIjsKICAgIH0KCiAgICAjIGFkZCB0aGUgV0hFUkUgY2xhdXNlCiAgICBpZiAoQFNRTFdoZXJlKSB7CiAgICAgICAgJFNRTCAuPSAnV0hFUkUgJzsKICAgICAgICAkU1FMIC49IGpvaW4gJyBBTkQgJywgbWFwIHsiKCAkXyApIn0gQFNRTFdoZXJlOwogICAgICAgICRTUUwgLj0gJyAnOwogICAgfQoKICAgICMgaWdub3JlIHRoZSBwYXJhbWV0ZXIgJ0xpbWl0JyB3aGVuIHJlc3VsdCB0eXBlIGlzICdDT1VOVCcKICAgIGlmICggJFJlc3VsdCBlcSAnQ09VTlQnICkgewogICAgICAgIGRlbGV0ZSAkUGFyYW17TGltaXR9OwogICAgfQoKICAgICMgYXNrIGRhdGFiYXNlCiAgICByZXR1cm4gaWYgISRTZWxmLT57REJPYmplY3R9LT5QcmVwYXJlKAogICAgICAgIFNRTCAgID0+ICRTUUwsCiAgICAgICAgTGltaXQgPT4gJFBhcmFte0xpbWl0fSwKICAgICk7CgogICAgIyBmZXRjaCB0aGUgcmVzdWx0CiAgICBteSBASURzOwogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICBwdXNoIEBJRHMsICRSb3dbMF07CiAgICB9CgogICAgaWYgKCAkUmVzdWx0IGVxICdDT1VOVCcgKSB7CgogICAgICAgICMgcmV0dXJuIHRoZSBDT1VOVChjLmlkKSBhdHRyaWJ1dGUKICAgICAgICByZXR1cm4gJElEc1swXTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHJldHVybiBcQElEczsKICAgIH0KfQoKPWl0ZW0gSGlzdG9yeVR5cGVMb29rdXAoKQoKVGhpcyBtZXRob2QgZG9lcyBhIGxvb2t1cCBmb3IgYSBoaXN0b3J5IHR5cGUuIElmIGEgaGlzdG9yeSB0eXBlIGlkIGlzIGdpdmVuLAppdCByZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBoaXN0b3J5IHR5cGUuIElmIGEgaGlzdG9yeSB0eXBlIGlzIGdpdmVuLCB0aGUgYXBwcm9wcmlhdGUKaWQgaXMgcmV0dXJuZWQuCgogICAgbXkgJE5hbWUgPSAkSGlzdG9yeU9iamVjdC0+SGlzdG9yeVR5cGVMb29rdXAoCiAgICAgICAgSGlzdG9yeVR5cGVJRCA9PiAxMjM0LAogICAgKTsKCiAgICBteSAkSUQgPSAkSGlzdG9yeU9iamVjdC0+SGlzdG9yeVR5cGVMb29rdXAoCiAgICAgICAgSGlzdG9yeVR5cGUgPT4gJ1dvcmtPcmRlckFkZCcsCiAgICApOwoKPWN1dAoKc3ViIEhpc3RvcnlUeXBlTG9va3VwIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBmb3IgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17SGlzdG9yeVR5cGVJRH0gJiYgISRQYXJhbXtIaXN0b3J5VHlwZX0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIEhpc3RvcnlUeXBlSUQgb3IgSGlzdG9yeVR5cGUhJywKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIGlmIGJvdGggdmFsaWQga2V5cyBhcmUgZ2l2ZW4sIHJldHVybgogICAgaWYgKCAkUGFyYW17SGlzdG9yeVR5cGVJRH0gJiYgJFBhcmFte0hpc3RvcnlUeXBlfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgZWl0aGVyIEhpc3RvcnlUeXBlSUQgT1IgSGlzdG9yeVR5cGUgLSBub3QgYm90aCEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgZmluZCBvdXQgd2hhdCB0aGUgdXNlZCBrZXkgaXMKICAgIG15ICRLZXkgPSAnSGlzdG9yeVR5cGUnOwoKICAgIGlmICggJFBhcmFte0hpc3RvcnlUeXBlSUR9ICkgewogICAgICAgICRLZXkgPSAnSGlzdG9yeVR5cGVJRCc7CiAgICB9CgogICAgIyBpZiByZXN1bHQgaXMgY2FjaGVkIHJldHVybiB0aGF0IHJlc3VsdAogICAgcmV0dXJuICRTZWxmLT57Q2FjaGV9LT57SGlzdG9yeVR5cGVMb29rdXB9LT57ICRQYXJhbXskS2V5fSB9CiAgICAgICAgaWYgJFNlbGYtPntDYWNoZX0tPntIaXN0b3J5VHlwZUxvb2t1cH0tPnsgJFBhcmFteyRLZXl9IH07CgogICAgIyBzZXQgdGhlIGFwcHJvcHJpYXRlIFNRTCBzdGF0ZW1lbnQKICAgIG15ICRTUUwgPSAnU0VMRUNUIG5hbWUgRlJPTSBjaGFuZ2VfaGlzdG9yeV90eXBlIFdIRVJFIGlkID0gPyc7CgogICAgaWYgKCAkS2V5IGVxICdIaXN0b3J5VHlwZScgKSB7CiAgICAgICAgJFNRTCA9ICdTRUxFQ1QgaWQgRlJPTSBjaGFuZ2VfaGlzdG9yeV90eXBlIFdIRVJFIG5hbWUgPSA/JzsKICAgIH0KCiAgICAjIGZldGNoIHRoZSByZXF1ZXN0ZWQgdmFsdWUKICAgIHJldHVybiBpZiAhJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoCiAgICAgICAgU1FMICAgPT4gJFNRTCwKICAgICAgICBCaW5kICA9PiBbIFwkUGFyYW17JEtleX0gXSwKICAgICAgICBMaW1pdCA9PiAxLAogICAgKTsKCiAgICBteSAkVmFsdWU7CiAgICB3aGlsZSAoIG15IEBSb3cgPSAkU2VsZi0+e0RCT2JqZWN0fS0+RmV0Y2hyb3dBcnJheSgpICkgewogICAgICAgICRWYWx1ZSA9ICRSb3dbMF07CiAgICB9CgogICAgIyBzYXZlIHZhbHVlIGluIGNhY2hlCiAgICAkU2VsZi0+e0NhY2hlfS0+e0hpc3RvcnlUeXBlTG9va3VwfS0+eyAkUGFyYW17JEtleX0gfSA9ICRWYWx1ZTsKCiAgICByZXR1cm4gJFZhbHVlOwp9Cgo9aXRlbSBIaXN0b3J5VHlwZUxpc3QoKQoKcmV0dXJucyBhbiBhcnJheSByZWZlcmVuY2Ugd2l0aCBoYXNocmVmZXJlbmNlcy4gVGhlIGtleSBvZiB0aGUgaGFzaHJlZmVyZW5jZSBpcyB0aGUgaWQKb2YgYW4gcmVjaXBpZW50IGFuZCB0aGUgbmFtZSBpcyB0aGUgdmFsdWUuCgo9Y3V0CgpzdWIgSGlzdG9yeVR5cGVMaXN0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBwcmVwYXJlIGRiIHF1ZXJ5CiAgICByZXR1cm4gaWYgISRTZWxmLT57REJPYmplY3R9LT5QcmVwYXJlKAogICAgICAgIFNRTCA9PiAnU0VMRUNUIGlkLCBuYW1lIEZST00gY2hhbmdlX2hpc3RvcnlfdHlwZSBPUkRFUiBCWSBuYW1lJywKICAgICk7CgogICAgIyByZXRyaWV2ZSBkYXRhCiAgICBteSBASGlzdG9yeVR5cGVzOwogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICBteSAkRW50cnkgPSB7CiAgICAgICAgICAgIEtleSAgID0+ICRSb3dbMF0sCiAgICAgICAgICAgIFZhbHVlID0+ICRSb3dbMV0sCiAgICAgICAgfTsKICAgICAgICBwdXNoIEBIaXN0b3J5VHlwZXMsICRFbnRyeTsKICAgIH0KCiAgICByZXR1cm4gXEBIaXN0b3J5VHlwZXM7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCgo9Y3V0Cgo9aGVhZDEgVkVSU0lPTgoKJFJldmlzaW9uOiAxLjI2LjIuMiAkICREYXRlOiAyMDEwLzA2LzE0IDE3OjMwOjA0ICQKCj1jdXQK</File>
        <File Location="Kernel/System/ITSMChange/ITSMStateMachine.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMWorkOrder.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/Notification.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/Template.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9UZW1wbGF0ZS5wbSAtIGFsbCB0ZW1wbGF0ZSBmdW5jdGlvbnMKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IFRlbXBsYXRlLnBtLHYgMS41Mi4yLjMgMjAxMC8wNi8xNSAwMTo1NDoxNSB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6VGVtcGxhdGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7CnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjsKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNQ29uZGl0aW9uOwp1c2UgS2VybmVsOjpTeXN0ZW06OkxpbmtPYmplY3Q7CnVzZSBLZXJuZWw6OlN5c3RlbTo6VmFsaWQ7CnVzZSBLZXJuZWw6OlN5c3RlbTo6VmlydHVhbEZTOwp1c2UgRGF0YTo6RHVtcGVyOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkV2ZW50SGFuZGxlcik7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjUyLjIuMyAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OlRlbXBsYXRlIC0gdGVtcGxhdGUgbGliCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCBmdW5jdGlvbnMgZm9yIHRlbXBsYXRlcyBpbiBJVFNNQ2hhbmdlTWFuYWdlbWVudC4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkRCOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpNYWluOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpUaW1lOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpUZW1wbGF0ZTsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkVGltZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpUaW1lLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJERCT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkRCLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIG15ICRUZW1wbGF0ZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpUZW1wbGF0ZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgID0+ICRUaW1lT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0IChxdyhEQk9iamVjdCBDb25maWdPYmplY3QgRW5jb2RlT2JqZWN0IExvZ09iamVjdCBNYWluT2JqZWN0IFRpbWVPYmplY3QpKSB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgIyBzZXQgdGhlIGRlYnVnIGZsYWcKICAgICRTZWxmLT57RGVidWd9ID0gJFBhcmFte0RlYnVnfSB8fCAwOwoKICAgICMgY3JlYXRlIGFkZGl0aW9uYWwgb2JqZWN0cwogICAgJFNlbGYtPntDaGFuZ2VPYmplY3R9ICAgID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2UtPm5ldyggJXskU2VsZn0gKTsKICAgICRTZWxmLT57V29ya09yZGVyT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyLT5uZXcoICV7JFNlbGZ9ICk7CiAgICAkU2VsZi0+e0xpbmtPYmplY3R9ICAgICAgPSBLZXJuZWw6OlN5c3RlbTo6TGlua09iamVjdC0+bmV3KCAleyRTZWxmfSApOwogICAgJFNlbGYtPntDb25kaXRpb25PYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Db25kaXRpb24tPm5ldyggJXskU2VsZn0gKTsKICAgICRTZWxmLT57VmFsaWRPYmplY3R9ICAgICA9IEtlcm5lbDo6U3lzdGVtOjpWYWxpZC0+bmV3KCAleyRTZWxmfSApOwogICAgJFNlbGYtPntWaXJ0dWFsRlNPYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OlZpcnR1YWxGUy0+bmV3KCAleyRTZWxmfSApOwoKICAgICMgaW5pdCBvZiBldmVudCBoYW5kbGVyCiAgICAkU2VsZi0+RXZlbnRIYW5kbGVySW5pdCgKICAgICAgICBDb25maWcgICAgID0+ICdJVFNNVGVtcGxhdGU6OkV2ZW50TW9kdWxlJywKICAgICAgICBCYXNlT2JqZWN0ID0+ICdUZW1wbGF0ZU9iamVjdCcsCiAgICAgICAgT2JqZWN0cyAgICA9PiB7CiAgICAgICAgICAgICV7JFNlbGZ9LAogICAgICAgIH0sCiAgICApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gVGVtcGxhdGVBZGQoKQoKQWRkIGEgbmV3IHRlbXBsYXRlLgoKICAgIG15ICRUZW1wbGF0ZUlEID0gJFRlbXBsYXRlT2JqZWN0LT5UZW1wbGF0ZUFkZCgKICAgICAgICBOYW1lICAgICAgICAgICA9PiAnVGhlIHRlbXBsYXRlIG5hbWUnLAogICAgICAgIENvbnRlbnQgICAgICAgID0+ICdbeyBDaGFuZ2VBZGQgPT4geyAuLi4gfSB9XScsICAgIyBhIHNlcmlhbGl6ZWQgY2hhbmdlLCB3b3Jrb3JkZXIsIC4uLgogICAgICAgIENvbW1lbnQgICAgICAgID0+ICdBIGNvbW1lbnQnLCAgICAgICAgICAgICAgICAgICAgIyAob3B0aW9uYWwpCiAgICAgICAgVGVtcGxhdGVUeXBlICAgPT4gJ0lUU01DaGFuZ2UnLCAgICAgICAgICAgICAgICAgICAjIGFsdGVybmF0aXZlbHk6IFRlbXBsYXRlVHlwZUlECiAgICAgICAgVGVtcGxhdGVUeXBlSUQgPT4gMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFsdGVybmF0aXZlbHk6IFRlbXBsYXRlVHlwZQogICAgICAgIFZhbGlkSUQgICAgICAgID0+IDEsCiAgICAgICAgVXNlcklEICAgICAgICAgPT4gMSwKICAgICk7Cgo9Y3V0CgpzdWIgVGVtcGxhdGVBZGQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIHRoYXQgbm90IGJvdGggVGVtcGxhdGVUeXBlIGFuZCBUZW1wbGF0ZVR5cGVJRCBhcmUgZ2l2ZW4KICAgIGlmICggJFBhcmFte1RlbXBsYXRlVHlwZX0gJiYgJFBhcmFte1RlbXBsYXRlVHlwZUlEfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgZWl0aGVyIFRlbXBsYXRlVHlwZSBPUiBUZW1wbGF0ZVR5cGVJRCAtIG5vdCBib3RoIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyB3aGVuIHRoZSB0ZW1wbGF0ZSB0eXBlIGlzIGdpdmVuLCB0aGVuIGxvb2sgdXAgdGhlIElECiAgICBpZiAoICRQYXJhbXtUZW1wbGF0ZVR5cGV9ICkgewogICAgICAgICRQYXJhbXtUZW1wbGF0ZVR5cGVJRH0gPSAkU2VsZi0+VGVtcGxhdGVUeXBlTG9va3VwKAogICAgICAgICAgICBUZW1wbGF0ZVR5cGUgPT4gJFBhcmFte1RlbXBsYXRlVHlwZX0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoQ29udGVudCBOYW1lIFRlbXBsYXRlVHlwZUlEIFZhbGlkSUQgVXNlcklEKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNoZWNrIHdoZXRoZXIgYSB0ZW1wbGF0ZSB3aXRoIHRoaXMgbmFtZSBhbmQgdHlwZSBhbHJlYWR5IGV4aXN0cwogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSgKICAgICAgICBTUUwgICA9PiAnU0VMRUNUIGlkIEZST00gY2hhbmdlX3RlbXBsYXRlIFdIRVJFIG5hbWUgPSA/IEFORCB0eXBlX2lkID0gPycsCiAgICAgICAgQmluZCAgPT4gWyBcJFBhcmFte05hbWV9LCBcJFBhcmFte1RlbXBsYXRlVHlwZUlEfSBdLAogICAgICAgIExpbWl0ID0+IDEsCiAgICApOwoKICAgICMgZmV0Y2ggdGhlIHJlc3VsdAogICAgbXkgJFRlbXBsYXRlSUQ7CiAgICB3aGlsZSAoIG15IEBSb3cgPSAkU2VsZi0+e0RCT2JqZWN0fS0+RmV0Y2hyb3dBcnJheSgpICkgewogICAgICAgICRUZW1wbGF0ZUlEID0gJFJvd1swXTsKICAgIH0KCiAgICAjIGEgdGVtcGxhdGUgd2l0aCB0aGlzIG5hbWUgZXhpc3RzIGFscmVhZHkKICAgIGlmICgkVGVtcGxhdGVJRCkgewogICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlID0+CiAgICAgICAgICAgICAgICAiQSB0ZW1wbGF0ZSB3aXRoIHRoZSBuYW1lICckUGFyYW17TmFtZX0nIGFuZCB0aGUgdHlwZSAnJFBhcmFte1RlbXBsYXRlVHlwZUlEfScgYWxyZWFkeSBleGlzdHMhIiwKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIHRyaWdnZXIgVGVtcGxhdGVBZGRQcmUtRXZlbnQKICAgICRTZWxmLT5FdmVudEhhbmRsZXIoCiAgICAgICAgRXZlbnQgPT4gJ1RlbXBsYXRlQWRkUHJlJywKICAgICAgICBEYXRhICA9PiB7CiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICB9LAogICAgICAgIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfSwKICAgICk7CgogICAgIyBhZGQgbmV3IHRlbXBsYXRlIHRvIGRhdGFiYXNlCiAgICByZXR1cm4gaWYgISRTZWxmLT57REJPYmplY3R9LT5EbygKICAgICAgICBTUUwgPT4gJ0lOU0VSVCBJTlRPIGNoYW5nZV90ZW1wbGF0ZSAnCiAgICAgICAgICAgIC4gJyhuYW1lLCBjb21tZW50cywgY29udGVudCwgdHlwZV9pZCwgdmFsaWRfaWQsICcKICAgICAgICAgICAgLiAnY3JlYXRlX3RpbWUsIGNyZWF0ZV9ieSwgY2hhbmdlX3RpbWUsIGNoYW5nZV9ieSkgJwogICAgICAgICAgICAuICdWQUxVRVMgKD8sID8sID8sID8sID8sIGN1cnJlbnRfdGltZXN0YW1wLCA/LCBjdXJyZW50X3RpbWVzdGFtcCwgPyknLAogICAgICAgIEJpbmQgPT4gWwogICAgICAgICAgICBcJFBhcmFte05hbWV9LCBcJFBhcmFte0NvbW1lbnR9LCBcJFBhcmFte0NvbnRlbnR9LCBcJFBhcmFte1RlbXBsYXRlVHlwZUlEfSwKICAgICAgICAgICAgXCRQYXJhbXtWYWxpZElEfSwgXCRQYXJhbXtVc2VySUR9LCBcJFBhcmFte1VzZXJJRH0sCiAgICAgICAgXSwKICAgICk7CgogICAgIyBwcmVwYXJlIFNRTCBzdGF0ZW1lbnQKICAgIHJldHVybiBpZiAhJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoCiAgICAgICAgU1FMICAgPT4gJ1NFTEVDVCBpZCBGUk9NIGNoYW5nZV90ZW1wbGF0ZSBXSEVSRSBuYW1lID0gPyBBTkQgdHlwZV9pZCA9ID8nLAogICAgICAgIEJpbmQgID0+IFsgXCRQYXJhbXtOYW1lfSwgXCRQYXJhbXtUZW1wbGF0ZVR5cGVJRH0gXSwKICAgICAgICBMaW1pdCA9PiAxLAogICAgKTsKCiAgICAjIGZldGNoIHRoZSByZXN1bHQKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgJFRlbXBsYXRlSUQgPSAkUm93WzBdOwogICAgfQoKICAgICMgY2hlY2sgaWYgdGVtcGxhdGUgY291bGQgYmUgYWRkZWQKICAgIGlmICggISRUZW1wbGF0ZUlEICkgewogICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAnVGVtcGxhdGVBZGQoKSBmYWlsZWQhJywKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIHRyaWdnZXIgVGVtcGxhdGVBZGRQb3N0LUV2ZW50CiAgICAkU2VsZi0+RXZlbnRIYW5kbGVyKAogICAgICAgIEV2ZW50ID0+ICdUZW1wbGF0ZUFkZFBvc3QnLAogICAgICAgIERhdGEgID0+IHsKICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICBUZW1wbGF0ZUlEID0+ICRUZW1wbGF0ZUlELAogICAgICAgIH0sCiAgICAgICAgVXNlcklEID0+ICRQYXJhbXtVc2VySUR9LAogICAgKTsKCiAgICAjIFRPRE86IGFsbCBhdHRhY2htZW50cyBpbiB0aGUgdGVtcGxhdGUgc2hvdWxkIGJlIGNvcGllZAogICAgIyBpbiB0aGUgdmlydHVhbCBmcy4gT3RoZXJ3aXNlIGl0IGNvdWxkIGhhcHBlbiB0aGF0IGFuCiAgICAjIGF0dGFjaG1lbnQgaXMgZGVsZXRlZCBhZnRlciB0ZW1wbGF0ZSBjcmVhdGlvbiBhbmQgdGhlcmVmb3JlCiAgICAjIG5vIGxvbmdlciBhdmFpbGFibGUuCgogICAgcmV0dXJuICRUZW1wbGF0ZUlEOwp9Cgo9aXRlbSBUZW1wbGF0ZVVwZGF0ZSgpCgpVcGRhdGUgYSB0ZW1wbGF0ZS4KCiAgICBteSAkU3VjY2VzcyA9ICRUZW1wbGF0ZU9iamVjdC0+VGVtcGxhdGVVcGRhdGUoCiAgICAgICAgVGVtcGxhdGVJRCA9PiAxMjM0LAogICAgICAgIE5hbWUgICAgICAgPT4gJ1RoZSB0ZW1wbGF0ZSBuYW1lJywgICAgICAgICAgIyAob3B0aW9uYWwpCiAgICAgICAgQ29tbWVudCAgICA9PiAnQSBjb21tZW50JywgICAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkKICAgICAgICBDb250ZW50ICA9PiAnW3sgQ2hhbmdlQWRkID0+IHsgLi4uIH0gfV0nLCAgICMgKG9wdGlvbmFsKSBhIHNlcmlhbGl6ZWQgY2hhbmdlLCB3b3Jrb3JkZXIsIC4uLgogICAgICAgIFZhbGlkSUQgICAgPT4gMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAob3B0aW9uYWwpCiAgICAgICAgVHlwZUlEICAgICA9PiAxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkKICAgICAgICBVc2VySUQgICAgID0+IDEsCiAgICApOwoKPWN1dAoKc3ViIFRlbXBsYXRlVXBkYXRlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KFRlbXBsYXRlSUQgVXNlcklEKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIHRyaWdnZXIgVGVtcGxhdGVVcGRhdGVQcmUtRXZlbnQKICAgICRTZWxmLT5FdmVudEhhbmRsZXIoCiAgICAgICAgRXZlbnQgPT4gJ1RlbXBsYXRlVXBkYXRlUHJlJywKICAgICAgICBEYXRhICA9PiB7CiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICB9LAogICAgICAgIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfSwKICAgICk7CgogICAgIyBnZXQgdGVtcGxhdGUgZGF0YQogICAgbXkgJFRlbXBsYXRlRGF0YSA9ICRTZWxmLT5UZW1wbGF0ZUdldCgKICAgICAgICBUZW1wbGF0ZUlEID0+ICRQYXJhbXtUZW1wbGF0ZUlEfSwKICAgICAgICBVc2VySUQgICAgID0+ICRQYXJhbXtVc2VySUR9LAogICAgKTsKCiAgICAjIG1hcCB1cGRhdGUgYXR0cmlidXRlcyB0byBjb2x1bW4gbmFtZXMKICAgIG15ICVBdHRyaWJ1dGUgPSAoCiAgICAgICAgTmFtZSAgICA9PiAnbmFtZScsCiAgICAgICAgQ29tbWVudCA9PiAnY29tbWVudHMnLAogICAgICAgIENvbnRlbnQgPT4gJ2NvbnRlbnQnLAogICAgICAgIFZhbGlkSUQgPT4gJ3ZhbGlkX2lkJywKICAgICAgICBUeXBlSUQgID0+ICd0eXBlX2lkJywKICAgICk7CgogICAgIyBidWlsZCBTUUwgdG8gdXBkYXRlIHRlbXBsYXRlCiAgICBteSAkU1FMID0gJ1VQREFURSBjaGFuZ2VfdGVtcGxhdGUgU0VUICc7CiAgICBteSBAQmluZDsKCiAgICBBVFRSSUJVVEU6CiAgICBmb3IgbXkgJEF0dHJpYnV0ZSAoIGtleXMgJUF0dHJpYnV0ZSApIHsKCiAgICAgICAgIyBwcmVzZXJ2ZSB0aGUgb2xkIHZhbHVlLCB3aGVuIHRoZSBjb2x1bW4gaXNuJ3QgaW4gZnVuY3Rpb24gcGFyYW1ldGVycwogICAgICAgIG5leHQgQVRUUklCVVRFIGlmICFleGlzdHMgJFBhcmFteyRBdHRyaWJ1dGV9OwoKICAgICAgICAjIHBhcmFtIGNoZWNraW5nIGhhcyBhbHJlYWR5IGJlZW4gZG9uZSwgc28gdGhpcyBpcyBzYWZlCiAgICAgICAgJFNRTCAuPSAiJEF0dHJpYnV0ZXskQXR0cmlidXRlfSA9ID8sICI7CiAgICAgICAgcHVzaCBAQmluZCwgXCRQYXJhbXskQXR0cmlidXRlfTsKICAgIH0KCiAgICAjIGFkZCBjaGFuZ2UgdGltZSBhbmQgY2hhbmdlIHVzZXIKICAgICRTUUwgLj0gJ2NoYW5nZV90aW1lID0gY3VycmVudF90aW1lc3RhbXAsIGNoYW5nZV9ieSA9ID8gJzsKICAgIHB1c2ggQEJpbmQsIFwkUGFyYW17VXNlcklEfTsKCiAgICAjIHNldCBtYXRjaGluZyBvZiBTUUwgc3RhdGVtZW50CiAgICAkU1FMIC49ICdXSEVSRSBpZCA9ID8nOwogICAgcHVzaCBAQmluZCwgXCRQYXJhbXtUZW1wbGF0ZUlEfTsKCiAgICAjIHVwZGF0ZSB0ZW1wbGF0ZQogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+RG8oCiAgICAgICAgU1FMICA9PiAkU1FMLAogICAgICAgIEJpbmQgPT4gXEBCaW5kLAogICAgKTsKCiAgICAjIHRyaWdnZXIgVGVtcGxhdGVVcGRhdGVQb3N0LUV2ZW50CiAgICAkU2VsZi0+RXZlbnRIYW5kbGVyKAogICAgICAgIEV2ZW50ID0+ICdUZW1wbGF0ZVVwZGF0ZVBvc3QnLAogICAgICAgIERhdGEgID0+IHsKICAgICAgICAgICAgT2xkVGVtcGxhdGVEYXRhID0+ICRUZW1wbGF0ZURhdGEsCiAgICAgICAgICAgICVQYXJhbSwKICAgICAgICB9LAogICAgICAgIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfSwKICAgICk7CgogICAgIyBUT0RPOiBhbGwgYXR0YWNobWVudHMgaW4gdGhlIHRlbXBsYXRlIHNob3VsZCBiZSBjb3BpZWQKICAgICMgaW4gdGhlIHZpcnR1YWwgZnMuIE90aGVyd2lzZSBpdCBjb3VsZCBoYXBwZW4gdGhhdCBhbgogICAgIyBhdHRhY2htZW50IGlzIGRlbGV0ZWQgYWZ0ZXIgdGVtcGxhdGUgY3JlYXRpb24gYW5kIHRoZXJlZm9yZQogICAgIyBubyBsb25nZXIgYXZhaWxhYmxlLgoKICAgIHJldHVybiAxOwp9Cgo9aXRlbSBUZW1wbGF0ZUdldCgpCgpSZXR1cm5zIGEgaGFzaCByZWZlcmVuY2Ugb2YgdGhlIHRlbXBsYXRlIGRhdGEgZm9yIGEgZ2l2ZW4gVGVtcGxhdGVJRC4KCiAgICBteSAkVGVtcGxhdGVEYXRhID0gJFRlbXBsYXRlT2JqZWN0LT5UZW1wbGF0ZUdldCgKICAgICAgICBUZW1wbGF0ZUlEID0+IDEyMywKICAgICAgICBVc2VySUQgICAgICA9PiAxLAogICAgKTsKClRoZSByZXR1cm5lZCBoYXNoIHJlZmVyZW5jZSBjb250YWlucyBmb2xsb3dpbmcgZWxlbWVudHM6CgogICAgJFRlbXBsYXRlRGF0YXtUZW1wbGF0ZUlEfQogICAgJFRlbXBsYXRlRGF0YXtOYW1lfQogICAgJFRlbXBsYXRlRGF0YXtDb21tZW50fQogICAgJFRlbXBsYXRlRGF0YXtDb250ZW50fQogICAgJFRlbXBsYXRlRGF0YXtUeXBlSUR9CiAgICAkVGVtcGxhdGVEYXRhe1R5cGV9CiAgICAkVGVtcGxhdGVEYXRhe1ZhbGlkSUR9CiAgICAkVGVtcGxhdGVEYXRhe0NyZWF0ZVRpbWV9CiAgICAkVGVtcGxhdGVEYXRhe0NyZWF0ZUJ5fQogICAgJFRlbXBsYXRlRGF0YXtDaGFuZ2VUaW1lfQogICAgJFRlbXBsYXRlRGF0YXtDaGFuZ2VCeX0KCj1jdXQKCnN1YiBUZW1wbGF0ZUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhUZW1wbGF0ZUlEIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBwcmVwYXJlIFNRTCBzdGF0ZW1lbnQKICAgIHJldHVybiBpZiAhJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoCiAgICAgICAgU1FMID0+ICdTRUxFQ1QgY3QuaWQsIGN0Lm5hbWUsIGNvbW1lbnRzLCBjb250ZW50LCB0eXBlX2lkLCBjdHQubmFtZSwgJwogICAgICAgICAgICAuICdjdC52YWxpZF9pZCwgY3QuY3JlYXRlX3RpbWUsIGN0LmNyZWF0ZV9ieSwgY3QuY2hhbmdlX3RpbWUsIGN0LmNoYW5nZV9ieSAnCiAgICAgICAgICAgIC4gJ0ZST00gY2hhbmdlX3RlbXBsYXRlIGN0LCBjaGFuZ2VfdGVtcGxhdGVfdHlwZSBjdHQgJwogICAgICAgICAgICAuICdXSEVSRSBjdC50eXBlX2lkID0gY3R0LmlkIEFORCBjdC5pZCA9ID8nLAogICAgICAgIEJpbmQgID0+IFsgXCRQYXJhbXtUZW1wbGF0ZUlEfSBdLAogICAgICAgIExpbWl0ID0+IDEsCiAgICApOwoKICAgICMgZmV0Y2ggdGhlIHJlc3VsdAogICAgbXkgJVRlbXBsYXRlRGF0YTsKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgJFRlbXBsYXRlRGF0YXtUZW1wbGF0ZUlEfSA9ICRSb3dbMF07CiAgICAgICAgJFRlbXBsYXRlRGF0YXtOYW1lfSAgICAgICA9ICRSb3dbMV07CiAgICAgICAgJFRlbXBsYXRlRGF0YXtDb21tZW50fSAgICA9ICRSb3dbMl07CiAgICAgICAgJFRlbXBsYXRlRGF0YXtDb250ZW50fSAgICA9ICRSb3dbM107CiAgICAgICAgJFRlbXBsYXRlRGF0YXtUeXBlSUR9ICAgICA9ICRSb3dbNF07CiAgICAgICAgJFRlbXBsYXRlRGF0YXtUeXBlfSAgICAgICA9ICRSb3dbNV07CiAgICAgICAgJFRlbXBsYXRlRGF0YXtWYWxpZElEfSAgICA9ICRSb3dbNl07CiAgICAgICAgJFRlbXBsYXRlRGF0YXtDcmVhdGVUaW1lfSA9ICRSb3dbN107CiAgICAgICAgJFRlbXBsYXRlRGF0YXtDcmVhdGVCeX0gICA9ICRSb3dbOF07CiAgICAgICAgJFRlbXBsYXRlRGF0YXtDaGFuZ2VUaW1lfSA9ICRSb3dbOV07CiAgICAgICAgJFRlbXBsYXRlRGF0YXtDaGFuZ2VCeX0gICA9ICRSb3dbMTBdOwogICAgfQoKICAgICMgY2hlY2sgZXJyb3IKICAgIGlmICggISVUZW1wbGF0ZURhdGEgKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJUZW1wbGF0ZUlEICRQYXJhbXtUZW1wbGF0ZUlEfSBkb2VzIG5vdCBleGlzdCEiLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgY2xlYW51cCB0aW1lIHN0YW1wcyAoc29tZSBkYXRhYmFzZXMgYXJlIHVzaW5nIGUuIGcuIDIwMDgtMDItMjUgMjI6MDM6MDAuMDAwMDAwKQogICAgVElNRUZJRUxEOgogICAgZm9yIG15ICRUaW1lZmllbGQgKCAnQ3JlYXRlVGltZScsICdDaGFuZ2VUaW1lJywgKSB7CiAgICAgICAgbmV4dCBUSU1FRklFTEQgaWYgISRUZW1wbGF0ZURhdGF7JFRpbWVmaWVsZH07CiAgICAgICAgJFRlbXBsYXRlRGF0YXskVGltZWZpZWxkfQogICAgICAgICAgICA9fiBzeyBcQSAoIFxkXGRcZFxkIC0gXGRcZCAtIFxkXGQgXHMgXGRcZDpcZFxkOlxkXGQgKSBcLiAuKz8gXHogfXskMX14bXM7CiAgICB9CgogICAgcmV0dXJuIFwlVGVtcGxhdGVEYXRhOwp9Cgo9aXRlbSBUZW1wbGF0ZUxpc3QoKQoKcmV0dXJuIGEgaGFzaHJlZiBvZiBhbGwgdGVtcGxhdGVzCgogICAgbXkgJFRlbXBsYXRlcyA9ICRUZW1wbGF0ZU9iamVjdC0+VGVtcGxhdGVMaXN0KAogICAgICAgIFZhbGlkICAgICAgICAgID0+IDAsICAgICAgICAgICAgICMgKG9wdGlvbmFsKSBkZWZhdWx0IDEgKDB8MSkKICAgICAgICBDb21tZW50TGVuZ3RoICA9PiAxNSwgICAgICAgICAgICAjIChvcHRpb25hbCkgZGVmYXVsdCAwCiAgICAgICAgVGVtcGxhdGVUeXBlICAgPT4gJ0lUU01DaGFuZ2UnICAgIyAob3B0aW9uYWwpIG9yIFRlbXBsYXRlVHlwZQogICAgICAgIFRlbXBsYXRlVHlwZUlEID0+IDEsICAgICAgICAgICAgICMgKG9wdGlvbmFsKSBvciBUZW1wbGF0ZVR5cGVJRAogICAgICAgIFVzZXJJRCAgICAgICAgID0+IDEsCiAgICApOwoKcmV0dXJucwoKICAgICRUZW1wbGF0ZXMgPSB7CiAgICAgICAgMSA9PiAnbXkgdGVtcGxhdGUnLAogICAgICAgIDMgPT4gJ3lvdXIgdGVtcGxhdGUgbmFtZScsCiAgICB9OwoKSWYgcGFyYW1ldGVyIEM8Q29tbWVudExlbmd0aD4gaXMgcGFzc2VkLCBhbiBleGNlcnB0IChvZiB0aGUgcGFzc2VkIGxlbmd0aCkKb2YgdGhlIGNvbW1lbnQgaXMgYXBwZW5kZWQgdG8gdGhlIHRlbXBsYXRlIG5hbWUuCklmIHRoZSBwYXJhbWV0ZXIgQzxUZW1wbGF0ZVR5cGU+IG9yIEM8VGVtcGxhdGVUeXBlSUQ+IGlzIHBhc3NlZCwgdGhlbiB0aGUKbGlzdCBvZiB0ZW1wbGF0ZXMgaXMgcmVzdHJpY3RlZCB0byB0aGUgZ2l2ZW4gdHlwZS4KCj1jdXQKCnN1YiBUZW1wbGF0ZUxpc3QgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoVXNlcklEKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNoZWNrIHRoYXQgbm90IGJvdGggVGVtcGxhdGVUeXBlIGFuZCBUZW1wbGF0ZVR5cGVJRCBhcmUgZ2l2ZW4KICAgIGlmICggJFBhcmFte1RlbXBsYXRlVHlwZX0gJiYgJFBhcmFte1RlbXBsYXRlVHlwZUlEfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgZWl0aGVyIFRlbXBsYXRlVHlwZSBPUiBUZW1wbGF0ZVR5cGVJRCAtIG5vdCBib3RoIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyB3aGVuIHRoZSB0ZW1wbGF0ZSB0eXBlIGlzIGdpdmVuLCB0aGVuIGxvb2sgdXAgdGhlIElECiAgICBpZiAoICRQYXJhbXtUZW1wbGF0ZVR5cGV9ICkgewogICAgICAgICRQYXJhbXtUZW1wbGF0ZVR5cGVJRH0gPSAkU2VsZi0+VGVtcGxhdGVUeXBlTG9va3VwKAogICAgICAgICAgICBUZW1wbGF0ZVR5cGUgPT4gJFBhcmFte1RlbXBsYXRlVHlwZX0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGNoZWNrIHZhbGlkIHBhcmFtCiAgICBpZiAoICFkZWZpbmVkICRQYXJhbXtWYWxpZH0gKSB7CiAgICAgICAgJFBhcmFte1ZhbGlkfSA9IDE7CiAgICB9CgogICAgIyBkZWZpbmUgU1FMIHN0YXRlbWVudAogICAgbXkgJFNRTCA9ICdTRUxFQ1QgaWQsIG5hbWUsIGNvbW1lbnRzIEZST00gY2hhbmdlX3RlbXBsYXRlICc7CiAgICBteSBAU1FMV2hlcmU7ICAgICMgYXNzZW1ibGUgdGhlIGNvbmRpdGlvbnMgdXNlZCBpbiB0aGUgV0hFUkUgY2xhdXNlCiAgICBteSBAU1FMQmluZDsKCiAgICAjIHJlc3RyaWN0IGJ5IHRlbXBsYXRlIHR5cGUKICAgIGlmICggJFBhcmFte1RlbXBsYXRlVHlwZUlEfSApIHsKICAgICAgICBwdXNoIEBTUUxXaGVyZSwgInR5cGVfaWQgPSA/IjsKICAgICAgICBwdXNoIEBTUUxCaW5kLCAgXCRQYXJhbXtUZW1wbGF0ZVR5cGVJRH07CiAgICB9CgogICAgIyBnZXQgb25seSB2YWxpZCB0ZW1wbGF0ZSBpZHMKICAgIGlmICggJFBhcmFte1ZhbGlkfSApIHsKCiAgICAgICAgbXkgQFZhbGlkSURzID0gJFNlbGYtPntWYWxpZE9iamVjdH0tPlZhbGlkSURzR2V0KCk7CiAgICAgICAgbXkgJFZhbGlkSURTdHJpbmcgPSBqb2luICcsICcsIEBWYWxpZElEczsKCiAgICAgICAgcHVzaCBAU1FMV2hlcmUsICJ2YWxpZF9pZCBJTiAoICRWYWxpZElEU3RyaW5nICkiOwogICAgfQoKICAgICMgYXBwZW5kIHRoZSBXSEVSRS1jbGF1c2UKICAgIGlmIChAU1FMV2hlcmUpIHsKICAgICAgICAkU1FMIC49ICdXSEVSRSAnOwogICAgICAgICRTUUwgLj0gam9pbiAnIEFORCAnLCBtYXAgeyIoICRfICkifSBAU1FMV2hlcmU7CiAgICAgICAgJFNRTCAuPSAnICc7CiAgICB9CgogICAgIyBwcmVwYXJlIFNRTCBzdGF0ZW1lbnQKICAgIHJldHVybiBpZiAhJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoCiAgICAgICAgU1FMICA9PiAkU1FMLAogICAgICAgIEJpbmQgPT4gXEBTUUxCaW5kLAogICAgKTsKCiAgICAjIGZldGNoIHRoZSByZXN1bHQKICAgIG15ICVUZW1wbGF0ZXM7CiAgICB3aGlsZSAoIG15IEBSb3cgPSAkU2VsZi0+e0RCT2JqZWN0fS0+RmV0Y2hyb3dBcnJheSgpICkgewogICAgICAgICRUZW1wbGF0ZXN7ICRSb3dbMF0gfSA9IFsgJFJvd1sxXSwgJFJvd1syXSBdOwogICAgfQoKICAgIGZvciBteSAkS2V5ICgga2V5cyAlVGVtcGxhdGVzICkgewogICAgICAgIG15ICggJE5hbWUsICRDb21tZW50ICkgPSBAeyAkVGVtcGxhdGVzeyRLZXl9IH07CgogICAgICAgIG15ICRDb21tZW50QXBwZW5kID0gJyc7CiAgICAgICAgaWYgKCAkUGFyYW17Q29tbWVudExlbmd0aH0gJiYgJENvbW1lbnQgKSB7CiAgICAgICAgICAgIG15ICRMZW5ndGggPSAkUGFyYW17Q29tbWVudExlbmd0aH0gPiBsZW5ndGggJENvbW1lbnQKICAgICAgICAgICAgICAgID8gbGVuZ3RoICRDb21tZW50CiAgICAgICAgICAgICAgICA6ICRQYXJhbXtDb21tZW50TGVuZ3RofTsKICAgICAgICAgICAgbXkgJEVsbGlwc2lzID0gJFBhcmFte0NvbW1lbnRMZW5ndGh9ID4gbGVuZ3RoICRDb21tZW50CiAgICAgICAgICAgICAgICA/ICcnCiAgICAgICAgICAgICAgICA6ICcuLi4nOwogICAgICAgICAgICAkQ29tbWVudCA9IHN1YnN0ciAkQ29tbWVudCwgMCwgJExlbmd0aDsKICAgICAgICAgICAgJENvbW1lbnRBcHBlbmQgPSAnICgnIC4gJENvbW1lbnQgLiAkRWxsaXBzaXMgLiAnKSc7CiAgICAgICAgfQoKICAgICAgICAkVGVtcGxhdGVzeyRLZXl9ID0gJE5hbWUgLiAkQ29tbWVudEFwcGVuZDsKICAgIH0KCiAgICByZXR1cm4gXCVUZW1wbGF0ZXM7Cn0KCj1pdGVtIFRlbXBsYXRlU2VhcmNoKCkKClJldHVybnMgZWl0aGVyIGEgbGlzdCwgYXMgYW4gYXJyYXlyZWYsIG9yIGEgY291bnQgb2YgZm91bmQgdGVtcGxhdGUgaWRzLgpUaGUgY291bnQgb2YgcmVzdWx0cyBpcyByZXR1cm5lZCB3aGVuIHRoZSBwYXJhbWV0ZXIgQzxSZXN1bHQgPT4gJ0NPVU5UJz4gaXMgcGFzc2VkLgoKVGhlIHNlYXJjaCBjcml0ZXJpYSBhcmUgbG9naWNhbGx5IEFORCBjb25uZWN0ZWQuCldoZW4gYSBsaXN0IGlzIHBhc3NlZCBhcyBjcml0ZXJpdW0sIHRoZSBpbmRpdmlkdWFsIG1lbWJlcnMgYXJlIE9SIGNvbm5lY3RlZC4KV2hlbiBhbiB1bmRlZiBvciBhIHJlZmVyZW5jZSB0byBhbiBlbXB0eSBhcnJheSBpcyBwYXNzZWQsIHRoZW4gdGhlIHNlYXJjaCBjcml0ZXJpdW0KaXMgaWdub3JlZC4KCiAgICBteSAkVGVtcGxhdGVJRHNSZWYgPSAkVGVtcGxhdGVPYmplY3QtPlRlbXBsYXRlU2VhcmNoKAoKICAgICAgICBOYW1lICAgICAgICAgICAgICA9PiAnU2FtcGxlIHRlbXBsYXRlJywgICAgICAgICAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkKICAgICAgICBDb21tZW50ICAgICAgICAgICA9PiAnanVzdCBhbiBleGFtcGxlJywgICAgICAgICAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkKCiAgICAgICAgVGVtcGxhdGVUeXBlSURzICAgPT4gWyAxMSwgMTIgXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAob3B0aW9uYWwpCiAgICAgICAgVGVtcGxhdGVUeXBlcyAgICAgPT4gWyAnSVRTTUNoYW5nZScsICdDQUInIF0sICAgICAgICAgICAgICAgICAgIyAob3B0aW9uYWwpCgogICAgICAgIENyZWF0ZUJ5ICAgICAgICAgID0+IFsgNSwgMiwgMyBdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgKG9wdGlvbmFsKQogICAgICAgIENoYW5nZUJ5ICAgICAgICAgID0+IFsgMywgMiwgMSBdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgKG9wdGlvbmFsKQoKICAgICAgICAjIHRlbXBsYXRlcyB3aXRoIGNyZWF0ZWQgdGltZSBhZnRlciAuLi4KICAgICAgICBDcmVhdGVUaW1lTmV3ZXJEYXRlICAgICAgID0+ICcyMDA2LTAxLTA5IDAwOjAwOjAxJywgICAgICAgICAgICAjIChvcHRpb25hbCkKICAgICAgICAjIHRlbXBsYXRlcyB3aXRoIGNyZWF0ZWQgdGltZSBiZWZvcmUgdGhlbiAuLi4uCiAgICAgICAgQ3JlYXRlVGltZU9sZGVyRGF0ZSAgICAgICA9PiAnMjAwNi0wMS0xOSAyMzo1OTo1OScsICAgICAgICAgICAgIyAob3B0aW9uYWwpCgogICAgICAgICMgdGVtcGxhdGVzIHdpdGggY2hhbmdlZCB0aW1lIGFmdGVyIC4uLgogICAgICAgIENoYW5nZVRpbWVOZXdlckRhdGUgICAgICAgPT4gJzIwMDYtMDEtMDkgMDA6MDA6MDEnLCAgICAgICAgICAgICMgKG9wdGlvbmFsKQogICAgICAgICMgdGVtcGxhdGVzIHdpdGggY2hhbmdlZCB0aW1lIGJlZm9yZSB0aGVuIC4uLi4KICAgICAgICBDaGFuZ2VUaW1lT2xkZXJEYXRlICAgICAgID0+ICcyMDA2LTAxLTE5IDIzOjU5OjU5JywgICAgICAgICAgICAjIChvcHRpb25hbCkKCiAgICAgICAgT3JkZXJCeSA9PiBbICdUZW1wbGF0ZUlEJywgJ05hbWUnIF0sICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAob3B0aW9uYWwpCiAgICAgICAgIyBpZ25vcmVkIHdoZW4gdGhlIHJlc3VsdCB0eXBlIGlzICdDT1VOVCcKICAgICAgICAjIGRlZmF1bHQ6IFsgJ1RlbXBsYXRlSUQnIF0sCiAgICAgICAgIyAoVGVtcGxhdGVJRCwgTmFtZSwgQ29tbWVudCwgVGVtcGxhdGVUeXBlSUQsCiAgICAgICAgIyBDcmVhdGVUaW1lLCBDcmVhdGVCeSwgQ2hhbmdlVGltZSwgQ2hhbmdlQnkpCgogICAgICAgICMgQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgT3JkZXJCeToKICAgICAgICAjIFRoZSBPcmRlckJ5RGlyZWN0aW9uIGNhbiBiZSBzcGVjaWZpZWQgZm9yIGVhY2ggT3JkZXJCeSBhdHRyaWJ1dGUuCiAgICAgICAgIyBUaGUgcGFpcmluZyBpcyBtYWRlIGJ5IHRoZSBhcnJheSBpbmRpY2VzLgoKICAgICAgICBPcmRlckJ5RGlyZWN0aW9uID0+IFsgJ0Rvd24nLCAnVXAnIF0sICAgICAgICAgICAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkKICAgICAgICAjIGlnbm9yZWQgd2hlbiB0aGUgcmVzdWx0IHR5cGUgaXMgJ0NPVU5UJwogICAgICAgICMgZGVmYXVsdDogWyAnRG93bicgXQogICAgICAgICMgKERvd24gfCBVcCkKCiAgICAgICAgVXNpbmdXaWxkY2FyZHMgPT4gMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAob3B0aW9uYWwpCiAgICAgICAgIyAoMCB8IDEpIGRlZmF1bHQgMQoKICAgICAgICBSZXN1bHQgPT4gJ0FSUkFZJyB8fCAnQ09VTlQnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkKICAgICAgICAjIGRlZmF1bHQ6IEFSUkFZLCByZXR1cm5zIGFuIGFycmF5IG9mIHRlbXBsYXRlIGlkcwogICAgICAgICMgQ09VTlQgcmV0dXJucyBhIHNjYWxhciB3aXRoIHRoZSBudW1iZXIgb2YgZm91bmQgdGVtcGxhdGVzCgogICAgICAgIExpbWl0ID0+IDEwMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgKG9wdGlvbmFsKQogICAgICAgICMgaWdub3JlZCB3aGVuIHRoZSByZXN1bHQgdHlwZSBpcyAnQ09VTlQnCgogICAgICAgIFVzZXJJRCA9PiAxLAogICAgKTsKCj1jdXQKCnN1YiBUZW1wbGF0ZVNlYXJjaCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17VXNlcklEfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgVXNlcklEIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyB2ZXJpZnkgdGhhdCBhbGwgcGFzc2VkIGFycmF5IHBhcmFtZXRlcnMgY29udGFpbiBhbiBhcnJheXJlZgogICAgQVJHVU1FTlQ6CiAgICBmb3IgbXkgJEFyZ3VtZW50ICgKICAgICAgICBxdygKICAgICAgICBPcmRlckJ5CiAgICAgICAgT3JkZXJCeURpcmVjdGlvbgogICAgICAgIFRlbXBsYXRlVHlwZXMKICAgICAgICBUZW1wbGF0ZVR5cGVJRHMKICAgICAgICBDcmVhdGVCeQogICAgICAgIENoYW5nZUJ5CiAgICAgICAgKQogICAgICAgICkKICAgIHsKICAgICAgICBpZiAoICFkZWZpbmVkICRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkUGFyYW17JEFyZ3VtZW50fSB8fD0gW107CgogICAgICAgICAgICBuZXh0IEFSR1VNRU5UOwogICAgICAgIH0KCiAgICAgICAgaWYgKCByZWYgJFBhcmFteyRBcmd1bWVudH0gbmUgJ0FSUkFZJyApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIiRBcmd1bWVudCBtdXN0IGJlIGFuIGFycmF5IHJlZmVyZW5jZSEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIG15IEBTUUxXaGVyZTsgICAgIyBhc3NlbWJsZSB0aGUgY29uZGl0aW9ucyB1c2VkIGluIHRoZSBXSEVSRSBjbGF1c2UKCiAgICAjIGRlZmluZSBvcmRlciB0YWJsZQogICAgbXkgJU9yZGVyQnlUYWJsZSA9ICgKICAgICAgICBUZW1wbGF0ZUlEICAgICA9PiAndC5pZCcsCiAgICAgICAgTmFtZSAgICAgICAgICAgPT4gJ3QubmFtZScsCiAgICAgICAgQ29tbWVudCAgICAgICAgPT4gJ3QuY29tbWVudHMnLAogICAgICAgIFRlbXBsYXRlVHlwZUlEID0+ICd0LnR5cGVfaWQnLAogICAgICAgIFZhbGlkSUQgICAgICAgID0+ICd0LnZhbGlkX2lkJywKICAgICAgICBDcmVhdGVUaW1lICAgICA9PiAndC5jcmVhdGVfdGltZScsCiAgICAgICAgQ3JlYXRlQnkgICAgICAgPT4gJ3QuY3JlYXRlX2J5JywKICAgICAgICBDaGFuZ2VUaW1lICAgICA9PiAndC5jaGFuZ2VfdGltZScsCiAgICAgICAgQ2hhbmdlQnkgICAgICAgPT4gJ3QuY2hhbmdlX2J5JywKICAgICk7CgogICAgIyBjaGVjayBpZiBPcmRlckJ5IGNvbnRhaW5zIG9ubHkgdW5pcXVlIHZhbGlkIHZhbHVlcwogICAgbXkgJU9yZGVyQnlTZWVuOwogICAgZm9yIG15ICRPcmRlckJ5ICggQHsgJFBhcmFte09yZGVyQnl9IH0gKSB7CgogICAgICAgIGlmICggISRPcmRlckJ5IHx8ICEkT3JkZXJCeVRhYmxleyRPcmRlckJ5fSB8fCAkT3JkZXJCeVNlZW57JE9yZGVyQnl9ICkgewoKICAgICAgICAgICAgIyBmb3VuZCBhbiBlcnJvcgogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiT3JkZXJCeSBjb250YWlucyBpbnZhbGlkIHZhbHVlICckT3JkZXJCeScgIgogICAgICAgICAgICAgICAgICAgIC4gJ29yIHRoZSB2YWx1ZSBpcyB1c2VkIG1vcmUgdGhhbiBvbmNlIScsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgICMgcmVtZW1iZXIgdGhlIHZhbHVlIHRvIGNoZWNrIGlmIGl0IGFwcGVhcnMgbW9yZSB0aGFuIG9uY2UKICAgICAgICAkT3JkZXJCeVNlZW57JE9yZGVyQnl9ID0gMTsKICAgIH0KCiAgICAjIGNoZWNrIGlmIE9yZGVyQnlEaXJlY3Rpb24gYXJyYXkgY29udGFpbnMgb25seSAnVXAnIG9yICdEb3duJwogICAgRElSRUNUSU9OOgogICAgZm9yIG15ICREaXJlY3Rpb24gKCBAeyAkUGFyYW17T3JkZXJCeURpcmVjdGlvbn0gfSApIHsKCiAgICAgICAgIyBvbmx5ICdVcCcgb3IgJ0Rvd24nIGFsbG93ZWQKICAgICAgICBuZXh0IERJUkVDVElPTiBpZiAkRGlyZWN0aW9uIGVxICdVcCc7CiAgICAgICAgbmV4dCBESVJFQ1RJT04gaWYgJERpcmVjdGlvbiBlcSAnRG93bic7CgogICAgICAgICMgZm91bmQgYW4gZXJyb3IKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk9yZGVyQnlEaXJlY3Rpb24gY2FuIG9ubHkgY29udGFpbiAnVXAnIG9yICdEb3duJyEiLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgc2V0IGRlZmF1bHQgdmFsdWVzCiAgICBpZiAoICFkZWZpbmVkICRQYXJhbXtVc2luZ1dpbGRjYXJkc30gKSB7CiAgICAgICAgJFBhcmFte1VzaW5nV2lsZGNhcmRzfSA9IDE7CiAgICB9CgogICAgIyBzZXQgdGhlIGRlZmF1bHQgYmVoYXZpb3VyIGZvciB0aGUgcmV0dXJuIHR5cGUKICAgIG15ICRSZXN1bHQgPSAkUGFyYW17UmVzdWx0fSB8fCAnQVJSQVknOwoKICAgICMgY2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gVGVtcGxhdGVUeXBlSURzIGFyZSBhbGwgdmFsaWQKICAgIHJldHVybiBpZiAhJFNlbGYtPl9DaGVja1RlbXBsYXRlVHlwZUlEcygKICAgICAgICBUZW1wbGF0ZVR5cGVJRHMgPT4gJFBhcmFte1RlbXBsYXRlVHlwZUlEc30sCiAgICAgICAgVXNlcklEICAgICAgICAgID0+ICRQYXJhbXtVc2VySUR9LAogICAgKTsKCiAgICAjIGxvb2sgdXAgYW5kIHRodXMgY2hlY2sgdGhlIFRlbXBsYXRlVHlwZXMKICAgIGZvciBteSAkVHlwZSAoIEB7ICRQYXJhbXtUZW1wbGF0ZVR5cGVzfSB9ICkgewoKICAgICAgICAjIGdldCB0aGUgSUQgZm9yIHRoZSBuYW1lCiAgICAgICAgbXkgJFR5cGVJRCA9ICRTZWxmLT5UZW1wbGF0ZVR5cGVMb29rdXAoCiAgICAgICAgICAgIFRlbXBsYXRlVHlwZSA9PiAkVHlwZSwKICAgICAgICApOwoKICAgICAgICAjIGNoZWNrIHdoZXRoZXIgdGhlIElEIHdhcyBmb3VuZCwgd2hldGhlciB0aGUgbmFtZSBleGlzdHMKICAgICAgICBpZiAoICEkVHlwZUlEICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiVGhlIHRlbXBsYXRlIHR5cGUgJyRUeXBlJyBpcyBub3Qga25vd24hIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgcHVzaCBAeyAkUGFyYW17VGVtcGxhdGVUeXBlSURzfSB9LCAkVHlwZUlEOwogICAgfQoKICAgICMgYWRkIHN0cmluZyBwYXJhbXMgdG8gdGhlIFdIRVJFIGNsYXVzZQogICAgbXkgJVN0cmluZ1BhcmFtcyA9ICgKICAgICAgICBOYW1lICAgID0+ICd0Lm5hbWUnLAogICAgICAgIENvbW1lbnQgPT4gJ3QuY29tbWVudHMnLAogICAgKTsKCiAgICAjIGFkZCBzdHJpbmcgcGFyYW1zIHRvIHNxbC13aGVyZS1hcnJheQogICAgU1RSSU5HUEFSQU06CiAgICBmb3IgbXkgJFN0cmluZ1BhcmFtICgga2V5cyAlU3RyaW5nUGFyYW1zICkgewoKICAgICAgICAjIGNoZWNrIHN0cmluZyBwYXJhbXMgZm9yIHVzZWZ1bCB2YWx1ZXMsIHRoZSBzdHJpbmcgJzAnIGlzIGFsbG93ZWQKICAgICAgICBuZXh0IFNUUklOR1BBUkFNIGlmICFleGlzdHMgJFBhcmFteyRTdHJpbmdQYXJhbX07CiAgICAgICAgbmV4dCBTVFJJTkdQQVJBTSBpZiAhZGVmaW5lZCAkUGFyYW17JFN0cmluZ1BhcmFtfTsKICAgICAgICBuZXh0IFNUUklOR1BBUkFNIGlmICRQYXJhbXskU3RyaW5nUGFyYW19IGVxICcnOwoKICAgICAgICAjIHF1b3RlCiAgICAgICAgJFBhcmFteyRTdHJpbmdQYXJhbX0gPSAkU2VsZi0+e0RCT2JqZWN0fS0+UXVvdGUoICRQYXJhbXskU3RyaW5nUGFyYW19ICk7CgogICAgICAgICMgd2lsZGNhcmRzIGFyZSB1c2VkCiAgICAgICAgaWYgKCAkUGFyYW17VXNpbmdXaWxkY2FyZHN9ICkgewoKICAgICAgICAgICAgIyBRdW90ZQogICAgICAgICAgICAkUGFyYW17JFN0cmluZ1BhcmFtfSA9ICRTZWxmLT57REJPYmplY3R9LT5RdW90ZSggJFBhcmFteyRTdHJpbmdQYXJhbX0sICdMaWtlJyApOwoKICAgICAgICAgICAgIyByZXBsYWNlICogd2l0aCAlCiAgICAgICAgICAgICRQYXJhbXskU3RyaW5nUGFyYW19ID1+IHN7IFwqKyB9eyV9eG1zZzsKCiAgICAgICAgICAgICMgZG8gbm90IHVzZSBzdHJpbmcgcGFyYW1zIHdoaWNoIGNvbnRhaW4gb25seSAlCiAgICAgICAgICAgIG5leHQgU1RSSU5HUEFSQU0gaWYgJFBhcmFteyRTdHJpbmdQYXJhbX0gPX4gbXsgXEEgJSogXHogfXhtczsKCiAgICAgICAgICAgIHB1c2ggQFNRTFdoZXJlLAogICAgICAgICAgICAgICAgIkxPV0VSKCRTdHJpbmdQYXJhbXN7JFN0cmluZ1BhcmFtfSkgTElLRSBMT1dFUignJFBhcmFteyRTdHJpbmdQYXJhbX0nKSI7CiAgICAgICAgfQoKICAgICAgICAjIG5vIHdpbGRjYXJkcyBhcmUgdXNlZAogICAgICAgIGVsc2UgewogICAgICAgICAgICBwdXNoIEBTUUxXaGVyZSwKICAgICAgICAgICAgICAgICJMT1dFUigkU3RyaW5nUGFyYW1zeyRTdHJpbmdQYXJhbX0pID0gTE9XRVIoJyRQYXJhbXskU3RyaW5nUGFyYW19JykiOwogICAgICAgIH0KICAgIH0KCiAgICAjIHNldCBhcnJheSBwYXJhbXMKICAgIG15ICVBcnJheVBhcmFtcyA9ICgKICAgICAgICBUZW1wbGF0ZVR5cGVJRHMgPT4gJ3QudHlwZV9pZCcsCiAgICAgICAgQ3JlYXRlQnkgICAgICAgID0+ICd0LmNyZWF0ZV9ieScsCiAgICAgICAgQ2hhbmdlQnkgICAgICAgID0+ICd0LmNoYW5nZV9ieScsCiAgICApOwoKICAgICMgYWRkIGFycmF5IHBhcmFtcyB0byBzcWwtd2hlcmUtYXJyYXkKICAgIEFSUkFZUEFSQU06CiAgICBmb3IgbXkgJEFycmF5UGFyYW0gKCBrZXlzICVBcnJheVBhcmFtcyApIHsKCiAgICAgICAgIyBpZ25vcmUgZW1wdHkgbGlzdHMKICAgICAgICBuZXh0IEFSUkFZUEFSQU0gaWYgIUB7ICRQYXJhbXskQXJyYXlQYXJhbX0gfTsKCiAgICAgICAgIyBxdW90ZQogICAgICAgIGZvciBteSAkT25lUGFyYW0gKCBAeyAkUGFyYW17JEFycmF5UGFyYW19IH0gKSB7CiAgICAgICAgICAgICRPbmVQYXJhbSA9ICRTZWxmLT57REJPYmplY3R9LT5RdW90ZSgkT25lUGFyYW0pOwogICAgICAgIH0KCiAgICAgICAgIyBjcmVhdGUgc3RyaW5nCiAgICAgICAgbXkgJEluU3RyaW5nID0gam9pbiAnLCAnLCBAeyAkUGFyYW17JEFycmF5UGFyYW19IH07CgogICAgICAgIHB1c2ggQFNRTFdoZXJlLCAiJEFycmF5UGFyYW1zeyRBcnJheVBhcmFtfSBJTiAoJEluU3RyaW5nKSI7CiAgICB9CgogICAgIyBjaGVjayB0aGUgdGltZSBwYXJhbXMgYW5kIGFkZCB0aGVtIHRvIHRoZSBXSEVSRSBjbGF1c2Ugb2YgdGhlIFNFTEVDVC1TdGF0ZW1lbnQKICAgIG15ICVUaW1lUGFyYW1zID0gKAogICAgICAgIENyZWF0ZVRpbWVOZXdlckRhdGUgPT4gJ3QuY3JlYXRlX3RpbWUgPj0nLAogICAgICAgIENyZWF0ZVRpbWVPbGRlckRhdGUgPT4gJ3QuY3JlYXRlX3RpbWUgPD0nLAogICAgICAgIENoYW5nZVRpbWVOZXdlckRhdGUgPT4gJ3QuY2hhbmdlX3RpbWUgPj0nLAogICAgICAgIENoYW5nZVRpbWVPbGRlckRhdGUgPT4gJ3QuY2hhbmdlX3RpbWUgPD0nLAogICAgKTsKICAgIFRJTUVQQVJBTToKICAgIGZvciBteSAkVGltZVBhcmFtICgga2V5cyAlVGltZVBhcmFtcyApIHsKCiAgICAgICAgbmV4dCBUSU1FUEFSQU0gaWYgISRQYXJhbXskVGltZVBhcmFtfTsKCiAgICAgICAgaWYgKCAkUGFyYW17JFRpbWVQYXJhbX0gIX4gbXsgXEEgXGRcZFxkXGQtXGRcZC1cZFxkIFxzIFxkXGQ6XGRcZDpcZFxkIFx6IH14bXMgKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJUaGUgcGFyYW1ldGVyICRUaW1lUGFyYW0gaGFzIGFuIGludmFsaWQgZGF0ZSBmb3JtYXQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgIyBxdW90ZQogICAgICAgICRQYXJhbXskVGltZVBhcmFtfSA9ICRTZWxmLT57REJPYmplY3R9LT5RdW90ZSggJFBhcmFteyRUaW1lUGFyYW19ICk7CgogICAgICAgIHB1c2ggQFNRTFdoZXJlLCAiJFRpbWVQYXJhbXN7JFRpbWVQYXJhbX0gJyRQYXJhbXskVGltZVBhcmFtfSciOwogICAgfQoKICAgICMgZGVsZXRlIHRoZSBPcmRlckJ5IHBhcmFtZXRlciB3aGVuIHRoZSByZXN1bHQgdHlwZSBpcyAnQ09VTlQnCiAgICBpZiAoICRSZXN1bHQgZXEgJ0NPVU5UJyApIHsKICAgICAgICAkUGFyYW17T3JkZXJCeX0gPSBbXTsKICAgIH0KCiAgICAjIGFzc2VtYmxlIHRoZSBPUkRFUiBCWSBjbGF1c2UKICAgIG15IEBTUUxPcmRlckJ5OwogICAgbXkgJENvdW50ID0gMDsKICAgIGZvciBteSAkT3JkZXJCeSAoIEB7ICRQYXJhbXtPcmRlckJ5fSB9ICkgewoKICAgICAgICAjIHNldCB0aGUgZGVmYXVsdCBvcmRlciBkaXJlY3Rpb24KICAgICAgICBteSAkRGlyZWN0aW9uID0gJ0RFU0MnOwoKICAgICAgICAjIGFkZCB0aGUgZ2l2ZW4gb3JkZXIgZGlyZWN0aW9uCiAgICAgICAgaWYgKCAkUGFyYW17T3JkZXJCeURpcmVjdGlvbn0tPlskQ291bnRdICkgewogICAgICAgICAgICBpZiAoICRQYXJhbXtPcmRlckJ5RGlyZWN0aW9ufS0+WyRDb3VudF0gZXEgJ1VwJyApIHsKICAgICAgICAgICAgICAgICREaXJlY3Rpb24gPSAnQVNDJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNpZiAoICRQYXJhbXtPcmRlckJ5RGlyZWN0aW9ufS0+WyRDb3VudF0gZXEgJ0Rvd24nICkgewogICAgICAgICAgICAgICAgJERpcmVjdGlvbiA9ICdERVNDJzsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBhZGQgU1FMCiAgICAgICAgcHVzaCBAU1FMT3JkZXJCeSwgIiRPcmRlckJ5VGFibGV7JE9yZGVyQnl9ICREaXJlY3Rpb24iOwogICAgfQogICAgY29udGludWUgewogICAgICAgICRDb3VudCsrOwogICAgfQoKICAgICMgaWYgdGhlcmUgaXMgYSBwb3NzaWJpbGl0eSB0aGF0IHRoZSBvcmRlcmluZyBpcyBub3QgZGV0ZXJtaW5lZAogICAgIyB3ZSBhZGQgYW4gZGVzY2VuZGluZyBvcmRlcmluZyBieSBpZAogICAgaWYgKCAhZ3JlcCB7ICRfIGVxICdUZW1wbGF0ZUlEJyB9ICggQHsgJFBhcmFte09yZGVyQnl9IH0gKSApIHsKICAgICAgICBwdXNoIEBTUUxPcmRlckJ5LCAiJE9yZGVyQnlUYWJsZXtUZW1wbGF0ZUlEfSBERVNDIjsKICAgIH0KCiAgICAjIGFzc2VtYmxlIHRoZSBTUUwgcXVlcnkKICAgIG15ICRTUUwgPSAnU0VMRUNUIHQuaWQgRlJPTSBjaGFuZ2VfdGVtcGxhdGUgdCAnOwoKICAgICMgbW9kaWZ5IFNRTCB3aGVuIHRoZSByZXN1bHQgdHlwZSBpcyAnQ09VTlQnLgogICAgIyBUaGVyZSBpcyBubyAnR1JPVVAgQlknIFNRTC1jbGF1c2UsIHRoZXJlZm9yZSBDT1VOVChjLmlkKSBhbHdheXMgZ2l2ZSB0aGUgd2FudGVkIGNvdW50CiAgICBpZiAoICRSZXN1bHQgZXEgJ0NPVU5UJyApIHsKICAgICAgICAkU1FMICAgICAgICA9ICdTRUxFQ1QgQ09VTlQodC5pZCkgRlJPTSBjaGFuZ2VfdGVtcGxhdGUgdCAnOwogICAgICAgIEBTUUxPcmRlckJ5ID0gKCk7CiAgICB9CgogICAgIyBhZGQgdGhlIFdIRVJFIGNsYXVzZQogICAgaWYgKEBTUUxXaGVyZSkgewogICAgICAgICRTUUwgLj0gJ1dIRVJFICc7CiAgICAgICAgJFNRTCAuPSBqb2luICcgQU5EICcsIG1hcCB7IiggJF8gKSJ9IEBTUUxXaGVyZTsKICAgICAgICAkU1FMIC49ICcgJzsKICAgIH0KCiAgICAjIGFkZCB0aGUgT1JERVIgQlkgY2xhdXNlCiAgICBpZiAoQFNRTE9yZGVyQnkpIHsKICAgICAgICAkU1FMIC49ICdPUkRFUiBCWSAnOwogICAgICAgICRTUUwgLj0gam9pbiAnLCAnLCBAU1FMT3JkZXJCeTsKICAgICAgICAkU1FMIC49ICcgJzsKICAgIH0KCiAgICAjIGlnbm9yZSB0aGUgcGFyYW1ldGVyICdMaW1pdCcgd2hlbiByZXN1bHQgdHlwZSBpcyAnQ09VTlQnCiAgICBpZiAoICRSZXN1bHQgZXEgJ0NPVU5UJyApIHsKICAgICAgICAkUGFyYW17TGltaXR9ID0gMTsKICAgIH0KCiAgICAjIGFzayBkYXRhYmFzZQogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSgKICAgICAgICBTUUwgICA9PiAkU1FMLAogICAgICAgIExpbWl0ID0+ICRQYXJhbXtMaW1pdH0sCiAgICApOwoKICAgICMgZmV0Y2ggdGhlIHJlc3VsdAogICAgbXkgQElEczsKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgcHVzaCBASURzLCAkUm93WzBdOwogICAgfQoKICAgICMgcmV0dXJuIHRoZSBjb3VudCBhcyBzY2FsYXIKICAgIHJldHVybiAkSURzWzBdIGlmICRSZXN1bHQgZXEgJ0NPVU5UJzsKCiAgICByZXR1cm4gXEBJRHM7Cn0KCj1pdGVtIFRlbXBsYXRlRGVsZXRlKCkKCkRlbGV0ZSBhIHRlbXBsYXRlLgoKICAgIG15ICRTdWNjZXNzID0gJFRlbXBsYXRlT2JqZWN0LT5UZW1wbGF0ZURlbGV0ZSgKICAgICAgICBUZW1wbGF0ZUlEID0+IDEyMywKICAgICAgICBVc2VySUQgICAgICA9PiAxLAogICAgKTsKCj1jdXQKCnN1YiBUZW1wbGF0ZURlbGV0ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhUZW1wbGF0ZUlEIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyB0cmlnZ2VyIFRlbXBsYXRlRGVsZXRlUHJlLUV2ZW50CiAgICAkU2VsZi0+RXZlbnRIYW5kbGVyKAogICAgICAgIEV2ZW50ID0+ICdUZW1wbGF0ZURlbGV0ZVByZScsCiAgICAgICAgRGF0YSAgPT4gewogICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgfSwKICAgICAgICBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0sCiAgICApOwoKICAgICMgZ2V0IHRlbXBsYXRlIGRhdGEKICAgIG15ICRUZW1wbGF0ZURhdGEgPSAkU2VsZi0+VGVtcGxhdGVHZXQoCiAgICAgICAgVGVtcGxhdGVJRCA9PiAkUGFyYW17VGVtcGxhdGVJRH0sCiAgICAgICAgVXNlcklEICAgICA9PiAkUGFyYW17VXNlcklEfSwKICAgICk7CgogICAgIyBkZWxldGUgdGVtcGxhdGUgZnJvbSBkYXRhYmFzZQogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+RG8oCiAgICAgICAgU1FMICA9PiAnREVMRVRFIEZST00gY2hhbmdlX3RlbXBsYXRlIFdIRVJFIGlkID0gPycsCiAgICAgICAgQmluZCA9PiBbIFwkUGFyYW17VGVtcGxhdGVJRH0gXSwKICAgICk7CgogICAgIyB0cmlnZ2VyIFRlbXBsYXRlRGVsZXRlUG9zdC1FdmVudAogICAgJFNlbGYtPkV2ZW50SGFuZGxlcigKICAgICAgICBFdmVudCA9PiAnVGVtcGxhdGVEZWxldGVQb3N0JywKICAgICAgICBEYXRhICA9PiB7CiAgICAgICAgICAgIE9sZFRlbXBsYXRlRGF0YSA9PiAkVGVtcGxhdGVEYXRhLAogICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgfSwKICAgICAgICBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0sCiAgICApOwoKICAgIHJldHVybiAxOwp9Cgo9aXRlbSBUZW1wbGF0ZVR5cGVMb29rdXAoKQoKUmV0dXJuIHRoZSB0ZW1wbGF0ZSB0eXBlIGlkIHdoZW4gdGhlIHRlbXBsYXRlIHR5cGUgbmFtZSBpcyBwYXNzZWQuClJldHVybiB0aGUgdGVtcGxhdGUgdHlwZSBuYW1lIHdoZW4gdGhlIHRlbXBsYXRlIHR5cGUgaWQgaXMgcGFzc2VkLgpXaGVuIG5vIHRlbXBsYXRlIHR5cGUgaWQgb3IgdGVtcGxhdGUgdHlwZSBuYW1lIGlzIGZvdW5kLCB0aGVuIHRoZQp1bmRlZmluZWQgdmFsdWUgaXMgcmV0dXJuZWQuCgogICAgbXkgJFR5cGVJRCA9ICRUZW1wbGF0ZU9iamVjdC0+VGVtcGxhdGVUeXBlTG9va3VwKAogICAgICAgIFRlbXBsYXRlVHlwZSA9PiAnbXkgdGVtcGxhdGUgdHlwZSBuYW1lJywKICAgICk7CgogICAgbXkgJFR4cGVOYW1lID0gJFRlbXBsYXRlT2JqZWN0LT5UZW1wbGF0ZVR5cGVMb29rdXAoCiAgICAgICAgVGVtcGxhdGVUeXBlSUQgPT4gNDIsCiAgICApOwoKPWN1dAoKc3ViIFRlbXBsYXRlVHlwZUxvb2t1cCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgdGhlIHRlbXBsYXRlIHR5cGUgaWQgb3IgdGhlIHRlbXBsYXRlIHR5cGUgbmFtZSBtdXN0IGJlIHBhc3NlZAogICAgaWYgKCAhJFBhcmFte1RlbXBsYXRlVHlwZUlEfSAmJiAhJFBhcmFte1RlbXBsYXRlVHlwZX0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIHRoZSBUZW1wbGF0ZVR5cGVJRCBvciB0aGUgVGVtcGxhdGVUeXBlIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBvbmx5IG9uZSBvZiB0ZW1wbGF0ZSBpZCBhbmQgdGVtcGxhdGUgbmFtZSBjYW4gYmUgcGFzc2VkCiAgICBpZiAoICRQYXJhbXtUZW1wbGF0ZVR5cGVJRH0gJiYgJFBhcmFte1RlbXBsYXRlVHlwZX0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIGVpdGhlciB0aGUgVGVtcGxhdGVUeXBlIG9yIHRoZSBUZW1wbGF0ZVRlbXBsYXRlSUQsIG5vdCBib3RoIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBnZXQgdHlwZSBpZAogICAgaWYgKCAkUGFyYW17VGVtcGxhdGVUeXBlfSApIHsKICAgICAgICByZXR1cm4gaWYgISRTZWxmLT57REJPYmplY3R9LT5QcmVwYXJlKAogICAgICAgICAgICBTUUwgICA9PiAnU0VMRUNUIGlkIEZST00gY2hhbmdlX3RlbXBsYXRlX3R5cGUgV0hFUkUgbmFtZSA9ID8nLAogICAgICAgICAgICBCaW5kICA9PiBbIFwkUGFyYW17VGVtcGxhdGVUeXBlfSBdLAogICAgICAgICAgICBMaW1pdCA9PiAxLAogICAgICAgICk7CgogICAgICAgIG15ICRUeXBlSUQ7CiAgICAgICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICAgICAgJFR5cGVJRCA9ICRSb3dbMF07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJFR5cGVJRDsKICAgIH0KCiAgICAjIGdldCB0eXBlIG5hbWUKICAgIGVsc2lmICggJFBhcmFte1RlbXBsYXRlVHlwZUlEfSApIHsKCiAgICAgICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSgKICAgICAgICAgICAgU1FMICAgPT4gJ1NFTEVDVCBuYW1lIEZST00gY2hhbmdlX3RlbXBsYXRlX3R5cGUgV0hFUkUgaWQgPSA/JywKICAgICAgICAgICAgQmluZCAgPT4gWyBcJFBhcmFte1RlbXBsYXRlVHlwZUlEfSBdLAogICAgICAgICAgICBMaW1pdCA9PiAxLAogICAgICAgICk7CgogICAgICAgIG15ICRUeXBlTmFtZTsKICAgICAgICB3aGlsZSAoIG15IEBSb3cgPSAkU2VsZi0+e0RCT2JqZWN0fS0+RmV0Y2hyb3dBcnJheSgpICkgewogICAgICAgICAgICAkVHlwZU5hbWUgPSAkUm93WzBdOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRUeXBlTmFtZTsKICAgIH0KCiAgICByZXR1cm47Cn0KCj1pdGVtIFRlbXBsYXRlU2VyaWFsaXplKCkKClRoaXMgbWV0aG9kIGlzIGluIGZhY3QgYSBkaXNwYXRjaGVyIGZvciBkaWZmZXJlbnQgdGVtcGxhdGUgdHlwZXMuCkN1cnJlbnRseSBJVFNNQ2hhbmdlTWFuYWdlbWVudCBzdXBwb3J0cyB0aGVzZSB0ZW1wbGF0ZSB0eXBlczoKCklUU01DaGFuZ2UKSVRTTVdvcmtPcmRlcgpDQUIKSVRTTUNvbmRpdGlvbgoKVGhlIG1ldGhvZCByZXR1cm5zIGEgZGF0YXN0cnVjdHVyZSwgc2VyaWFsaXplZCB3aXRoIERhdGE6OkR1bXBlci4KCiAgICBteSAkQ2hhbmdlVGVtcGxhdGUgPSAkVGVtcGxhdGVPYmplY3QtPlRlbXBsYXRlU2VyaWFsaXplKAogICAgICAgIFRlbXBsYXRlVHlwZSA9PiAnSVRTTUNoYW5nZScsCiAgICAgICAgVXNlcklEICAgICAgID0+IDEsCgogICAgICAgICMgb3RoZXIgb3B0aW9ucyBuZWVkZWQgZGVwZW5kaW5nIG9uIHRoZSB0ZW1wbGF0ZSB0eXBlCiAgICAgICAgQ2hhbmdlSUQgPT4gMTIzLAogICAgKTsKCj1jdXQKCnN1YiBUZW1wbGF0ZVNlcmlhbGl6ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17VXNlcklEfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgVXNlcklEIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyB0aGUgdGVtcGxhdGUgdHlwZSBpZCBvciB0aGUgdGVtcGxhdGUgdHlwZSBuYW1lIG11c3QgYmUgcGFzc2VkCiAgICBpZiAoICEkUGFyYW17VGVtcGxhdGVUeXBlSUR9ICYmICEkUGFyYW17VGVtcGxhdGVUeXBlfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgdGhlIFRlbXBsYXRlVHlwZUlEIG9yIHRoZSBUZW1wbGF0ZVR5cGUhJywKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIG9ubHkgb25lIG9mIHRlbXBsYXRlIHR5cGUgbmFtZSBhbmQgdGVtcGxhdGUgdHlwZSBpZCBjYW4gYmUgcGFzc2VkCiAgICBpZiAoICRQYXJhbXtUZW1wbGF0ZVR5cGV9ICYmICRQYXJhbXtUZW1wbGF0ZVR5cGVJRH0gKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIGVpdGhlciB0aGUgVGVtcGxhdGVUeXBlSUQgb3IgdGhlIFRlbXBsYXRlVHlwZSwgbm90IGJvdGghJywKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBteSAkVGVtcGxhdGVUeXBlID0gJFBhcmFte1RlbXBsYXRlVHlwZX07CiAgICBpZiAoICRQYXJhbXtUZW1wbGF0ZVR5cGVJRH0gKSB7CiAgICAgICAgJFRlbXBsYXRlVHlwZSA9ICRTZWxmLT5UZW1wbGF0ZVR5cGVMb29rdXAoCiAgICAgICAgICAgIFRlbXBsYXRlVHlwZUlEID0+ICRQYXJhbXtUZW1wbGF0ZVR5cGVJRH0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIHdoYXQgdHlwZXMgb2YgdGVtcGxhdGVzIGFyZSBzdXBwb3J0ZWQgYW5kIHdoYXQgc3Vicm91dGluZXMgZG8gdGhlIHNlcmlhbGl6YXRpb24KICAgIG15ICRCYWNrZW5kT2JqZWN0ID0gJFNlbGYtPl9UZW1wbGF0ZUxvYWRCYWNrZW5kKAogICAgICAgIFR5cGUgPT4gJFRlbXBsYXRlVHlwZSwKICAgICk7CgogICAgcmV0dXJuIGlmICEkQmFja2VuZE9iamVjdDsKCiAgICBteSAkU2VyaWFsaXplZERhdGEgPSAkQmFja2VuZE9iamVjdC0+U2VyaWFsaXplKAogICAgICAgICVQYXJhbSwKICAgICk7CgogICAgcmV0dXJuICRTZXJpYWxpemVkRGF0YTsKfQoKPWl0ZW0gVGVtcGxhdGVEZVNlcmlhbGl6ZSgpCgpUaGlzIG1ldGhvZCBkZXNlcmlhbGl6ZXMgdGhlIHRlbXBsYXRlIGNvbnRlbnQuIEl0IHJldHVybnMgdGhlCklEIG9mIHRoZSAibWFpbiIgZWxlbWVudCB0aGF0IHdhcyBjcmVhdGVkIGJhc2VkIG9uIHRoZSB0ZW1wbGF0ZS4KCiAgICBteSAkRWxlbWVudElEID0gJFRlbXBsYXRlT2JqZWN0LT5UZW1wbGF0ZURlU2VyaWFsaXplKAogICAgICAgIFRlbXBsYXRlSUQgPT4gMTIzLAogICAgICAgIFVzZXJJRCAgICAgPT4gMSwKICAgICk7Cgo9Y3V0CgpzdWIgVGVtcGxhdGVEZVNlcmlhbGl6ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhVc2VySUQgVGVtcGxhdGVJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBnZXQgdGVtcGxhdGUKICAgIG15ICRUZW1wbGF0ZSA9ICRTZWxmLT5UZW1wbGF0ZUdldCgKICAgICAgICAlUGFyYW0sCiAgICApOwoKICAgIHJldHVybiBpZiAhJFRlbXBsYXRlOwoKICAgICMgZ2V0IHRoZSBQZXJsIGRhdGFzdHJ1Y3R1cmUKICAgIG15ICRUZW1wbGF0ZUNvbnRlbnQgPSAkVGVtcGxhdGUtPntDb250ZW50fTsKICAgIG15ICRWQVIxOwoKICAgIGV2YWwgIlwkVkFSMSA9ICRUZW1wbGF0ZUNvbnRlbnQ7IDE7IiBvciByZXR1cm47CgogICAgcmV0dXJuIGlmICEkVkFSMTsKICAgIHJldHVybiBpZiByZWYgJFZBUjEgbmUgJ0hBU0gnOwoKICAgICMgY3JlYXRlIGVudGl0aWVzIGRlZmluZWQgYnkgdGhlIHRlbXBsYXRlCiAgICBteSAlSW5mbyA9ICRTZWxmLT5fQ3JlYXRlVGVtcGxhdGVFbGVtZW50cygKICAgICAgICAlUGFyYW0sCiAgICAgICAgVGVtcGxhdGUgPT4gJFZBUjEsCiAgICApOwoKICAgIHJldHVybiAkSW5mb3tJRH07Cn0KCj1iZWdpbiBJbnRlcm5hbDoKCj1pdGVtIF9DcmVhdGVUZW1wbGF0ZUVsZW1lbnRzKCkKClRoaXMgbWV0aG9kIGRpc3BhdGNoZXMgdGhlIGVsZW1lbnRzIGNyZWF0aW9uLiBJdCBjYWxscyB0aGUgc3Vicm91dGluZQp0aGF0IGJlbG9uZ3MgdG8gdGhlIGdpdmVuIHR5cGUgKGUuZy4gQ2hhbmdlQWRkKS4gQWZ0ZXIgdGhhdCBpdAppbnZva2VzIGl0c2VsZiBmb3IgYWxsIHRoZSBjaGlsZHJlbnMgb2YgdGhlIG1haW4gZWxlbWVudC4KClRoaXMgbWV0aG9kIHJldHVybnMgdGhlIElEIG9mIHRoZSBtYWluIGVsZW1lbnQuCgogICAgbXkgJEVsZW1lbnRJRCA9ICRUZW1wbGF0ZU9iamVjdC0+X0NyZWF0ZVRlbXBsYXRlRWxlbWVudHMoCiAgICAgICAgVGVtcGxhdGUgPT4gewogICAgICAgICAgICBDaGFuZ2VBZGQgPT4geyAuLi4gfSwKICAgICAgICAgICAgQ2hpbGRyZW4gID0+IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBXb3JrT3JkZXJBZGQgPT4geyAuLi4gfSwKICAgICAgICAgICAgICAgICAgICBDaGlsZHJlbiAgICAgPT4gWyAuLi4gXSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgV29ya09yZGVyQWRkID0+IHsgLi4uIH0sCiAgICAgICAgICAgICAgICAgICAgQ2hpbGRyZW4gICAgID0+IFsgLi4uIF0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgIH0sCgogICAgICAgICMgYW55IG90aGVyIHBhcmFtZXRlcnMgY2FuIGZvbGxvdwogICAgKQoKPWN1dAoKc3ViIF9DcmVhdGVUZW1wbGF0ZUVsZW1lbnRzIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KFRlbXBsYXRlKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGdldCBjaGlsZHJlbgogICAgbXkgJENoaWxkcmVuID0gZGVsZXRlICRQYXJhbXtUZW1wbGF0ZX0tPntDaGlsZHJlbn07CiAgICAkQ2hpbGRyZW4gfHw9IFtdOwoKICAgICMgZGlzcGF0Y2ggdGFibGUKICAgIG15ICVNZXRob2QyT2JqZWN0ID0gKAogICAgICAgIENoYW5nZUFkZCAgICAgPT4gJ0lUU01DaGFuZ2UnLAogICAgICAgIFdvcmtPcmRlckFkZCAgPT4gJ0lUU01Xb3JrT3JkZXInLAogICAgICAgIENBQkFkZCAgICAgICAgPT4gJ0NBQicsCiAgICAgICAgQ29uZGl0aW9uQWRkICA9PiAnSVRTTUNvbmRpdGlvbicsCiAgICAgICAgQXR0YWNobWVudEFkZCA9PiAnUGFyZW50JywKICAgICAgICBFeHByZXNzaW9uQWRkID0+ICdQYXJlbnQnLAogICAgICAgIEFjdGlvbkFkZCAgICAgPT4gJ1BhcmVudCcsCiAgICAgICAgTGlua0FkZCAgICAgICA9PiAnUGFyZW50JywKICAgICk7CgogICAgIyBnZXQgYWN0aW9uCiAgICBteSAoICRNZXRob2QsICREYXRhICkgPSBlYWNoICV7ICRQYXJhbXtUZW1wbGF0ZX0gfTsKICAgIG15ICRUeXBlID0gJE1ldGhvZDJPYmplY3R7JE1ldGhvZH07CiAgICBteSAkQmFja2VuZE9iamVjdDsKCiAgICBpZiAoICRUeXBlIGVxICdQYXJlbnQnICkgewogICAgICAgICRCYWNrZW5kT2JqZWN0ID0gJFNlbGYtPl9UZW1wbGF0ZUxvYWRCYWNrZW5kKAogICAgICAgICAgICBUeXBlID0+ICRQYXJhbXtQYXJlbnR9LAogICAgICAgICk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkQmFja2VuZE9iamVjdCA9ICRTZWxmLT5fVGVtcGxhdGVMb2FkQmFja2VuZCgKICAgICAgICAgICAgVHlwZSA9PiAkVHlwZSwKICAgICAgICApOwogICAgfQoKICAgIHJldHVybiBpZiAhJEJhY2tlbmRPYmplY3Q7CgogICAgIyBjcmVhdGUgcGFyZW50IGVsZW1lbnQKICAgIG15ICVQYXJlbnRSZXR1cm4gPSAkQmFja2VuZE9iamVjdC0+RGVTZXJpYWxpemUoCiAgICAgICAgJVBhcmFtLAogICAgICAgIERhdGEgICA9PiAkRGF0YSwKICAgICAgICBUeXBlICAgPT4gJFR5cGUsCiAgICAgICAgTWV0aG9kID0+ICRNZXRob2QsCiAgICApOwoKICAgIG15ICVTaWJsaW5nc0luZm87CgogICAgIyBjcmVhdGUgY2hpbGQgZWxlbWVudHMKICAgIGZvciBteSAkQ2hpbGQgKCBAeyRDaGlsZHJlbn0gKSB7CiAgICAgICAgbXkgJUNoaWxkSW5mbyA9ICRTZWxmLT5fQ3JlYXRlVGVtcGxhdGVFbGVtZW50cygKICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAlU2libGluZ3NJbmZvLAogICAgICAgICAgICAlUGFyZW50UmV0dXJuLAogICAgICAgICAgICBUZW1wbGF0ZSA9PiAkQ2hpbGQsCiAgICAgICAgICAgIFBhcmVudCAgID0+ICRUeXBlLAogICAgICAgICAgICBNZXRob2QgICA9PiAkTWV0aG9kLAogICAgICAgICk7CgogICAgICAgICMgc2F2ZSBpbmZvIGZvciBuZXh0IHNpYmxpbmcKICAgICAgICBmb3IgbXkgJEtleSAoIGtleXMgJUNoaWxkSW5mbyApIHsKICAgICAgICAgICAgJFNpYmxpbmdzSW5mb3skS2V5fSA9ICRDaGlsZEluZm97JEtleX07CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAlUGFyZW50UmV0dXJuOwp9Cgo9aXRlbSBfQ2hlY2tUZW1wbGF0ZVR5cGVJRHMoKQoKY2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gdGVtcGxhdGUgdHlwZSBpZHMgYXJlIGFsbCB2YWxpZAoKICAgIG15ICRPayA9ICRUZW1wbGF0ZU9iamVjdC0+X0NoZWNrVGVtcGxhdGVUeXBlSURzKAogICAgICAgIFRlbXBsYXRlVHlwZUlEcyA9PiBbIDIsIDUwMCBdLAogICAgICAgIFVzZXJJRCAgICAgICAgICA9PiAxLAogICAgKTsKCj1jdXQKCnN1YiBfQ2hlY2tUZW1wbGF0ZVR5cGVJRHMgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoVGVtcGxhdGVUeXBlSURzIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgaWYgKCByZWYgJFBhcmFte1RlbXBsYXRlVHlwZUlEc30gbmUgJ0FSUkFZJyApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ1RoZSBwYXJhbSBUZW1wbGF0ZVR5cGVJRHMgbXVzdCBiZSBhbiBBUlJBWSByZWZlcmVuY2UhJywKICAgICAgICApOwoKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBjaGVjayBpZiBUZW1wbGF0ZVR5cGVJRHMgY2FuIGJlIGxvb2tlZCB1cAogICAgZm9yIG15ICRUeXBlSUQgKCBAeyAkUGFyYW17VGVtcGxhdGVUeXBlSURzfSB9ICkgewogICAgICAgIG15ICRUeXBlID0gJFNlbGYtPlRlbXBsYXRlVHlwZUxvb2t1cCgKICAgICAgICAgICAgVGVtcGxhdGVUeXBlSUQgPT4gJFR5cGVJRCwKICAgICAgICApOwoKICAgICAgICBpZiAoICEkVHlwZSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIlRoZSB0eXBlIGlkICRUeXBlSUQgaXMgbm90IHZhbGlkISIsCiAgICAgICAgICAgICk7CgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAxOwp9Cgo9aXRlbSBfVGVtcGxhdGVMb2FkQmFja2VuZCgpCgpSZXR1cm5zIGEgbmV3bHkgbG9hZGVkIGJhY2tlbmQgb2JqZWN0CgogICAgbXkgJEJhY2tlbmRPYmplY3QgPSAkVGVtcGxhdGVPYmplY3QtPl9UZW1wbGF0ZUxvYWRCYWNrZW5kKAogICAgICAgIFR5cGUgPT4gJ0lUU01DaGFuZ2UnLAogICAgKTsKCj1jdXQKCnN1YiBfVGVtcGxhdGVMb2FkQmFja2VuZCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIGlmICggISRQYXJhbXtUeXBlfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgVHlwZSEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgZGVmaW5lIGJhY2tlbmQgbW9kdWxlIG5hbWUKICAgIG15ICRNb2R1bGVOYW1lID0gJ0tlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpUZW1wbGF0ZTo6JyAuICRQYXJhbXtUeXBlfTsKCiAgICAjIGxvYWQgdGhlIGJhY2tlbmQgbW9kdWxlCiAgICBpZiAoICEkU2VsZi0+e01haW5PYmplY3R9LT5SZXF1aXJlKCRNb2R1bGVOYW1lKSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gIkNhbid0IGxvYWQgdGVtcGxhdGUgYmFja2VuZCBtb2R1bGUgJFBhcmFte1R5cGV9ISIKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIGNyZWF0ZSBuZXcgaW5zdGFuY2UKICAgIG15ICRCYWNrZW5kT2JqZWN0ID0gJE1vZHVsZU5hbWUtPm5ldygKICAgICAgICAleyRTZWxmfSwKICAgICAgICAlUGFyYW0sCiAgICApOwoKICAgICMgY2hlY2sgZm9yIGJhY2tlbmQgb2JqZWN0CiAgICBpZiAoICEkQmFja2VuZE9iamVjdCApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gIkNhbid0IGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0ZW1wbGF0ZSBiYWNrZW5kIG1vZHVsZSAkUGFyYW17VHlwZX0hIiwKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICByZXR1cm4gJEJhY2tlbmRPYmplY3Q7Cn0KCjE7Cgo9ZW5kIEludGVybmFsOgoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKGh0dHA6Ly9vdHJzLm9yZy8pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgoKPWN1dAoKPWhlYWQxIFZFUlNJT04KCiRSZXZpc2lvbjogMS41Mi4yLjMgJCAkRGF0ZTogMjAxMC8wNi8xNSAwMTo1NDoxNSAkCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/ITSMChange/Event/Condition.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9FdmVudC9Db25kaXRpb24ucG0gLSBhIGV2ZW50IG1vZHVsZSB0byBtYXRjaCBjb25kaXRpb25zCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBDb25kaXRpb24ucG0sdiAxLjYgMjAxMC8wMi8wMyAxMTowNDozMyBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OkV2ZW50OjpDb25kaXRpb247Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI7CnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTUNvbmRpdGlvbjsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuNiAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OkV2ZW50OjpDb25kaXRpb24gLSBJVFNNIGNoYW5nZSBtYW5hZ2VtZW50IGNvbmRpdGlvbiBldmVudCBsaWIKCj1oZWFkMSBTWU5PUFNJUwoKRXZlbnQgaGFuZGxlciBtb2R1bGUgZm9yIGNvbmRpdGlvbiBtYXRjaGluZyBmb3IgY2hhbmdlcyBhbmQgd29ya29yZGVycy4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkRCOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpNYWluOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpUaW1lOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpFdmVudDo6Q29uZGl0aW9uOwoKICAgIG15ICRDb25maWdPYmplY3QgPSBLZXJuZWw6OkNvbmZpZy0+bmV3KCk7CiAgICBteSAkRW5jb2RlT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkVuY29kZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgKTsKICAgIG15ICRMb2dPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TG9nLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICApOwogICAgbXkgJE1haW5PYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TWFpbi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICRUaW1lT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OlRpbWUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkREJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6REItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwogICAgbXkgJEV2ZW50T2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OkV2ZW50OjpDb25kaXRpb24tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIFRpbWVPYmplY3QgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KERCT2JqZWN0IENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgVGltZU9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCiAgICAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlci0+bmV3KCAleyRTZWxmfSApOwogICAgJFNlbGYtPntDb25kaXRpb25PYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Db25kaXRpb24tPm5ldyggJXskU2VsZn0gKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFJ1bigpCgpUaGUgQzxSdW4oKT4gbWV0aG9kIGhhbmRsZXMgdGhlIGV2ZW50cyBhbmQgbWF0Y2hlcyBhbmQgZXhlY3V0ZXMgYWxsIGNvbmRpdGlvbnMgdGhhdCBhcmUKZGVmaW5lZCBmb3IgdGhlIGN1cnJlbnQgY2hhbmdlLgoKSXQgcmV0dXJucyAxIG9uIHN1Y2Nlc3MsIEM8dW5kZWY+IG90aGVyd2lzZS4KCiAgICBteSAkU3VjY2VzcyA9ICRFdmVudE9iamVjdC0+UnVuKAogICAgICAgIEV2ZW50ID0+ICdDaGFuZ2VVcGRhdGVQb3N0JywKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgQ2hhbmdlSUQgICAgPT4gMTIzLAogICAgICAgICAgICBDaGFuZ2VUaXRsZSA9PiAndGVzdCcsCiAgICAgICAgfSwKICAgICAgICBDb25maWcgPT4gewogICAgICAgICAgICBFdmVudCAgICAgICA9PiAnKENoYW5nZUFkZFBvc3R8Q2hhbmdlVXBkYXRlUG9zdCknLAogICAgICAgICAgICBNb2R1bGUgICAgICA9PiAnS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OkV2ZW50OjpDb25kaXRpb24nLAogICAgICAgICAgICBUcmFuc2FjdGlvbiA9PiAnMCcsCiAgICAgICAgfSwKICAgICAgICBVc2VySUQgPT4gMSwKICAgICk7Cgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KERhdGEgRXZlbnQgQ29uZmlnIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIHRvIHN0b3JlIHRoZSBjaGFuZ2UgaWQKICAgIG15ICRDaGFuZ2VJRDsKCiAgICAjIHRvIHN0b3JlIHRoZSBvYmplY3Qgd2VyZSB0aGUgZGF0YSBjb21lcyBmcm9tCiAgICBteSAkT2JqZWN0OwoKICAgICMgaGFuZGxlIGNoYW5nZSBldmVudHMKICAgIGlmICggJFBhcmFte0V2ZW50fSA9fiBteyBcQSBDaGFuZ2UgfXhtcyApIHsKCiAgICAgICAgIyBzZXQgdGhlIGNoYW5nZSBpZAogICAgICAgICRDaGFuZ2VJRCA9ICRQYXJhbXtEYXRhfS0+e0NoYW5nZUlEfTsKCiAgICAgICAgIyBzZXQgdGhlIG9iamVjdAogICAgICAgICRPYmplY3QgPSAnSVRTTUNoYW5nZSc7CiAgICB9CgogICAgIyBoYW5kbGUgd29ya29yZGVyIGV2ZW50cwogICAgZWxzaWYgKCAkUGFyYW17RXZlbnR9ID1+IG17IFxBIFdvcmtPcmRlciB9eG1zICkgewoKICAgICAgICAjIGdldCB3b3Jrb3JkZXIKICAgICAgICBteSAkV29ya09yZGVyID0gJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9LT5Xb3JrT3JkZXJHZXQoCiAgICAgICAgICAgIFdvcmtPcmRlcklEID0+ICRQYXJhbXtEYXRhfS0+e1dvcmtPcmRlcklEfSwKICAgICAgICAgICAgVXNlcklEICAgICAgPT4gJFBhcmFte1VzZXJJRH0sCiAgICAgICAgKTsKCiAgICAgICAgIyBzZXQgdGhlIGNoYW5nZSBpZCBmcm9tIHdvcmtvcmRlciBkYXRhCiAgICAgICAgJENoYW5nZUlEID0gJFdvcmtPcmRlci0+e0NoYW5nZUlEfTsKCiAgICAgICAgIyBzZXQgdGhlIG9iamVjdAogICAgICAgICRPYmplY3QgPSAnSVRTTVdvcmtPcmRlcic7CiAgICB9CgogICAgIyBzaG93IGVycm9yIGZvciB1bmtub3duIGV2ZW50cwogICAgZWxzZSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJDYW4gbm90IGhhbmRsZSBldmVudCAnJFBhcmFte0V2ZW50fSchIgogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgaW4gY2FzZSBvZiBhbiB1cGRhdGUgZXZlbnQgb3IgYSB0aW1lIHJlYWNoZWQgZXZlbnQsIHN0b3JlIHRoZSB1cGRhdGVkIGF0dHJpYnV0ZXMKICAgIG15IEBBdHRyaWJ1dGVzQ2hhbmdlZDsKICAgIGlmICggJFBhcmFte0V2ZW50fSBlcSAnQ2hhbmdlVXBkYXRlUG9zdCcgKSB7CgogICAgICAgICMgZ2V0IG9sZCBkYXRhCiAgICAgICAgbXkgJE9sZERhdGEgPSAkUGFyYW17RGF0YX0tPntPbGRDaGFuZ2VEYXRhfTsKCiAgICAgICAgRklFTEQ6CiAgICAgICAgZm9yIG15ICRGaWVsZCAoIGtleXMgJXsgJFBhcmFte0RhdGF9IH0gKSB7CgogICAgICAgICAgICAjIGF2b2lkIHJlY3Vyc2lvbgogICAgICAgICAgICBuZXh0IEZJRUxEIGlmICRGaWVsZCBlcSAnT2xkQ2hhbmdlRGF0YSc7CgogICAgICAgICAgICAjIHdlIGRvIG5vdCB0cmFjayB0aGUgdXNlciBpZCBhbmQgInBsYWluIiBjb2x1bW5zCiAgICAgICAgICAgIG5leHQgRklFTEQgaWYgJEZpZWxkIGVxICdVc2VySUQnOwogICAgICAgICAgICBuZXh0IEZJRUxEIGlmICRGaWVsZCBlcSAnSnVzdGlmaWNhdGlvblBsYWluJzsKICAgICAgICAgICAgbmV4dCBGSUVMRCBpZiAkRmllbGQgZXEgJ0Rlc2NyaXB0aW9uUGxhaW4nOwoKICAgICAgICAgICAgIyBjaGVjayBpZiBmaWVsZCBoYXMgY2hhbmdlZAogICAgICAgICAgICBteSAkRmllbGRIYXNDaGFuZ2VkID0gJFNlbGYtPl9IYXNGaWVsZENoYW5nZWQoCiAgICAgICAgICAgICAgICBOZXcgPT4gJFBhcmFte0RhdGF9LT57JEZpZWxkfSwKICAgICAgICAgICAgICAgIE9sZCA9PiAkT2xkRGF0YS0+eyRGaWVsZH0sCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBuZXh0IEZJRUxEIGlmICEkRmllbGRIYXNDaGFuZ2VkOwoKICAgICAgICAgICAgIyByZW1lbWJlciBjaGFuZ2VkIGZpZWxkIG5hbWUKICAgICAgICAgICAgcHVzaCBAQXR0cmlidXRlc0NoYW5nZWQsICRGaWVsZDsKICAgICAgICB9CiAgICB9CiAgICBlbHNpZiAoICRQYXJhbXtFdmVudH0gZXEgJ1dvcmtPcmRlclVwZGF0ZVBvc3QnICkgewoKICAgICAgICAjIGdldCBvbGQgZGF0YQogICAgICAgIG15ICRPbGREYXRhID0gJFBhcmFte0RhdGF9LT57T2xkV29ya09yZGVyRGF0YX07CgogICAgICAgIEZJRUxEOgogICAgICAgIGZvciBteSAkRmllbGQgKCBrZXlzICV7ICRQYXJhbXtEYXRhfSB9ICkgewoKICAgICAgICAgICAgIyBhdm9pZCByZWN1cnNpb24KICAgICAgICAgICAgbmV4dCBGSUVMRCBpZiAkRmllbGQgZXEgJ09sZFdvcmtPcmRlckRhdGEnOwoKICAgICAgICAgICAgIyB3ZSBkbyBub3QgdHJhY2sgdGhlIHVzZXIgaWQgYW5kICJwbGFpbiIgY29sdW1ucwogICAgICAgICAgICBuZXh0IEZJRUxEIGlmICRGaWVsZCBlcSAnVXNlcklEJzsKICAgICAgICAgICAgbmV4dCBGSUVMRCBpZiAkRmllbGQgZXEgJ1JlcG9ydFBsYWluJzsKICAgICAgICAgICAgbmV4dCBGSUVMRCBpZiAkRmllbGQgZXEgJ0luc3RydWN0aW9uUGxhaW4nOwoKICAgICAgICAgICAgIyBzcGVjaWFsIGhhbmRsaW5nIGZvciBhY2NvdW50ZWQgdGltZQogICAgICAgICAgICBpZiAoICRGaWVsZCBlcSAnQWNjb3VudGVkVGltZScgKSB7CgogICAgICAgICAgICAgICAgIyB3ZSBkbyBub3QgdHJhY2sgaWYgYWNjb3VudGVkIHRpbWUgd2FzIGVtcHR5IG9yIHplcm8KICAgICAgICAgICAgICAgIG5leHQgRklFTEQgaWYgISRQYXJhbXtBY2NvdW50ZWRUaW1lfTsKCiAgICAgICAgICAgICAgICAjIHJlbWVtYmVyIGNoYW5nZWQgZmllbGQgbmFtZQogICAgICAgICAgICAgICAgcHVzaCBAQXR0cmlidXRlc0NoYW5nZWQsICRGaWVsZDsKCiAgICAgICAgICAgICAgICBuZXh0IEZJRUxEOwogICAgICAgICAgICB9CgogICAgICAgICAgICAjIGNoZWNrIGlmIGZpZWxkIGhhcyBjaGFuZ2VkCiAgICAgICAgICAgIG15ICRGaWVsZEhhc0NoYW5nZWQgPSAkU2VsZi0+X0hhc0ZpZWxkQ2hhbmdlZCgKICAgICAgICAgICAgICAgIE5ldyA9PiAkUGFyYW17RGF0YX0tPnskRmllbGR9LAogICAgICAgICAgICAgICAgT2xkID0+ICRPbGREYXRhLT57JEZpZWxkfSwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIG5leHQgRklFTEQgaWYgISRGaWVsZEhhc0NoYW5nZWQ7CgogICAgICAgICAgICAjIHJlbWVtYmVyIGNoYW5nZWQgZmllbGQgbmFtZQogICAgICAgICAgICBwdXNoIEBBdHRyaWJ1dGVzQ2hhbmdlZCwgJEZpZWxkOwogICAgICAgIH0KICAgIH0KCiAgICAjIGFsbCBraW5kIG9mIGNoYW5nZSBhbmQgd29ya29yZGVyIHRpbWUgcmVhY2hlZCBldmVudHMKICAgIGVsc2lmICggJFBhcmFte0V2ZW50fSA9fiBteyBcQSAoPzogQ2hhbmdlIHwgV29ya09yZGVyICkgKCAuKyBUaW1lICkgUmVhY2hlZFBvc3QgXHogfXhtcyApIHsKCiAgICAgICAgIyBnZXQgdGhlIG5hbWUgb2YgdGhlIHJlYWNoZWQgdGltZSBmaWVsZAogICAgICAgIG15ICRGaWVsZCA9ICQxOwoKICAgICAgICAjIHJlbWVtYmVyIGNoYW5nZWQgZmllbGQgbmFtZQogICAgICAgIHB1c2ggQEF0dHJpYnV0ZXNDaGFuZ2VkLCAkRmllbGQ7CiAgICB9CgogICAgIyBtYXRjaCBhbGwgY29uZGl0aW9ucyBmb3IgdGhpcyBjaGFuZ2UgYW5kIGV4ZWN1dGUgYWxsIGFjdGlvbnMKICAgIG15ICRTdWNjZXNzID0gJFNlbGYtPntDb25kaXRpb25PYmplY3R9LT5Db25kaXRpb25NYXRjaEV4ZWN1dGVBbGwoCiAgICAgICAgQ2hhbmdlSUQgICAgICAgICAgPT4gJENoYW5nZUlELAogICAgICAgIEF0dHJpYnV0ZXNDaGFuZ2VkID0+IHsgJE9iamVjdCA9PiBcQEF0dHJpYnV0ZXNDaGFuZ2VkIH0sCiAgICAgICAgVXNlcklEICAgICAgICAgICAgPT4gJFBhcmFte1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgZXJyb3JzCiAgICBpZiAoICEkU3VjY2VzcyApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gIkNvbmRpdGlvbk1hdGNoRXhlY3V0ZUFsbCBjb3VsZCBub3QgYmUgIgogICAgICAgICAgICAgICAgLiAiZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5IGZvciBldmVudCAnJFBhcmFte0V2ZW50fSchIgogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIHJldHVybiAxOwp9Cgo9YmVnaW4gSW50ZXJuYWw6Cgo9aXRlbSBfSGFzRmllbGRDaGFuZ2VkKCkKClRoaXMgbWV0aG9kIGNoZWNrcyB3aGV0aGVyIGEgZmllbGQgd2FzIGNoYW5nZWQgb3Igbm90LiBJdCByZXR1cm5zIDEgd2hlbiBmaWVsZAp3YXMgY2hhbmdlZCwgMCBvdGhlcndpc2UKCiAgICBteSAkRmllbGRIYXNDaGFuZ2VkID0gJENvbmRpdGlvbk9iamVjdC0+X0hhc0ZpZWxkQ2hhbmdlZCgKICAgICAgICBPbGQgPT4gJ29sZCB2YWx1ZScsICMgY2FuIGJlIGFycmF5IHJlZmVyZW5jZSBvciBoYXNoIHJlZmVyZW5jZSBhcyB3ZWxsCiAgICAgICAgTmV3ID0+ICduZXcgdmFsdWUnLCAjIGNhbiBiZSBhcnJheSByZWZlcmVuY2Ugb3IgaGFzaCByZWZlcmVuY2UgYXMgd2VsbAogICAgKTsKCj1jdXQKCnN1YiBfSGFzRmllbGRDaGFuZ2VkIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBmaWVsZCBoYXMgY2hhbmdlZCB3aGVuIGVpdGhlciAnbmV3JyBvciAnb2xkIGlzIG5vdCBzZXQKICAgIHJldHVybiAxIGlmICEoICRQYXJhbXtOZXd9ICYmICRQYXJhbXtPbGR9ICkgJiYgKCAkUGFyYW17TmV3fSB8fCAkUGFyYW17T2xkfSApOwoKICAgICMgZmllbGQgaGFzIG5vdCBjaGFuZ2VkIHdoZW4gYm90aCB2YWx1ZXMgYXJlIGVtcHR5CiAgICByZXR1cm4gaWYgISRQYXJhbXtOZXd9ICYmICEkUGFyYW17T2xkfTsKCiAgICAjIHJldHVybiByZXN1bHQgb2YgJ2VxJyB3aGVuIGJvdGggcGFyYW1zIGFyZSBzY2FsYXJzCiAgICByZXR1cm4gJFBhcmFte05ld30gbmUgJFBhcmFte09sZH0gaWYgIXJlZiggJFBhcmFte05ld30gKSAmJiAhcmVmKCAkUGFyYW17T2xkfSApOwoKICAgICMgYSBmaWVsZCBoYXMgY2hhbmdlZCB3aGVuICdyZWYnIGlzIGRpZmZlcmVudAogICAgcmV0dXJuIDEgaWYgcmVmKCAkUGFyYW17TmV3fSApIG5lIHJlZiggJFBhcmFte09sZH0gKTsKCiAgICAjIGNoZWNrIGhhc2hlcwogICAgaWYgKCByZWYgJFBhcmFte05ld30gZXEgJ0hBU0gnICkgewoKICAgICAgICAjIGZpZWxkIGhhcyBjaGFuZ2VkIHdoZW4gbnVtYmVyIG9mIGtleXMgYXJlIGRpZmZlcmVudAogICAgICAgIHJldHVybiAxIGlmIHNjYWxhciBrZXlzICV7ICRQYXJhbXtOZXd9IH0gIT0gc2NhbGFyIGtleXMgJXsgJFBhcmFte09sZH0gfTsKCiAgICAgICAgIyBjaGVjayB0aGUgdmFsdWVzIGZvciBlYWNoIGtleQogICAgICAgIGZvciBteSAkS2V5ICgga2V5cyAleyAkUGFyYW17TmV3fSB9ICkgewogICAgICAgICAgICByZXR1cm4gMSBpZiAkUGFyYW17TmV3fS0+eyRLZXl9IG5lICRQYXJhbXtPbGR9LT57JEtleX07CiAgICAgICAgfQogICAgfQoKICAgICMgY2hlY2sgYXJyYXlzCiAgICBpZiAoIHJlZiAkUGFyYW17TmV3fSBlcSAnQVJSQVknICkgewoKICAgICAgICAjIGNoYW5nZWQgd2hlbiBudW1iZXIgb2YgZWxlbWVudHMgZGlmZmVyCiAgICAgICAgcmV0dXJuIDEgaWYgc2NhbGFyIEB7ICRQYXJhbXtOZXd9IH0gIT0gc2NhbGFyIEB7ICRQYXJhbXtPbGR9IH07CgogICAgICAgICMgY2hlY2sgZWFjaCBlbGVtZW50CiAgICAgICAgZm9yIG15ICRJbmRleCAoIDAgLi4gJCN7ICRQYXJhbXtOZXd9IH0gKSB7CiAgICAgICAgICAgIHJldHVybiAxIGlmICRQYXJhbXtOZXd9LT5bJEluZGV4XSBuZSAkUGFyYW17T2xkfS0+WyRJbmRleF07CiAgICAgICAgfQogICAgfQoKICAgICMgZmllbGQgaGFzIG5vdCBiZWVuIGNoYW5nZWQKICAgIHJldHVybiAwOwp9CgoxOwoKPWVuZCBJbnRlcm5hbDoKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KCj1jdXQKCj1oZWFkMSBWRVJTSU9OCgokUmV2aXNpb246IDEuNiAkICREYXRlOiAyMDEwLzAyLzAzIDExOjA0OjMzICQKCj1jdXQK</File>
        <File Location="Kernel/System/ITSMChange/Event/ConditionDelete.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9FdmVudC9Db25kaXRpb25EZWxldGUucG0gLSBhIGV2ZW50IG1vZHVsZSBmb3IgY2xlYW5pbmcgdXAgY29uZGl0aW9ucwojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQ29uZGl0aW9uRGVsZXRlLnBtLHYgMS4xIDIwMTAvMDIvMDMgMTE6MDQ6MzMgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpFdmVudDo6Q29uZGl0aW9uRGVsZXRlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNQ29uZGl0aW9uOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xICQpIFsxXTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6RXZlbnQ6OkNvbmRpdGlvbkRlbGV0ZSAtIElUU00gY2hhbmdlIG1hbmFnZW1lbnQgY29uZGl0aW9uIGNsZWFudXAgZXZlbnQgbGliCgo9aGVhZDEgU1lOT1BTSVMKCkV2ZW50IGhhbmRsZXIgbW9kdWxlIGZvciBjbGVhbmluZyB1cCBjb25kaXRpb25zLCB3aGVuIGEgY2hhbmdlIGlzIGJlaW5nIGRlbGV0ZWQuCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICB1c2UgS2VybmVsOjpDb25maWc7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkVuY29kZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TG9nOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpEQjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TWFpbjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6VGltZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6RXZlbnQ6OkNvbmRpdGlvbkRlbGV0ZTsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkVGltZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpUaW1lLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJERCT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkRCLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIG15ICRFdmVudE9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpFdmVudDo6Q29uZGl0aW9uRGVsZXRlLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgID0+ICREQk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgPT4gJFRpbWVPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBnZXQgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhEQk9iamVjdCBDb25maWdPYmplY3QgRW5jb2RlT2JqZWN0IExvZ09iamVjdCBNYWluT2JqZWN0IFRpbWVPYmplY3QpCiAgICAgICAgKQogICAgewogICAgICAgICRTZWxmLT57JE9iamVjdH0gPSAkUGFyYW17JE9iamVjdH0gfHwgZGllICJHb3Qgbm8gJE9iamVjdCEiOwogICAgfQoKICAgICMgY3JlYXRlIGFkZGl0aW9uYWwgb2JqZWN0cwogICAgJFNlbGYtPntDb25kaXRpb25PYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Db25kaXRpb24tPm5ldyggJXskU2VsZn0gKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFJ1bigpCgpUaGUgQzxSdW4oKT4gbWV0aG9kIGhhbmRsZXMgdGhlIGNoYW5nZSBkZWxldGUgZXZlbnQgYW5kIGRlbGV0ZXMgdGhlIGNvbmRpdGlvbnMgZm9yCnRoZSBnaXZlbiBjaGFuZ2UuCgpJdCByZXR1cm5zIDEgb24gc3VjY2VzcywgQzx1bmRlZj4gb3RoZXJ3aXNlLgoKICAgIG15ICRTdWNjZXNzID0gJEV2ZW50T2JqZWN0LT5SdW4oCiAgICAgICAgRXZlbnQgPT4gJ0NoYW5nZURlbGV0ZScsCiAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgIENoYW5nZUlEICAgID0+IDEyMywKICAgICAgICB9LAogICAgICAgIENvbmZpZyA9PiB7CiAgICAgICAgICAgIEV2ZW50ICAgICAgID0+ICcoQ2hhbmdlRGVsZXRlUG9zdCknLAogICAgICAgICAgICBNb2R1bGUgICAgICA9PiAnS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OkV2ZW50OjpDb25kaXRpb25EZWxldGUnLAogICAgICAgICAgICBUcmFuc2FjdGlvbiA9PiAnMCcsCiAgICAgICAgfSwKICAgICAgICBVc2VySUQgPT4gMSwKICAgICk7Cgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KERhdGEgRXZlbnQgQ29uZmlnIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBoYW5kbGUgZGVsZXRpb24gb2YgYSBjaGFuZ2UKICAgIGlmICggJFBhcmFte0V2ZW50fSBlcSAnQ2hhbmdlRGVsZXRlUG9zdCcgKSB7CgogICAgICAgICMgZGVsZXRlIGFsbCBjb25kaXRpb25zIChhbmQgZXhwcmVzc2lvbnMgYW5kIGFjdGlvbnMpIGZvciB0aGlzIGNoYW5nZSBpZAogICAgICAgIG15ICRTdWNjZXNzID0gJFNlbGYtPntDb25kaXRpb25PYmplY3R9LT5Db25kaXRpb25EZWxldGVBbGwoCiAgICAgICAgICAgIENoYW5nZUlEID0+ICRQYXJhbXtEYXRhfS0+e0NoYW5nZUlEfSwKICAgICAgICAgICAgVXNlcklEICAgPT4gJFBhcmFte1VzZXJJRH0sCiAgICAgICAgKTsKCiAgICAgICAgIyBoYW5kbGUgZXJyb3IKICAgICAgICBpZiAoICEkU3VjY2VzcyApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIkNvbmRpdGlvbkRlbGV0ZUFsbCgpIGZhaWxlZCBmb3IgQ2hhbmdlSUQgJyRQYXJhbXtEYXRhfS0+e0NoYW5nZUlEfSchIgogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gMTsKICAgIH0KCiAgICAjIGVycm9yCiAgICBlbHNlIHsKCiAgICAgICAgIyBhbiB1bmtub3duIGV2ZW50CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICIkUGFyYW17RXZlbnR9IGlzIGFuIHVua25vd24gZXZlbnQhIiwKICAgICAgICApOwoKICAgICAgICByZXR1cm47CiAgICB9CgogICAgcmV0dXJuIDE7Cn0KCj1iZWdpbiBJbnRlcm5hbDoKCj1jdXQKCjE7Cgo9ZW5kIEludGVybmFsOgoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKGh0dHA6Ly9vdHJzLm9yZy8pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgoKPWN1dAoKPWhlYWQxIFZFUlNJT04KCiRSZXZpc2lvbjogMS4xICQgJERhdGU6IDIwMTAvMDIvMDMgMTE6MDQ6MzMgJAoKPWN1dAo=</File>
        <File Location="Kernel/System/ITSMChange/Event/HistoryAdd.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/Event/HistoryDelete.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9FdmVudC9IaXN0b3J5RGVsZXRlLnBtIC0gSGlzdG9yeURlbGV0ZSBldmVudCBtb2R1bGUgZm9yIElUU01DaGFuZ2UKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IEhpc3RvcnlEZWxldGUucG0sdiAxLjEgMjAxMC8wMi8wMyAxMTowNDozMyBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OkV2ZW50OjpIaXN0b3J5RGVsZXRlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpIaXN0b3J5OwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xICQpIFsxXTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6RXZlbnQ6Okhpc3RvcnlEZWxldGUgLSBDaGFuZ2UgYW5kIHdvcmtvcmRlciBoaXN0b3J5IGNsZWFudXAgbGliCgo9aGVhZDEgU1lOT1BTSVMKCkV2ZW50IGhhbmRsZXIgbW9kdWxlIGZvciBoaXN0b3J5IGRlbGV0ZSBpbiBjaGFuZ2UgbWFuYWdlbWVudC4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkRCOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpNYWluOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpUaW1lOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpFdmVudDo6SGlzdG9yeURlbGV0ZTsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkVGltZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpUaW1lLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJERCT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkRCLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIG15ICRFdmVudE9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpFdmVudDo6SGlzdG9yeURlbGV0ZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgID0+ICRUaW1lT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgZ2V0IG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAoCiAgICAgICAgcXcoREJPYmplY3QgQ29uZmlnT2JqZWN0IEVuY29kZU9iamVjdCBMb2dPYmplY3QgTWFpbk9iamVjdCBUaW1lT2JqZWN0KQogICAgICAgICkKICAgIHsKICAgICAgICAkU2VsZi0+eyRPYmplY3R9ID0gJFBhcmFteyRPYmplY3R9IHx8IGRpZSAiR290IG5vICRPYmplY3QhIjsKICAgIH0KCiAgICAjIGNyZWF0ZSBhZGRpdGlvbmFsIG9iamVjdHMKICAgICRTZWxmLT57SGlzdG9yeU9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SGlzdG9yeS0+bmV3KCAleyRTZWxmfSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gUnVuKCkKClRoZSBDPFJ1bigpPiBtZXRob2QgaGFuZGxlcyBjaGFuZ2UgZGVsZXRlIGV2ZW50cyBhbmQgZGVsZXRlcyB0aGUgaGlzdG9yeSBlbnRyaWVzIGZvcgp0aGUgZ2l2ZW4gY2hhbmdlLgoKSXQgcmV0dXJucyAxIG9uIHN1Y2Nlc3MsIEM8dW5kZWY+IG90aGVyd2lzZS4KCiAgICBteSAkU3VjY2VzcyA9ICRFdmVudE9iamVjdC0+UnVuKAogICAgICAgIEV2ZW50ID0+ICdDaGFuZ2VEZWxldGUnLAogICAgICAgIERhdGEgPT4gewogICAgICAgICAgICBDaGFuZ2VJRCAgICA9PiAxMjMsCiAgICAgICAgfSwKICAgICAgICBDb25maWcgPT4gewogICAgICAgICAgICBFdmVudCAgICAgICA9PiAnKENoYW5nZURlbGV0ZVBvc3QpJywKICAgICAgICAgICAgTW9kdWxlICAgICAgPT4gJ0tlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpFdmVudDo6SGlzdG9yeURlbGV0ZScsCiAgICAgICAgICAgIFRyYW5zYWN0aW9uID0+ICcwJywKICAgICAgICB9LAogICAgICAgIFVzZXJJRCA9PiAxLAogICAgKTsKCj1jdXQKCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoRGF0YSBFdmVudCBDb25maWcgVXNlcklEKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGhhbmRsZSBkZWxldGlvbiBvZiBhIGNoYW5nZQogICAgaWYgKCAkUGFyYW17RXZlbnR9IGVxICdDaGFuZ2VEZWxldGVQb3N0JyApIHsKCiAgICAgICAgIyBkZWxldGUgaGlzdG9yeSBvZiBjaGFuZ2UKICAgICAgICBteSAkU3VjY2VzcyA9ICRTZWxmLT57SGlzdG9yeU9iamVjdH0tPkNoYW5nZUhpc3RvcnlEZWxldGUoCiAgICAgICAgICAgIENoYW5nZUlEID0+ICRQYXJhbXtEYXRhfS0+e0NoYW5nZUlEfSwKICAgICAgICAgICAgVXNlcklEICAgPT4gJFBhcmFte1VzZXJJRH0sCiAgICAgICAgKTsKCiAgICAgICAgIyBoYW5kbGUgZXJyb3IKICAgICAgICBpZiAoICEkU3VjY2VzcyApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSA9PgogICAgICAgICAgICAgICAgICAgICJDb25kaXRpb25IaXN0b3J5RGVsZXRlKCkgZmFpbGVkIGZvciBDaGFuZ2VJRCAnJFBhcmFte0RhdGF9LT57Q2hhbmdlSUR9JyEiCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHJldHVybiAxOwogICAgfQoKICAgICMgZXJyb3IKICAgIGVsc2UgewoKICAgICAgICAjIGFuIHVua25vd24gZXZlbnQKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gIiRQYXJhbXtFdmVudH0gaXMgYW4gdW5rbm93biBldmVudCEiLAogICAgICAgICk7CgogICAgICAgIHJldHVybjsKICAgIH0KCiAgICByZXR1cm4gMTsKfQoKPWJlZ2luIEludGVybmFsOgoKPWN1dAoKMTsKCj1lbmQgSW50ZXJuYWw6Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCgo9Y3V0Cgo9aGVhZDEgVkVSU0lPTgoKJFJldmlzaW9uOiAxLjEgJCAkRGF0ZTogMjAxMC8wMi8wMyAxMTowNDozMyAkCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/ITSMChange/Event/Notification.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition/Action.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition/Attribute.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9JVFNNQ29uZGl0aW9uL0F0dHJpYnV0ZS5wbSAtIGFsbCBjb25kaXRpb24gYXR0cmlidXRlIGZ1bmN0aW9ucwojIENvcHlyaWdodCAoQykgMjAwMS0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLm9yZy8KIyAtLQojICRJZDogQXR0cmlidXRlLnBtLHYgMS4xMC4yLjEgMjAxMC8wNi8xNSAwMTowMDozMSB1YiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTUNvbmRpdGlvbjo6QXR0cmlidXRlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xMC4yLjEgJCkgWzFdOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNQ29uZGl0aW9uOjpBdHRyaWJ1dGUgLSBjb25kaXRpb24gYXR0cmlidXRlIGxpYgoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgZnVuY3Rpb25zIGZvciBjb25kaXRpb24gYXR0cmlidXRlcyBpbiBJVFNNQ2hhbmdlTWFuYWdlbWVudC4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9aXRlbSBBdHRyaWJ1dGVBZGQoKQoKQWRkIGEgbmV3IGNvbmRpdGlvbiBhdHRyaWJ1dGUuCgogICAgbXkgJEF0dHJpYnV0ZUlEID0gJENvbmRpdGlvbk9iamVjdC0+QXR0cmlidXRlQWRkKAogICAgICAgIE5hbWUgICA9PiAnQXR0cmlidXRlTmFtZScsCiAgICAgICAgVXNlcklEID0+IDEsCiAgICApOwoKPWN1dAoKc3ViIEF0dHJpYnV0ZUFkZCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhOYW1lIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBtYWtlIGxvb2t1cCB3aXRoIGdpdmVuIG5hbWUgZm9yIGNoZWNrcwogICAgbXkgJEF0dHJpYnV0ZUlEID0gJFNlbGYtPkF0dHJpYnV0ZUxvb2t1cCggTmFtZSA9PiAkUGFyYW17TmFtZX0gKTsKCiAgICAjIGNoZWNrIGlmIGF0dHJpYnV0ZSBuYW1lIGFscmVhZHkgZXhpc3RzCiAgICBpZiAoJEF0dHJpYnV0ZUlEKSB7CiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJDb25kaXRpb24gYXR0cmlidXRlICgkUGFyYW17TmFtZX0pIGFscmVhZHkgZXhpc3RzISIsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBhZGQgbmV3IGF0dHJpYnV0ZSBuYW1lIHRvIGRhdGFiYXNlCiAgICByZXR1cm4gaWYgISRTZWxmLT57REJPYmplY3R9LT5EbygKICAgICAgICBTUUwgPT4gJ0lOU0VSVCBJTlRPIGNvbmRpdGlvbl9hdHRyaWJ1dGUgJwogICAgICAgICAgICAuICcobmFtZSkgJwogICAgICAgICAgICAuICdWQUxVRVMgKD8pJywKICAgICAgICBCaW5kID0+IFsgXCRQYXJhbXtOYW1lfSBdLAogICAgKTsKCiAgICAjIGdldCBpZCBvZiBjcmVhdGVkIGF0dHJpYnV0ZQogICAgJEF0dHJpYnV0ZUlEID0gJFNlbGYtPkF0dHJpYnV0ZUxvb2t1cCggTmFtZSA9PiAkUGFyYW17TmFtZX0gKTsKCiAgICAjIGNoZWNrIGlmIGF0dHJpYnV0ZSBjb3VsZCBiZSBhZGRlZAogICAgaWYgKCAhJEF0dHJpYnV0ZUlEICkgewogICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiQXR0cmlidXRlQWRkKCkgZmFpbGVkISIsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgcmV0dXJuICRBdHRyaWJ1dGVJRDsKfQoKPWl0ZW0gQXR0cmlidXRlVXBkYXRlKCkKClVwZGF0ZSBhIGNvbmRpdGlvbiBhdHRyaWJ1dGUuCgogICAgbXkgJFN1Y2Nlc3MgPSAkQ29uZGl0aW9uT2JqZWN0LT5BdHRyaWJ1dGVVcGRhdGUoCiAgICAgICAgQXR0cmlidXRlSUQgPT4gMTIzNCwKICAgICAgICBOYW1lICAgICAgICA9PiAnTmV3QXR0cmlidXRlTmFtZScsCiAgICAgICAgVXNlcklEICAgICAgPT4gMSwKICAgICk7Cgo9Y3V0CgpzdWIgQXR0cmlidXRlVXBkYXRlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KEF0dHJpYnV0ZUlEIE5hbWUgVXNlcklEKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGdldCBhdHRyaWJ1dGUgZGF0YQogICAgbXkgJEF0dHJpYnV0ZURhdGEgPSAkU2VsZi0+QXR0cmlidXRlR2V0KAogICAgICAgIEF0dHJpYnV0ZUlEID0+ICRQYXJhbXtBdHRyaWJ1dGVJRH0sCiAgICAgICAgVXNlcklEICAgICAgPT4gJFBhcmFte1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgYXR0cmlidXRlIGRhdGEKICAgIGlmICggISRBdHRyaWJ1dGVEYXRhICkgewogICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiQXR0cmlidXRlVXBkYXRlIG9mICRQYXJhbXtBdHRyaWJ1dGVJRH0gZmFpbGVkISIsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyB1cGRhdGUgYXR0cmlidXRlIGluIGRhdGFiYXNlCiAgICByZXR1cm4gaWYgISRTZWxmLT57REJPYmplY3R9LT5EbygKICAgICAgICBTUUwgPT4gJ1VQREFURSBjb25kaXRpb25fYXR0cmlidXRlICcKICAgICAgICAgICAgLiAnU0VUIG5hbWUgPSA/ICcKICAgICAgICAgICAgLiAnV0hFUkUgaWQgPSA/JywKICAgICAgICBCaW5kID0+IFsKICAgICAgICAgICAgXCRQYXJhbXtOYW1lfSwKICAgICAgICAgICAgXCRQYXJhbXtBdHRyaWJ1dGVJRH0sCiAgICAgICAgXSwKICAgICk7CgogICAgcmV0dXJuIDE7Cn0KCj1pdGVtIEF0dHJpYnV0ZUdldCgpCgpHZXQgYSBjb25kaXRpb24gYXR0cmlidXRlIGZvciBhIGdpdmVuIGF0dHJpYnV0ZSBpZC4KUmV0dXJucyBhIGhhc2ggcmVmZXJlbmNlIG9mIHRoZSBhdHRyaWJ1dGUgZGF0YS4KCiAgICBteSAkQ29uZGl0aW9uQXR0cmlidXRlUmVmID0gJENvbmRpdGlvbk9iamVjdC0+QXR0cmlidXRlR2V0KAogICAgICAgIEF0dHJpYnV0ZUlEID0+IDEyMzQsCiAgICAgICAgVXNlcklEICAgICAgPT4gMSwKICAgICk7CgpUaGUgcmV0dXJuZWQgaGFzaCByZWZlcmVuY2UgY29udGFpbnMgZm9sbG93aW5nIGVsZW1lbnRzOgoKICAgICRDb25kaXRpb25BdHRyaWJ1dGV7QXR0cmlidXRlSUR9CiAgICAkQ29uZGl0aW9uQXR0cmlidXRle05hbWV9Cgo9Y3V0CgpzdWIgQXR0cmlidXRlR2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KEF0dHJpYnV0ZUlEIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBwcmVwYXJlIFNRTCBzdGF0ZW1lbnQKICAgIHJldHVybiBpZiAhJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoCiAgICAgICAgU1FMICAgPT4gJ1NFTEVDVCBpZCwgbmFtZSBGUk9NIGNvbmRpdGlvbl9hdHRyaWJ1dGUgV0hFUkUgaWQgPSA/JywKICAgICAgICBCaW5kICA9PiBbIFwkUGFyYW17QXR0cmlidXRlSUR9IF0sCiAgICAgICAgTGltaXQgPT4gMSwKICAgICk7CgogICAgIyBmZXRjaCB0aGUgcmVzdWx0CiAgICBteSAlQXR0cmlidXRlRGF0YTsKICAgIHdoaWxlICggbXkgQFJvdyA9ICRTZWxmLT57REJPYmplY3R9LT5GZXRjaHJvd0FycmF5KCkgKSB7CiAgICAgICAgJEF0dHJpYnV0ZURhdGF7QXR0cmlidXRlSUR9ID0gJFJvd1swXTsKICAgICAgICAkQXR0cmlidXRlRGF0YXtOYW1lfSAgICAgICAgPSAkUm93WzFdOwogICAgfQoKICAgICMgY2hlY2sgZXJyb3IKICAgIGlmICggISVBdHRyaWJ1dGVEYXRhICkgewogICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiQXR0cmlidXRlSUQgJFBhcmFte0F0dHJpYnV0ZUlEfSBkb2VzIG5vdCBleGlzdCEiLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIHJldHVybiBcJUF0dHJpYnV0ZURhdGE7Cn0KCj1pdGVtIEF0dHJpYnV0ZUxvb2t1cCgpCgpUaGlzIG1ldGhvZCBkb2VzIGEgbG9va3VwIGZvciBhIGNvbmRpdGlvbiBhdHRyaWJ1dGUuIElmIGFuIGF0dHJpYnV0ZQppZCBpcyBnaXZlbiwgaXQgcmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlLiBJZiB0aGUgbmFtZSBvZiB0aGUKYXR0cmlidXRlIGlzIGdpdmVuLCB0aGUgYXBwcm9wcmlhdGUgaWQgaXMgcmV0dXJuZWQuCgogICAgbXkgJEF0dHJpYnV0ZU5hbWUgPSAkQ29uZGl0aW9uT2JqZWN0LT5BdHRyaWJ1dGVMb29rdXAoCiAgICAgICAgQXR0cmlidXRlSUQgPT4gNDMyMSwKICAgICk7CgogICAgbXkgJEF0dHJpYnV0ZUlEID0gJENvbmRpdGlvbk9iamVjdC0+QXR0cmlidXRlTG9va3VwKAogICAgICAgIE5hbWUgICA9PiAnQXR0cmlidXRlTmFtZScsCiAgICApOwoKPWN1dAoKc3ViIEF0dHJpYnV0ZUxvb2t1cCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgaWYgYm90aCBwYXJhbWV0ZXJzIGFyZSBnaXZlbgogICAgaWYgKCAkUGFyYW17QXR0cmlidXRlSUR9ICYmICRQYXJhbXtOYW1lfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgQXR0cmlidXRlSUQgb3IgTmFtZSAtIG5vdCBib3RoIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBjaGVjayBpZiBib3RoIHBhcmFtZXRlcnMgYXJlIG5vdCBnaXZlbgogICAgaWYgKCAhJFBhcmFte0F0dHJpYnV0ZUlEfSAmJiAhJFBhcmFte05hbWV9ICkgewogICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAnTmVlZCBBdHRyaWJ1dGVJRCBvciBOYW1lIC0gbm9uZSBpcyBnaXZlbiEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgY2hlY2sgaWYgQXR0cmlidXRlSUQgaXMgYSBudW1iZXIKICAgIGlmICggJFBhcmFte0F0dHJpYnV0ZUlEfSAmJiAkUGFyYW17QXR0cmlidXRlSUR9ICF+IG17IFxBIFxkKyBceiB9eG1zICkgewogICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiQXR0cmlidXRlSUQgbXVzdCBiZSBhIG51bWJlciEgKEF0dHJpYnV0ZUlEOiAkUGFyYW17QXR0cmlidXRlSUR9KSIsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBwcmVwYXJlIFNRTCBzdGF0ZW1lbnRzCiAgICBpZiAoICRQYXJhbXtBdHRyaWJ1dGVJRH0gKSB7CiAgICAgICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSgKICAgICAgICAgICAgU1FMICAgPT4gJ1NFTEVDVCBuYW1lIEZST00gY29uZGl0aW9uX2F0dHJpYnV0ZSBXSEVSRSBpZCA9ID8nLAogICAgICAgICAgICBCaW5kICA9PiBbIFwkUGFyYW17QXR0cmlidXRlSUR9IF0sCiAgICAgICAgICAgIExpbWl0ID0+IDEsCiAgICAgICAgKTsKICAgIH0KICAgIGVsc2lmICggJFBhcmFte05hbWV9ICkgewogICAgICAgIHJldHVybiBpZiAhJFNlbGYtPntEQk9iamVjdH0tPlByZXBhcmUoCiAgICAgICAgICAgIFNRTCAgID0+ICdTRUxFQ1QgaWQgRlJPTSBjb25kaXRpb25fYXR0cmlidXRlIFdIRVJFIG5hbWUgPSA/JywKICAgICAgICAgICAgQmluZCAgPT4gWyBcJFBhcmFte05hbWV9IF0sCiAgICAgICAgICAgIExpbWl0ID0+IDEsCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGZldGNoIHRoZSByZXN1bHQKICAgIG15ICRMb29rdXA7CiAgICB3aGlsZSAoIG15IEBSb3cgPSAkU2VsZi0+e0RCT2JqZWN0fS0+RmV0Y2hyb3dBcnJheSgpICkgewogICAgICAgICRMb29rdXAgPSAkUm93WzBdOwogICAgfQoKICAgIHJldHVybiAkTG9va3VwOwp9Cgo9aXRlbSBBdHRyaWJ1dGVMaXN0KCkKClJldHVybnMgYSBsaXN0IG9mIGFsbCBjb25kaXRpb24gYXR0cmlidXRlcyBhcyBoYXNoIHJlZmVyZW5jZQoKICAgIG15ICRDb25kaXRpb25BdHRyaWJ1dGVzUmVmID0gJENvbmRpdGlvbk9iamVjdC0+QXR0cmlidXRlTGlzdCgKICAgICAgICBVc2VySUQgPT4gMSwKICAgICk7CgpUaGUgcmV0dXJuZWQgaGFzaCByZWZlcmVuY2UgY29udGFpbnMgZW50cmllcyBsaWtlIHRoaXM6CgogICAgJENvbmRpdGlvbkF0dHJpYnV0ZXtBdHRyaWJ1dGVJRH0gPSAnQXR0cmlidXRlTmFtZScKCj1jdXQKCnN1YiBBdHRyaWJ1dGVMaXN0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRQYXJhbXtVc2VySUR9ICkgewogICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCBVc2VySUQhIiwKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIHByZXBhcmUgU1FMIHN0YXRlbWVudAogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+UHJlcGFyZSgKICAgICAgICBTUUwgPT4gJ1NFTEVDVCBpZCwgbmFtZSBGUk9NIGNvbmRpdGlvbl9hdHRyaWJ1dGUnLAogICAgKTsKCiAgICAjIGZldGNoIHRoZSByZXN1bHQKICAgIG15ICVBdHRyaWJ1dGVMaXN0OwogICAgd2hpbGUgKCBteSBAUm93ID0gJFNlbGYtPntEQk9iamVjdH0tPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICAkQXR0cmlidXRlTGlzdHsgJFJvd1swXSB9ID0gJFJvd1sxXTsKICAgIH0KCiAgICByZXR1cm4gXCVBdHRyaWJ1dGVMaXN0Owp9Cgo9aXRlbSBBdHRyaWJ1dGVEZWxldGUoKQoKRGVsZXRlcyBhIGNvbmRpdGlvbiBhdHRyaWJ1dGUuCgogICAgbXkgJFN1Y2Nlc3MgPSAkQ29uZGl0aW9uT2JqZWN0LT5BdHRyaWJ1dGVEZWxldGUoCiAgICAgICAgQXR0cmlidXRlSUQgPT4gMTIzLAogICAgICAgIFVzZXJJRCAgICAgID0+IDEsCiAgICApOwoKPWN1dAoKc3ViIEF0dHJpYnV0ZURlbGV0ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhBdHRyaWJ1dGVJRCBVc2VySUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRBcmd1bWVudH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBcmd1bWVudCEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgICMgZGVsZXRlIGNvbmRpdGlvbiBhdHRyaWJ1dGUgZnJvbSBkYXRhYmFzZQogICAgcmV0dXJuIGlmICEkU2VsZi0+e0RCT2JqZWN0fS0+RG8oCiAgICAgICAgU1FMID0+ICdERUxFVEUgRlJPTSBjb25kaXRpb25fYXR0cmlidXRlICcKICAgICAgICAgICAgLiAnV0hFUkUgaWQgPSA/JywKICAgICAgICBCaW5kID0+IFsgXCRQYXJhbXtBdHRyaWJ1dGVJRH0gXSwKICAgICk7CgogICAgcmV0dXJuIDE7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCgo9Y3V0Cgo9aGVhZDEgVkVSU0lPTgoKJFJldmlzaW9uOiAxLjEwLjIuMSAkICREYXRlOiAyMDEwLzA2LzE1IDAxOjAwOjMxICQKCj1jdXQK</File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition/Expression.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition/Object.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition/Operator.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition/Object/ITSMChange.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition/Object/ITSMWorkOrder.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition/Operator/ITSMChange.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9JVFNNQ29uZGl0aW9uL09wZXJhdG9yL0lUU01DaGFuZ2UucG0gLSBhbGwgaXRzbSBjaGFuZ2Ugb3BlcmF0b3IgZnVuY3Rpb25zCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBJVFNNQ2hhbmdlLnBtLHYgMS40IDIwMTAvMDEvMzAgMjA6MTI6NDQgbWFlIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNQ29uZGl0aW9uOjpPcGVyYXRvcjo6SVRTTUNoYW5nZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuNCAkKSBbMV07Cgp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Db25kaXRpb246Ok9wZXJhdG9yOjpJVFNNQ2hhbmdlIC0gY29uZGl0aW9uIGl0c20gY2hhbmdlIG9wZXJhdG9yIGxpYgoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgSVRTTUNoYW5nZSBvcGVyYXRvciBmdW5jdGlvbnMgZm9yIGNvbmRpdGlvbnMgaW4gSVRTTUNoYW5nZU1hbmFnZW1lbnQuCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICB1c2UgS2VybmVsOjpDb25maWc7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkVuY29kZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TG9nOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpEQjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TWFpbjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6VGltZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTUNvbmRpdGlvbjo6T3BlcmF0b3I6OklUU01DaGFuZ2U7CgogICAgbXkgJENvbmZpZ09iamVjdCA9IEtlcm5lbDo6Q29uZmlnLT5uZXcoKTsKICAgIG15ICRFbmNvZGVPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICApOwogICAgbXkgJExvZ09iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpMb2ctPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICk7CiAgICBteSAkTWFpbk9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpNYWluLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJFRpbWVPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6VGltZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICREQk9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpEQi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7CiAgICBteSAkQ29uZGl0aW9uT3BlcmF0b3JJVFNNQ2hhbmdlID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Db25kaXRpb246Ok9wZXJhdG9yOjpJVFNNQ2hhbmdlLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgICAgIFRpbWVPYmplY3QgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKHF3KERCT2JqZWN0IENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgVGltZU9iamVjdCkpIHsKICAgICAgICAkU2VsZi0+eyRPYmplY3R9ID0gJFBhcmFteyRPYmplY3R9IHx8IGRpZSAiR290IG5vICRPYmplY3QhIjsKICAgIH0KCiAgICAjIGNyZWF0ZSBhZGRpdGlvbmFsIG9iamVjdHMKICAgICRTZWxmLT57Q2hhbmdlT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoICV7JFNlbGZ9ICk7CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBTZXQoKQoKVXBkYXRlcyBhIGNoYW5nZSB3aXRoIHRoZSBnaXZlbiBkYXRhLgoKICAgIG15ICRTdWNjZXNzID0gJElUU01DaGFuZ2VPcGVyYXRvci0+U2V0KAogICAgICAgIFNlbGVjdG9yICAgID0+IDEyMzQsCiAgICAgICAgQXR0cmlidXRlICAgPT4gJ0NoYW5nZVN0YXRlSUQnLAogICAgICAgIEFjdGlvblZhbHVlID0+IDIzNDUsCiAgICAgICAgVXNlcklEICAgICAgPT4gMTIzNCwKICAgICk7Cgo9Y3V0CgpzdWIgU2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KFNlbGVjdG9yIEF0dHJpYnV0ZSBBY3Rpb25WYWx1ZSBVc2VySUQpKSB7CiAgICAgICAgaWYgKCAhZXhpc3RzICRQYXJhbXskQXJndW1lbnR9IHx8ICFkZWZpbmVkICRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGdldCBjaGFuZ2UKICAgIG15ICRDaGFuZ2UgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUdldCgKICAgICAgICBDaGFuZ2VJRCA9PiAkUGFyYW17U2VsZWN0b3J9LAogICAgICAgIFVzZXJJRCAgID0+ICRQYXJhbXtVc2VySUR9LAogICAgKTsKCiAgICAjIGNoZWNrIGVycm9yCiAgICByZXR1cm4gaWYgISRDaGFuZ2U7CiAgICByZXR1cm4gaWYgcmVmICRDaGFuZ2UgbmUgJ0hBU0gnOwoKICAgICMgZG8gbm90IHVwZGF0ZSB0aGUgYXR0cmlidXRlIGlmIGl0IGFscmVhZHkgaGFzIHRoaXMgdmFsdWUKICAgICMgKCB0aGlzIHdpbGwgcHJldmVudCBpbmZpbml0ZSBldmVudCBsb29waW5nISApCiAgICByZXR1cm4gMSBpZiAkQ2hhbmdlLT57ICRQYXJhbXtBdHRyaWJ1dGV9IH0gZXEgJFBhcmFte0FjdGlvblZhbHVlfTsKCiAgICAjIHVwZGF0ZSBjaGFuZ2UgYW5kIHJldHVybiB1cGRhdGUgcmVzdWx0CiAgICByZXR1cm4gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5DaGFuZ2VVcGRhdGUoCiAgICAgICAgQ2hhbmdlSUQgICAgICAgICAgPT4gJFBhcmFte1NlbGVjdG9yfSwKICAgICAgICAkUGFyYW17QXR0cmlidXRlfSA9PiAkUGFyYW17QWN0aW9uVmFsdWV9LAogICAgICAgIFVzZXJJRCAgICAgICAgICAgID0+ICRQYXJhbXtVc2VySUR9LAogICAgKTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KCj1jdXQKCj1oZWFkMSBWRVJTSU9OCgokUmV2aXNpb246IDEuNCAkICREYXRlOiAyMDEwLzAxLzMwIDIwOjEyOjQ0ICQKCj1jdXQK</File>
        <File Location="Kernel/System/ITSMChange/ITSMCondition/Operator/ITSMWorkOrder.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9JVFNNQ29uZGl0aW9uL09wZXJhdG9yL0lUU01Xb3JrT3JkZXIucG0gLSBhbGwgaXRzbSB3b3Jrb3JkZXIgb3BlcmF0b3IgZnVuY3Rpb25zCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBJVFNNV29ya09yZGVyLnBtLHYgMS42IDIwMTAvMDQvMjcgMjA6NTE6MTQgdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Db25kaXRpb246Ok9wZXJhdG9yOjpJVFNNV29ya09yZGVyOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS42ICQpIFsxXTsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTUNvbmRpdGlvbjo6T3BlcmF0b3I6OklUU01Xb3JrT3JkZXIgLSBjb25kaXRpb24gaXRzbSB3b3Jrb3JkZXIgb3BlcmF0b3IgbGliCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCBJVFNNV29ya09yZGVyIG9wZXJhdG9yIGZ1bmN0aW9ucyBmb3IgY29uZGl0aW9ucyBpbiBJVFNNQ2hhbmdlTWFuYWdlbWVudC4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkRCOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpNYWluOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpUaW1lOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNQ29uZGl0aW9uOjpPcGVyYXRvcjo6SVRTTVdvcmtPcmRlcjsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkVGltZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpUaW1lLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJERCT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkRCLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIG15ICRDb25kaXRpb25PcGVyYXRvcklUU01Xb3JrT3JkZXIgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTUNvbmRpdGlvbjo6T3BlcmF0b3I6OklUU01Xb3JrT3JkZXItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgID0+ICRUaW1lT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAocXcoREJPYmplY3QgQ29uZmlnT2JqZWN0IEVuY29kZU9iamVjdCBMb2dPYmplY3QgTWFpbk9iamVjdCBUaW1lT2JqZWN0KSkgewogICAgICAgICRTZWxmLT57JE9iamVjdH0gPSAkUGFyYW17JE9iamVjdH0gfHwgZGllICJHb3Qgbm8gJE9iamVjdCEiOwogICAgfQoKICAgICMgY3JlYXRlIGFkZGl0aW9uYWwgb2JqZWN0cwogICAgJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXItPm5ldyggJXskU2VsZn0gKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFNldCgpCgpVcGRhdGVzIGEgd29ya29yZGVyIHdpdGggdGhlIGdpdmVuIGRhdGEuCgogICAgbXkgJFN1Y2Nlc3MgPSAkSVRTTVdvcmtPcmRlck9wZXJhdG9yLT5TZXQoCiAgICAgICAgU2VsZWN0b3IgICAgPT4gMTIzNCwKICAgICAgICBBdHRyaWJ1dGUgICA9PiAnV29ya09yZGVyU3RhdGVJRCcsCiAgICAgICAgQWN0aW9uVmFsdWUgPT4gMjM0NSwKICAgICAgICBVc2VySUQgICAgICA9PiAxMjM0LAogICAgKTsKCj1jdXQKCnN1YiBTZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoU2VsZWN0b3IgQXR0cmlidXRlIEFjdGlvblZhbHVlIFVzZXJJRCkpIHsKICAgICAgICBpZiAoICFleGlzdHMgJFBhcmFteyRBcmd1bWVudH0gfHwgIWRlZmluZWQgJFBhcmFteyRBcmd1bWVudH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBcmd1bWVudCEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgICMgZ2V0IHdvcmtvcmRlcgogICAgbXkgJFdvcmtPcmRlciA9ICRTZWxmLT57V29ya09yZGVyT2JqZWN0fS0+V29ya09yZGVyR2V0KAogICAgICAgIFdvcmtPcmRlcklEID0+ICRQYXJhbXtTZWxlY3Rvcn0sCiAgICAgICAgVXNlcklEICAgICAgPT4gJFBhcmFte1VzZXJJRH0sCiAgICApOwoKICAgICMgY2hlY2sgZXJyb3IKICAgIHJldHVybiBpZiAhJFdvcmtPcmRlcjsKICAgIHJldHVybiBpZiByZWYgJFdvcmtPcmRlciBuZSAnSEFTSCc7CgogICAgIyBzZXQgd29ya29yZGVyIGF0dHJpYnV0ZSB0byBlbXB0eSBzdHJpbmcgaWYgaXQgaXMgbm90IHRydWUKICAgICRXb3JrT3JkZXItPnsgJFBhcmFte0F0dHJpYnV0ZX0gfSB8fD0gJyc7CgogICAgIyBkbyBub3QgdXBkYXRlIHRoZSBhdHRyaWJ1dGUgaWYgaXQgYWxyZWFkeSBoYXMgdGhpcyB2YWx1ZQogICAgIyAoIHRoaXMgd2lsbCBwcmV2ZW50IGluZmluaXRlIGV2ZW50IGxvb3BpbmchICkKICAgIHJldHVybiAxIGlmICRXb3JrT3JkZXItPnsgJFBhcmFte0F0dHJpYnV0ZX0gfSBlcSAkUGFyYW17QWN0aW9uVmFsdWV9OwoKICAgICMgdXBkYXRlIHdvcmtvcmRlciBhbmQgcmV0dXJuIHVwZGF0ZSByZXN1bHQKICAgIHJldHVybiAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0tPldvcmtPcmRlclVwZGF0ZSgKICAgICAgICBXb3JrT3JkZXJJRCAgICAgICA9PiAkUGFyYW17U2VsZWN0b3J9LAogICAgICAgICRQYXJhbXtBdHRyaWJ1dGV9ID0+ICRQYXJhbXtBY3Rpb25WYWx1ZX0sCiAgICAgICAgVXNlcklEICAgICAgICAgICAgPT4gJFBhcmFte1VzZXJJRH0sCiAgICApOwp9Cgo9aXRlbSBTZXRBbGwoKQoKVXBkYXRlcyBhIHNldCBvZiB3b3Jrb3JkZXJzIHdpdGggdGhlIGdpdmVuIGRhdGEuCgogICAgbXkgJFN1Y2Nlc3MgPSAkSVRTTVdvcmtPcmRlck9wZXJhdG9yLT5TZXRBbGwoCiAgICAgICAgT2JqZWN0cyAgICAgPT4gWyB7Li4ufSwgey4uLn0sIF0sICAjIGRhdGEgb2YgSVRTTVdvcmtPcmRlcnMKICAgICAgICBBdHRyaWJ1dGUgICA9PiAnV29ya09yZGVyU3RhdGVJRCcsCiAgICAgICAgQWN0aW9uVmFsdWUgPT4gMjM0NSwKICAgICAgICBVc2VySUQgICAgICA9PiAxMjM0LAogICAgKTsKCj1jdXQKCnN1YiBTZXRBbGwgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoT2JqZWN0cyBBdHRyaWJ1dGUgQWN0aW9uVmFsdWUgVXNlcklEKSkgewogICAgICAgIGlmICggIWV4aXN0cyAkUGFyYW17JEFyZ3VtZW50fSB8fCAhZGVmaW5lZCAkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBjaGVjayBvYmplY3RzCiAgICByZXR1cm4gaWYgcmVmICRQYXJhbXtPYmplY3RzfSBuZSAnQVJSQVknOwoKICAgICMgdXBkYXRlIGVhY2ggd29ya29yZGVyIG9iamVjdAogICAgV09SS09SREVST0JKRUNUOgogICAgZm9yIG15ICRXb3JrT3JkZXJPYmplY3QgKCBAeyAkUGFyYW17T2JqZWN0c30gfSApIHsKCiAgICAgICAgIyBjaGVjayB3b3Jrb3JkZXIgb2JqZWN0CiAgICAgICAgbmV4dCBXT1JLT1JERVJPQkpFQ1QgaWYgISRXb3JrT3JkZXJPYmplY3Q7CiAgICAgICAgbmV4dCBXT1JLT1JERVJPQkpFQ1QgaWYgcmVmICRXb3JrT3JkZXJPYmplY3QgbmUgJ0hBU0gnOwoKICAgICAgICAjIHVwZGF0ZSB3b3Jrb3JkZXIgb2JqZWN0CiAgICAgICAgJFNlbGYtPlNldCgKICAgICAgICAgICAgU2VsZWN0b3IgICAgPT4gJFdvcmtPcmRlck9iamVjdC0+e1dvcmtPcmRlcklEfSwKICAgICAgICAgICAgQXR0cmlidXRlICAgPT4gJFBhcmFte0F0dHJpYnV0ZX0sCiAgICAgICAgICAgIEFjdGlvblZhbHVlID0+ICRQYXJhbXtBY3Rpb25WYWx1ZX0sCiAgICAgICAgICAgIFVzZXJJRCAgICAgID0+ICRQYXJhbXtVc2VySUR9LAogICAgICAgICk7CgogICAgICAgICMgVE9ETzogQWRkIGVycm9yIGhhbmRsaW5nIGhlcmUKICAgICAgICAjIGdldCB0aGUgcmVzdWx0cyBvZiB0aGUgU2V0IGZ1bmN0aW9uIGNhbGxzCiAgICB9CgogICAgcmV0dXJuIDE7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCgo9Y3V0Cgo9aGVhZDEgVkVSU0lPTgoKJFJldmlzaW9uOiAxLjYgJCAkRGF0ZTogMjAxMC8wNC8yNyAyMDo1MToxNCAkCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/ITSMChange/ITSMWorkOrder/Event/WorkOrderActualTimesSet.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMWorkOrder/Event/WorkOrderNumberCalc.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMWorkOrder/Permission/CABCheck.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9JVFNNV29ya09yZGVyL1Blcm1pc3Npb24vQ0FCQ2hlY2sucG0gLSBDQUIgYmFzZWQgcGVybWlzc2lvbiBjaGVjawojIENvcHlyaWdodCAoQykgMjAwMy0yMDA5IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQ0FCQ2hlY2sucG0sdiAxLjggMjAwOS8xMS8xOSAxMzo0ODowNiBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI6OlBlcm1pc3Npb246OkNBQkNoZWNrOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS44ICQpIFsxXTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjo6UGVybWlzc2lvbjo6Q0FCQ2hlY2sgLSBDQUIgYmFzZWQgcGVybWlzc2lvbiBjaGVjawoKPWhlYWQxIFNZTk9QU0lTCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICB1c2UgS2VybmVsOjpDb25maWc7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkVuY29kZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TG9nOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpNYWluOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpUaW1lOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpEQjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6VXNlcjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6R3JvdXA7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI6OlBlcm1pc3Npb246OkNBQkNoZWNrOwoKICAgIG15ICRDb25maWdPYmplY3QgPSBLZXJuZWw6OkNvbmZpZy0+bmV3KCk7CiAgICBteSAkRW5jb2RlT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkVuY29kZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgKTsKICAgIG15ICRMb2dPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TG9nLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICApOwogICAgbXkgJE1haW5PYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TWFpbi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICRUaW1lT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OlRpbWUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkREJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6REItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwogICAgbXkgJFVzZXJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6VXNlci0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgPT4gJFRpbWVPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgID0+ICREQk9iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICk7CiAgICBteSAkR3JvdXBPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6R3JvdXAtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgKTsKICAgIG15ICRXb3JrT3JkZXJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlci0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgID0+ICRUaW1lT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7CiAgICBteSAkQ2hlY2tPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjo6UGVybWlzc2lvbjo6Q0FCQ2hlY2stPm5ldygKICAgICAgICBDb25maWdPYmplY3QgICAgICAgICA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCAgICAgICAgID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgICAgICAgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgICAgICAgICA9PiAkTWFpbk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgICAgICAgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgICAgICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVXNlck9iamVjdCAgICAgICAgICAgPT4gJFVzZXJPYmplY3QsCiAgICAgICAgR3JvdXBPYmplY3QgICAgICAgICAgPT4gJEdyb3VwT2JqZWN0LAogICAgICAgIFdvcmtPcmRlck9iamVjdCAgICAgID0+ICRXb3JrT3JkZXJPYmplY3QsCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgVGltZU9iamVjdCBEQk9iamVjdCBVc2VyT2JqZWN0IEdyb3VwT2JqZWN0IFdvcmtPcmRlck9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZS0+bmV3KCAleyRTZWxmfSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gUnVuKCkKClRoaXMgbWV0aG9kIGRvZXMgdGhlIGNoZWNrLiBBY2Nlc3MgaXMgYWxsb3dlZCB3aGVuIHR5cGUgaXMgJ3JvJyBhbmQgdGhlIGFnZW50IGlzIGEgbWVtYmVyCm9mIHRoZSBDQUIgb2YgdGhlIGNoYW5nZSBvZiB0aGUgd29ya29yZGVyLgoKICAgIG15ICRIYXNBY2Nlc3MgPSAkQ2hlY2tPYmplY3QtPlJ1bigKICAgICAgICBVc2VySUQgICAgICA9PiAxMjMsCiAgICAgICAgVHlwZSAgICAgICAgPT4gJ3J3JywgICAgICMgJ3JvJyBvciAncncnCiAgICAgICAgV29ya09yZGVySUQgPT4gNDQ0NCwKICAgICk7Cgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KFVzZXJJRCBUeXBlIFdvcmtPcmRlcklEKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBvbmx5ICdybycgYWNjZXNzIG1pZ2h0IGJlIGdyYW50ZWQgYnkgdGhpcyBtb2R1bGUKICAgIHJldHVybiBpZiAkUGFyYW17VHlwZX0gbmUgJ3JvJzsKCiAgICAjIHRoZXJlIGFscmVhZHkgaXMgYSB3b3Jrb3JkZXIKICAgIG15ICRXb3JrT3JkZXIgPSAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0tPldvcmtPcmRlckdldCgKICAgICAgICBVc2VySUQgICAgICA9PiAkUGFyYW17VXNlcklEfSwKICAgICAgICBXb3JrT3JkZXJJRCA9PiAkUGFyYW17V29ya09yZGVySUR9LAogICAgKTsKCiAgICAjIGRlbnkgYWNjZXNzLCB3aGVuIG5vIHdvcmtvcmRlciB3YXMgZm91bmQKICAgIHJldHVybiBpZiAhJFdvcmtPcmRlciB8fCAhJXskV29ya09yZGVyfSB8fCAhJFdvcmtPcmRlci0+e0NoYW5nZUlEfTsKCiAgICAjIGdldCB0aGUgQ0FCIG9mIHRoZSBjaGFuZ2UKICAgIG15ICRDQUIgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUNBQkdldCgKICAgICAgICBVc2VySUQgICA9PiAkUGFyYW17VXNlcklEfSwKICAgICAgICBDaGFuZ2VJRCA9PiAkV29ya09yZGVyLT57Q2hhbmdlSUR9LAogICAgKTsKCiAgICAjIGxvb2sgZm9yIGEgQ0FCIG1lbWJlciB3aXRoIHRoZSByZWxldmFudCBVc2VySUQKICAgIG15ICgkRm91bmRDQUJNZW1iZXIpID0gZ3JlcCB7ICRfID09ICRQYXJhbXtVc2VySUR9IH0gQHsgJENBQi0+e0NBQkFnZW50c30gfTsKCiAgICAjIGFsbG93IGFjY2VzcyB0aGUgdGhlIGFnZW50IGlzIGEgQ0FCIG1lbWJlcgogICAgcmV0dXJuIDEgaWYgJEZvdW5kQ0FCTWVtYmVyOwoKICAgICMgZGVueSBhY2Nlc3Mgb3RoZXJ3aXNlCiAgICByZXR1cm47Cn0KCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KCj1oZWFkMSBWRVJTSU9OCgokSWQ6IENBQkNoZWNrLnBtLHYgMS44IDIwMDkvMTEvMTkgMTM6NDg6MDYgYmVzIEV4cCAkCgo9Y3V0CgoxOwo=</File>
        <File Location="Kernel/System/ITSMChange/ITSMWorkOrder/Permission/ChangeBuilderCheck.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9JVFNNV29ya09yZGVyL1Blcm1pc3Npb24vQ2hhbmdlQnVpbGRlckNoZWNrLnBtIC0gY2hhbmdlIGJ1aWxkZXIgYmFzZWQgcGVybWlzc2lvbiBjaGVjawojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQ2hhbmdlQnVpbGRlckNoZWNrLnBtLHYgMS4xNCAyMDEwLzAxLzMwIDExOjIzOjMxIGJlcyBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjo6UGVybWlzc2lvbjo6Q2hhbmdlQnVpbGRlckNoZWNrOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xNCAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI6OlBlcm1pc3Npb246OkNoYW5nZUJ1aWxkZXJDaGVjayAtIGNoYW5nZSBidWlsZGVyIGJhc2VkIHBlcm1pc3Npb24gY2hlY2sKCj1oZWFkMSBTWU5PUFNJUwoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgYW4gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6Q29uZmlnOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpFbmNvZGU7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkxvZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TWFpbjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6VGltZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6REI7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OlVzZXI7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Okdyb3VwOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyOjpQZXJtaXNzaW9uOjpDaGFuZ2VCdWlsZGVyQ2hlY2s7CgogICAgbXkgJENvbmZpZ09iamVjdCA9IEtlcm5lbDo6Q29uZmlnLT5uZXcoKTsKICAgIG15ICRFbmNvZGVPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICApOwogICAgbXkgJExvZ09iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpMb2ctPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICk7CiAgICBteSAkTWFpbk9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpNYWluLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJFRpbWVPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6VGltZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICREQk9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpEQi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7CiAgICBteSAkVXNlck9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpVc2VyLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgICAgIFRpbWVPYmplY3QgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRHcm91cE9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpHcm91cC0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICApOwogICAgbXkgJFdvcmtPcmRlck9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgID0+ICREQk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgPT4gJFRpbWVPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIG15ICRDaGVja09iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyOjpQZXJtaXNzaW9uOjpDaGFuZ2VCdWlsZGVyQ2hlY2stPm5ldygKICAgICAgICBDb25maWdPYmplY3QgICAgICAgICA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCAgICAgICAgID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgICAgICAgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgICAgICAgICA9PiAkTWFpbk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgICAgICAgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgICAgICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVXNlck9iamVjdCAgICAgICAgICAgPT4gJFVzZXJPYmplY3QsCiAgICAgICAgR3JvdXBPYmplY3QgICAgICAgICAgPT4gJEdyb3VwT2JqZWN0LAogICAgICAgIFdvcmtPcmRlck9iamVjdCAgICAgID0+ICRXb3JrT3JkZXJPYmplY3QsCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgVGltZU9iamVjdCBEQk9iamVjdCBVc2VyT2JqZWN0IEdyb3VwT2JqZWN0IFdvcmtPcmRlck9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZS0+bmV3KCAleyRTZWxmfSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gUnVuKCkKClRoaXMgbWV0aG9kIGRvZXMgdGhlIGNoZWNrLiAncm8nIGFuZCAncncnIGFjY2VzcyBpcyBncmFudGVkCndoZW4gdGhlIGFnZW50IGhhcyB0aGUgcHJpdiBpbiB0aGUgJ2l0c20tY2hhbmdlLWJ1aWxkZXInIGdyb3VwIGFuZAp3aGVuIHRoZSBhZ2VudCBpcyB0aGUgY2hhbmdlYnVpbGRlciBvZiB0aGUgY2hhbmdlLgoKICAgIG15ICRIYXNBY2Nlc3MgPSAkQ2hlY2tPYmplY3QtPlJ1bigKICAgICAgICBVc2VySUQgICAgICA9PiAxMjMsCiAgICAgICAgVHlwZSAgICAgICAgPT4gJ3J3JywgICAgICMgJ3JvJyBvciAncncnCiAgICAgICAgV29ya09yZGVySUQgPT4gNDQ0NCwKICAgICk7Cgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KFVzZXJJRCBUeXBlIFdvcmtPcmRlcklEKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyB0aGUgY2hlY2sgaXMgYmFzZWQgdXBvbiB0aGUgY2hhbmdlIGJ1aWxkZXIKICAgIG15ICRHcm91cElEID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTG9va3VwKCBHcm91cCA9PiAnaXRzbS1jaGFuZ2UtYnVpbGRlcicgKTsKCiAgICAjIGRlbnkgYWNjZXNzLCB3aGVuIHRoZSBncm91cCBpcyBub3QgZm91bmQKICAgIHJldHVybiBpZiAhJEdyb3VwSUQ7CgogICAgIyBDYWNoaW5nIGlzIHR1cm5lZCBvbiBieSBkZWZhdWx0LgogICAgbXkgJENhY2hlZCA9IGRlZmluZWQgJFBhcmFte0NhY2hlZH0gPyAkUGFyYW17Q2FjaGVkfSA6IDE7CgogICAgIyBnZXQgdXNlciBncm91cHMsIHdoZXJlIHRoZSB1c2VyIGhhcyB0aGUgYXBwcm9wcmlhdGUgcHJpdmlsZWdlCiAgICBteSAlR3JvdXBzID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0sCiAgICAgICAgVHlwZSAgID0+ICRQYXJhbXtUeXBlfSwKICAgICAgICBSZXN1bHQgPT4gJ0hBU0gnLAogICAgICAgIENhY2hlZCA9PiAkQ2FjaGVkLAogICAgKTsKCiAgICAjIGRlbnkgYWNjZXNzIGlmIHRoZSBhZ2VudCBkb2Vzbid0IGhhdmUgdGhlIGFwcHJvcHJpYXRlIHR5cGUgaW4gdGhlIGFwcHJvcHJpYXRlIGdyb3VwCiAgICByZXR1cm4gaWYgISRHcm91cHN7JEdyb3VwSUR9OwoKICAgICMgdGhlcmUgYWxyZWFkeSBpcyBhIHdvcmtvcmRlci4gZS5nLiBBZ2VudElUU01Xb3JrT3JkZXJFZGl0CiAgICBteSAkV29ya09yZGVyID0gJFNlbGYtPntXb3JrT3JkZXJPYmplY3R9LT5Xb3JrT3JkZXJHZXQoCiAgICAgICAgVXNlcklEICAgICAgPT4gJFBhcmFte1VzZXJJRH0sCiAgICAgICAgV29ya09yZGVySUQgPT4gJFBhcmFte1dvcmtPcmRlcklEfSwKICAgICk7CgogICAgIyBkZW55IGFjY2Vzcywgd2hlbiBubyB3b3Jrb3JkZXIgd2FzIGZvdW5kCiAgICByZXR1cm4gaWYgISRXb3JrT3JkZXIgfHwgISV7JFdvcmtPcmRlcn0gfHwgISRXb3JrT3JkZXItPntDaGFuZ2VJRH07CgogICAgIyBmb3IgY2hlY2tpbmcgdGhlIGNoYW5nZSBidWlsZGVyLCB3ZSBuZWVkIGluZm9ybWF0aW9uIG9uIHRoZSBjaGFuZ2UKICAgIG15ICRDaGFuZ2UgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUdldCgKICAgICAgICBVc2VySUQgICA9PiAkUGFyYW17VXNlcklEfSwKICAgICAgICBDaGFuZ2VJRCA9PiAkV29ya09yZGVyLT57Q2hhbmdlSUR9LAogICAgKTsKCiAgICAjIGRlbnkgYWNjZXNzLCB3aGVuIG5vIGNoYW5nZSB3YXMgZm91bmQKICAgIHJldHVybiBpZiAhJENoYW5nZSB8fCAhJXskQ2hhbmdlfSB8fCAhJENoYW5nZS0+e0NoYW5nZUJ1aWxkZXJJRH07CgogICAgIyBhbGxvdyBhY2Nlc3MsIHdoZW4gdGhlIGFnZW50IGlzIHRoZSBjaGFuZ2UgYnVpbGRlciBvZiB0aGUgY2hhbmdlCiAgICByZXR1cm4gMSBpZiAkQ2hhbmdlLT57Q2hhbmdlQnVpbGRlcklEfSA9PSAkUGFyYW17VXNlcklEfTsKCiAgICAjIGRlbnkgYWNjZXNzIG90aGVyd2lzZQogICAgcmV0dXJuOwp9Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCgo9aGVhZDEgVkVSU0lPTgoKJElkOiBDaGFuZ2VCdWlsZGVyQ2hlY2sucG0sdiAxLjE0IDIwMTAvMDEvMzAgMTE6MjM6MzEgYmVzIEV4cCAkCgo9Y3V0CgoxOwo=</File>
        <File Location="Kernel/System/ITSMChange/ITSMWorkOrder/Permission/ChangeManagerCheck.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9JVFNNV29ya09yZGVyL1Blcm1pc3Npb24vQ2hhbmdlTWFuYWdlckNoZWNrLnBtIC0gY2hhbmdlIG1hbmFnZXIgYmFzZWQgcGVybWlzc2lvbiBjaGVjawojIENvcHlyaWdodCAoQykgMjAwMy0yMDA5IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQ2hhbmdlTWFuYWdlckNoZWNrLnBtLHYgMS4xMiAyMDA5LzExLzE5IDEzOjQ4OjA2IGJlcyBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjo6UGVybWlzc2lvbjo6Q2hhbmdlTWFuYWdlckNoZWNrOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xMiAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI6OlBlcm1pc3Npb246OkNoYW5nZU1hbmFnZXJDaGVjayAtIGNoYW5nZSBtYW5hZ2VyIGJhc2VkIHBlcm1pc3Npb24gY2hlY2sKCj1oZWFkMSBTWU5PUFNJUwoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgYW4gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6Q29uZmlnOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpFbmNvZGU7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkxvZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TWFpbjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6VGltZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6REI7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OlVzZXI7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Okdyb3VwOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyOjpQZXJtaXNzaW9uOjpDaGFuZ2VNYW5hZ2VyQ2hlY2s7CgogICAgbXkgJENvbmZpZ09iamVjdCA9IEtlcm5lbDo6Q29uZmlnLT5uZXcoKTsKICAgIG15ICRFbmNvZGVPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICApOwogICAgbXkgJExvZ09iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpMb2ctPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICk7CiAgICBteSAkTWFpbk9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpNYWluLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJFRpbWVPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6VGltZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICREQk9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpEQi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7CiAgICBteSAkVXNlck9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpVc2VyLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgICAgIFRpbWVPYmplY3QgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRHcm91cE9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpHcm91cC0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICApOwogICAgbXkgJFdvcmtPcmRlck9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgID0+ICREQk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgPT4gJFRpbWVPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIG15ICRDaGVja09iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpJVFNNV29ya09yZGVyOjpQZXJtaXNzaW9uOjpDaGFuZ2VNYW5hZ2VyQ2hlY2stPm5ldygKICAgICAgICBDb25maWdPYmplY3QgICAgICAgICA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCAgICAgICAgID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgICAgICAgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgICAgICAgICA9PiAkTWFpbk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgICAgICAgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgICAgICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVXNlck9iamVjdCAgICAgICAgICAgPT4gJFVzZXJPYmplY3QsCiAgICAgICAgR3JvdXBPYmplY3QgICAgICAgICAgPT4gJEdyb3VwT2JqZWN0LAogICAgICAgIFdvcmtPcmRlck9iamVjdCAgICAgID0+ICRXb3JrT3JkZXJPYmplY3QsCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgVGltZU9iamVjdCBEQk9iamVjdCBVc2VyT2JqZWN0IEdyb3VwT2JqZWN0IFdvcmtPcmRlck9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKVGhpcyBtZXRob2QgZG9lcyB0aGUgY2hlY2suICdybycgYW5kICdydycgYWNjZXNzIGlzIGdyYW50ZWQKd2hlbiB0aGUgYWdlbnQgaGFzIHRoZSBwcml2IGluIHRoZSAnaXRzbS1jaGFuZ2UtbWFuYWdlcicgZ3JvdXAuCgogICAgbXkgJEhhc0FjY2VzcyA9ICRDaGVja09iamVjdC0+UnVuKAogICAgICAgIFVzZXJJRCAgICAgID0+IDEyMywKICAgICAgICBUeXBlICAgICAgICA9PiAncncnLCAgICAgIyAncm8nIG9yICdydycKICAgICAgICBXb3JrT3JkZXJJRCA9PiA0NDQ0LAogICAgKTsKCj1jdXQKCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoVXNlcklEIFR5cGUgV29ya09yZGVySUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRBcmd1bWVudH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBcmd1bWVudCEiLAogICAgICAgICAgICApOwoKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIHRoZSBjaGVjayBpcyBiYXNlZCB1cG9uIHRoZSBjaGFuZ2UgbWFuYWdlcgogICAgbXkgJEdyb3VwSUQgPSAkU2VsZi0+e0dyb3VwT2JqZWN0fS0+R3JvdXBMb29rdXAoIEdyb3VwID0+ICdpdHNtLWNoYW5nZS1tYW5hZ2VyJyApOwoKICAgICMgZGVueSBhY2Nlc3MsIHdoZW4gdGhlIGdyb3VwIGlzIG5vdCBmb3VuZAogICAgcmV0dXJuIGlmICEkR3JvdXBJRDsKCiAgICAjIENhY2hpbmcgaXMgdHVybmVkIG9uIGJ5IGRlZmF1bHQuCiAgICBteSAkQ2FjaGVkID0gZGVmaW5lZCAkUGFyYW17Q2FjaGVkfSA/ICRQYXJhbXtDYWNoZWR9IDogMTsKCiAgICAjIGdldCB1c2VyIGdyb3Vwcywgd2hlcmUgdGhlIHVzZXIgaGFzIHRoZSBhcHByb3ByaWF0ZSBwcml2aWxlZ2UKICAgIG15ICVHcm91cHMgPSAkU2VsZi0+e0dyb3VwT2JqZWN0fS0+R3JvdXBNZW1iZXJMaXN0KAogICAgICAgIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfSwKICAgICAgICBUeXBlICAgPT4gJFBhcmFte1R5cGV9LAogICAgICAgIFJlc3VsdCA9PiAnSEFTSCcsCiAgICAgICAgQ2FjaGVkID0+ICRDYWNoZWQsCiAgICApOwoKICAgICMgYWxsb3cgcm8gYW5kIHJ3IGFjY2VzcyBpZiB0aGUgYWdlbnQgaXMgYSBjaGFuZ2UgbWFuYWdlcgogICAgcmV0dXJuIDEgaWYgJEdyb3Vwc3skR3JvdXBJRH07CgogICAgIyBubyBuZWVkIHRvIGNoZWNrIHdoZXRoZXIgdGhlIGFnZW50IGlzIHRoZSBhY3R1YWwgbWFuYWdlciBvZiB0aGUgY2hhbmdlIG9mIHRoZSB3b3Jrb3JkZXIKCiAgICAjIGRlbnkgYWNjZXNzIG90aGVyd2lzZQogICAgcmV0dXJuOwp9Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCgo9aGVhZDEgVkVSU0lPTgoKJElkOiBDaGFuZ2VNYW5hZ2VyQ2hlY2sucG0sdiAxLjEyIDIwMDkvMTEvMTkgMTM6NDg6MDYgYmVzIEV4cCAkCgo9Y3V0CgoxOwo=</File>
        <File Location="Kernel/System/ITSMChange/ITSMWorkOrder/Permission/EmptyAgentCheck.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/ITSMWorkOrder/Permission/ListAgentCheck.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9JVFNNV29ya09yZGVyL1Blcm1pc3Npb24vTGlzdEFnZW50Q2hlY2sucG0gLSBncmFudCBwZXJtaXNzaW9uIHdoZW4gdGhlIGFnZW50IGlzIGluIGEgbGlzdAojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogTGlzdEFnZW50Q2hlY2sucG0sdiAxLjMgMjAxMC8wMi8wMSAwOToyNzowNiBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI6OlBlcm1pc3Npb246Okxpc3RBZ2VudENoZWNrOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4zICQpIFsxXTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjo6UGVybWlzc2lvbjo6TGlzdEFnZW50Q2hlY2sgLSBncmFudCBwZXJtaXNzaW9uIHdoZW4gdGhlIGFnZW50IGlzIGluIGEgbGlzdAoKPWhlYWQxIFNZTk9QU0lTCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICB1c2UgS2VybmVsOjpDb25maWc7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkVuY29kZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TG9nOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpNYWluOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpUaW1lOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpEQjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6VXNlcjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6R3JvdXA7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OklUU01Xb3JrT3JkZXI6OlBlcm1pc3Npb246Okxpc3RBZ2VudENoZWNrOwoKICAgIG15ICRDb25maWdPYmplY3QgPSBLZXJuZWw6OkNvbmZpZy0+bmV3KCk7CiAgICBteSAkRW5jb2RlT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkVuY29kZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgKTsKICAgIG15ICRMb2dPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TG9nLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICApOwogICAgbXkgJE1haW5PYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TWFpbi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICRUaW1lT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OlRpbWUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkREJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6REItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwogICAgbXkgJFVzZXJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6VXNlci0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgPT4gJFRpbWVPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgID0+ICREQk9iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICk7CiAgICBteSAkR3JvdXBPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6R3JvdXAtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgKTsKICAgIG15ICRXb3JrT3JkZXJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlci0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgID0+ICRUaW1lT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7CiAgICBteSAkQ2hlY2tPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SVRTTVdvcmtPcmRlcjo6UGVybWlzc2lvbjo6TGlzdEFnZW50Q2hlY2stPm5ldygKICAgICAgICBDb25maWdPYmplY3QgICAgICAgICA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCAgICAgICAgID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgICAgICAgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgICAgICAgICA9PiAkTWFpbk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgICAgICAgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgICAgICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVXNlck9iamVjdCAgICAgICAgICAgPT4gJFVzZXJPYmplY3QsCiAgICAgICAgR3JvdXBPYmplY3QgICAgICAgICAgPT4gJEdyb3VwT2JqZWN0LAogICAgICAgIFdvcmtPcmRlck9iamVjdCAgICAgID0+ICRXb3JrT3JkZXJPYmplY3QsCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgVGltZU9iamVjdCBEQk9iamVjdCBVc2VyT2JqZWN0IEdyb3VwT2JqZWN0IFdvcmtPcmRlck9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKVGhpcyBtZXRob2QgZG9lcyB0aGUgY2hlY2suICdybycgYWNjZXNzIGlzIGdyYW50ZWQgd2hlbiB0aGUgYWdlbnQgaXMgYSAncm8nIG1lbWJlcgpvZiB0aGUgJ2l0c20tY2hhbmdlJyBncm91cC4gJ3J3JyBhY2Nlc3MgaXMgZ3JhbnRlZCB3aGVuIHRoZSBjdXJyZW50IHdvcmtvcmRlciBhZ2VudAppcyBjb250YWluZWQgaW4gdGhlIGNvbmZpZ3VyZWQgbGlzdC4KCiAgICBteSAkSGFzQWNjZXNzID0gJENoZWNrT2JqZWN0LT5SdW4oCiAgICAgICAgVXNlcklEICAgICAgPT4gMTIzLAogICAgICAgIFR5cGUgICAgICAgID0+ICdydycsICAgICAjICdybycgb3IgJ3J3JwogICAgICAgIFdvcmtPcmRlcklEID0+IDQ0NDQsCiAgICApOwoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhVc2VySUQgVHlwZSBXb3JrT3JkZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyB0aGUgY2hlY2sgaXMgYmFzZWQgdXBvbiB0aGUgd29ya29yZGVyIGFnZW50CiAgICBteSAkR3JvdXBJRCA9ICRTZWxmLT57R3JvdXBPYmplY3R9LT5Hcm91cExvb2t1cCggR3JvdXAgPT4gJ2l0c20tY2hhbmdlJyApOwoKICAgICMgZGVueSBhY2Nlc3MsIHdoZW4gdGhlIGdyb3VwIGlzIG5vdCBmb3VuZAogICAgcmV0dXJuIGlmICEkR3JvdXBJRDsKCiAgICAjIENhY2hpbmcgaXMgdHVybmVkIG9uIGJ5IGRlZmF1bHQuCiAgICBteSAkQ2FjaGVkID0gZGVmaW5lZCAkUGFyYW17Q2FjaGVkfSA/ICRQYXJhbXtDYWNoZWR9IDogMTsKCiAgICAjIGdldCB1c2VyIGdyb3Vwcywgd2hlcmUgdGhlIHVzZXIgaGFzIHRoZSBhcHByb3ByaWF0ZSBwcml2aWxlZ2UKICAgIG15ICVHcm91cHMgPSAkU2VsZi0+e0dyb3VwT2JqZWN0fS0+R3JvdXBNZW1iZXJMaXN0KAogICAgICAgIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfSwKICAgICAgICBUeXBlICAgPT4gJFBhcmFte1R5cGV9LAogICAgICAgIFJlc3VsdCA9PiAnSEFTSCcsCiAgICAgICAgQ2FjaGVkID0+ICRDYWNoZWQsCiAgICApOwoKICAgICMgZGVueSBhY2Nlc3MgaWYgdGhlIGFnZW50IGRvZXNuJ3QgaGF2ZSB0aGUgYXBwcm9wcmlhdGUgdHlwZSBpbiB0aGUgYXBwcm9wcmlhdGUgZ3JvdXAKICAgIHJldHVybiBpZiAhJEdyb3Vwc3skR3JvdXBJRH07CgogICAgIyB3b3Jrb3JkZXIgYWdlbnRzIGFyZSBncmFudGVkIHJvIGFjY2VzcwogICAgcmV0dXJuIDEgaWYgJFBhcmFte1R5cGV9IGVxICdybyc7CgogICAgIyB0aGVyZSBhbHJlYWR5IGlzIGEgd29ya29yZGVyLiBlLmcuIEFnZW50SVRTTVdvcmtPcmRlckVkaXQKICAgIG15ICRXb3JrT3JkZXIgPSAkU2VsZi0+e1dvcmtPcmRlck9iamVjdH0tPldvcmtPcmRlckdldCgKICAgICAgICBVc2VySUQgICAgICA9PiAkUGFyYW17VXNlcklEfSwKICAgICAgICBXb3JrT3JkZXJJRCA9PiAkUGFyYW17V29ya09yZGVySUR9LAogICAgKTsKCiAgICAjIGRlbnkgYWNjZXNzLCB3aGVuIG5vIHdvcmtvcmRlciB3YXMgZm91bmQKICAgIHJldHVybiBpZiAhJFdvcmtPcmRlciB8fCAhJXskV29ya09yZGVyfTsKCiAgICAjIGRlbnkgYWNjZXNzLCB3aGVuIHdvcmtvcmRlciBhZ2VudCBpcyBlbXB0eQogICAgcmV0dXJuIGlmICEkV29ya09yZGVyLT57V29ya09yZGVyQWdlbnRJRH07CgogICAgbXkgJFdvcmtPcmRlckFnZW50ID0gJFNlbGYtPntVc2VyT2JqZWN0fS0+VXNlckxvb2t1cCgKICAgICAgICBVc2VySUQgPT4gJFdvcmtPcmRlci0+e1dvcmtPcmRlckFnZW50SUR9LAogICAgKTsKCiAgICAjIGRlbnkgYWNjZXNzLCB3aGVuIHRoZSBuYW1lIGNhbiBub3QgYmUgbG9va2VkIHVwCiAgICByZXR1cm4gaWYgISRXb3JrT3JkZXJBZ2VudDsKCiAgICAjIHRha2UgbGlzdCBvZiBzcGVjaWFsIGFnZW50cyBmcm9tIHRoZSBzeXNjb25maWcKICAgIG15ICRBZ2VudExpc3QgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnSVRTTVdvcmtPcmRlcjo6VGFrZVBlcm1pc3Npb246Okxpc3QnKTsKCiAgICAjIGFsbG93IGFjY2Vzcywgd2hlbiB0aGUgd29ya29yZGVyIGFnZW50IGlzIGluIHRoZSBsaXN0CiAgICByZXR1cm4gMSBpZiAkQWdlbnRMaXN0LT57JFdvcmtPcmRlckFnZW50fTsKCiAgICAjIGRlbnkgcncgYWNjZXNzIG90aGVyd2lzZQogICAgcmV0dXJuOwp9Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCgo9aGVhZDEgVkVSU0lPTgoKJElkOiBMaXN0QWdlbnRDaGVjay5wbSx2IDEuMyAyMDEwLzAyLzAxIDA5OjI3OjA2IGJlcyBFeHAgJAoKPWN1dAoKMTsK</File>
        <File Location="Kernel/System/ITSMChange/ITSMWorkOrder/Permission/WorkOrderAgentCheck.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/Permission/CABCheck.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9QZXJtaXNzaW9uL0NBQkNoZWNrLnBtIC0gQ0FCIGJhc2VkIHBlcm1pc3Npb24gY2hlY2sKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAwOSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IENBQkNoZWNrLnBtLHYgMS42IDIwMDkvMTEvMTkgMTM6NDg6MDYgYmVzIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpQZXJtaXNzaW9uOjpDQUJDaGVjazsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuNiAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OlBlcm1pc3Npb246OkNBQkNoZWNrIC0gQ0FCIGJhc2VkIHBlcm1pc3Npb24gY2hlY2sKCj1oZWFkMSBTWU5PUFNJUwoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgYW4gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6Q29uZmlnOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpFbmNvZGU7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkxvZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TWFpbjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6VGltZTsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6REI7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OlVzZXI7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Okdyb3VwOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpQZXJtaXNzaW9uOjpDQUJDaGVjazsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkVGltZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpUaW1lLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJERCT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkRCLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIG15ICRVc2VyT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OlVzZXItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgID0+ICRUaW1lT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICApOwogICAgbXkgJEdyb3VwT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Okdyb3VwLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgID0+ICREQk9iamVjdCwKICAgICk7CiAgICBteSAkQ2hhbmdlT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2UtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIFRpbWVPYmplY3QgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwogICAgbXkgJENoZWNrT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OlBlcm1pc3Npb246OkNBQkNoZWNrLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ICAgICAgICAgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgICAgICAgICA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICAgICAgICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgICAgICAgICAgPT4gJE1haW5PYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgICAgICAgICAgPT4gJFRpbWVPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgICAgICAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIFVzZXJPYmplY3QgICAgICAgICAgID0+ICRVc2VyT2JqZWN0LAogICAgICAgIEdyb3VwT2JqZWN0ICAgICAgICAgID0+ICRHcm91cE9iamVjdCwKICAgICAgICBDaGFuZ2VPYmplY3QgICAgICAgICA9PiAkQ2hhbmdlT2JqZWN0LAogICAgKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBnZXQgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhDb25maWdPYmplY3QgRW5jb2RlT2JqZWN0IExvZ09iamVjdCBNYWluT2JqZWN0IFRpbWVPYmplY3QgREJPYmplY3QgVXNlck9iamVjdCBHcm91cE9iamVjdCBDaGFuZ2VPYmplY3QpCiAgICAgICAgKQogICAgewogICAgICAgICRTZWxmLT57JE9iamVjdH0gPSAkUGFyYW17JE9iamVjdH0gfHwgZGllICJHb3Qgbm8gJE9iamVjdCEiOwogICAgfQoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gUnVuKCkKClRoaXMgbWV0aG9kIGRvZXMgdGhlIGNoZWNrLiBBY2Nlc3MgaXMgYWxsb3dlZCB3aGVuIHR5cGUgaXMgJ3JvJyBhbmQgdGhlIGFnZW50IGlzIGEgbWVtYmVyCm9mIHRoZSBDQUIgb2YgdGhlIGNoYW5nZS4KCiAgICBteSAkSGFzQWNjZXNzID0gJENoZWNrT2JqZWN0LT5SdW4oCiAgICAgICAgVXNlcklEICAgPT4gMTIzLAogICAgICAgIFR5cGUgICAgID0+ICdydycsICAgICAjICdybycgb3IgJ3J3JwogICAgICAgIENoYW5nZUlEID0+IDMzMzMsICAgICAjIG9wdGlvbmFsIGZvciBDaGFuZ2VBZGQKICAgICk7Cgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KFVzZXJJRCBUeXBlKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBvbmx5ICdybycgYWNjZXNzIG1pZ2h0IGJlIGdyYW50ZWQgYnkgdGhpcyBtb2R1bGUKICAgIHJldHVybiBpZiAkUGFyYW17VHlwZX0gbmUgJ3JvJzsKCiAgICAjIGRlbnkgYWNjZXNzIHdoZW4gdGhlcmUgaXMgbm8gY2hhbmdlLCBhbmQgdGh1cyBubyBDQUIKICAgIHJldHVybiBpZiAhJFBhcmFte0NoYW5nZUlEfTsKCiAgICAjIGdldCB0aGUgQ0FCIG9mIHRoZSBjaGFuZ2UKICAgIG15ICRDQUIgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZUNBQkdldCgKICAgICAgICBVc2VySUQgICA9PiAkUGFyYW17VXNlcklEfSwKICAgICAgICBDaGFuZ2VJRCA9PiAkUGFyYW17Q2hhbmdlSUR9LAogICAgKTsKCiAgICAjIGxvb2sgZm9yIGEgQ0FCIG1lbWJlciB3aXRoIHRoZSByZWxldmFudCBVc2VySUQKICAgIG15ICgkRm91bmRDQUJNZW1iZXIpID0gZ3JlcCB7ICRfID09ICRQYXJhbXtVc2VySUR9IH0gQHsgJENBQi0+e0NBQkFnZW50c30gfTsKCiAgICAjIGFsbG93IGFjY2VzcyB0aGUgdGhlIGFnZW50IGlzIGEgQ0FCIG1lbWJlcgogICAgcmV0dXJuIDEgaWYgJEZvdW5kQ0FCTWVtYmVyOwoKICAgICMgZGVueSBhY2Nlc3Mgb3RoZXJ3aXNlCiAgICByZXR1cm47Cn0KCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KCj1oZWFkMSBWRVJTSU9OCgokSWQ6IENBQkNoZWNrLnBtLHYgMS42IDIwMDkvMTEvMTkgMTM6NDg6MDYgYmVzIEV4cCAkCgo9Y3V0CgoxOwo=</File>
        <File Location="Kernel/System/ITSMChange/Permission/ChangeAgentCheck.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9QZXJtaXNzaW9uL0NoYW5nZUFnZW50Q2hlY2sucG0gLSBjaGFuZ2UgYWdlbnQgYmFzZWQgcGVybWlzc2lvbiBjaGVjawojIENvcHlyaWdodCAoQykgMjAwMy0yMDA5IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogQ2hhbmdlQWdlbnRDaGVjay5wbSx2IDEuMTUgMjAwOS8xMS8xOSAxMzo0ODowNiBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OlBlcm1pc3Npb246OkNoYW5nZUFnZW50Q2hlY2s7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjE1ICQpIFsxXTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6UGVybWlzc2lvbjo6Q2hhbmdlQWdlbnRDaGVjayAtIGNoYW5nZSBhZ2VudCBiYXNlZCBwZXJtaXNzaW9uIGNoZWNrCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok1haW47CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OlRpbWU7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkRCOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpVc2VyOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpHcm91cDsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6UGVybWlzc2lvbjo6Q2hhbmdlQWdlbnRDaGVjazsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkVGltZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpUaW1lLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICApOwogICAgbXkgJERCT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkRCLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIG15ICRVc2VyT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OlVzZXItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgID0+ICRUaW1lT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICApOwogICAgbXkgJEdyb3VwT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Okdyb3VwLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgID0+ICREQk9iamVjdCwKICAgICk7CiAgICBteSAkQ2hhbmdlT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2UtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIFRpbWVPYmplY3QgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwogICAgbXkgJENoZWNrT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OlBlcm1pc3Npb246OkNoYW5nZUFnZW50Q2hlY2stPm5ldygKICAgICAgICBDb25maWdPYmplY3QgICAgICAgICA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCAgICAgICAgID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgICAgICAgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgICAgICAgICA9PiAkTWFpbk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgICAgICAgICA9PiAkVGltZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgICAgICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVXNlck9iamVjdCAgICAgICAgICAgPT4gJFVzZXJPYmplY3QsCiAgICAgICAgR3JvdXBPYmplY3QgICAgICAgICAgPT4gJEdyb3VwT2JqZWN0LAogICAgICAgIENoYW5nZU9iamVjdCAgICAgICAgID0+ICRDaGFuZ2VPYmplY3QsCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgVGltZU9iamVjdCBEQk9iamVjdCBVc2VyT2JqZWN0IEdyb3VwT2JqZWN0IENoYW5nZU9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKVGhpcyBtZXRob2QgZG9lcyB0aGUgY2hlY2suICdybycgYWNjZXNzIGlzIGFsbG93ZWQgd2hlbiB0aGUgYWdlbnQgaXMgYSAncm8nIG1lbWJlcgpvZiB0aGUgJ2l0c20tY2hhbmdlJyBncm91cC4KCiAgICBteSAkSGFzQWNjZXNzID0gJENoZWNrT2JqZWN0LT5SdW4oCiAgICAgICAgVXNlcklEICAgPT4gMTIzLAogICAgICAgIFR5cGUgICAgID0+ICdydycsICAgICAjICdybycgb3IgJ3J3JwogICAgICAgIENoYW5nZUlEID0+IDMzMzMsICAgICAjIG9wdGlvbmFsIGZvciBDaGFuZ2VBZGQKICAgICk7Cgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KFVzZXJJRCBUeXBlKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBvbmx5ICdybycgYWNjZXNzIG1pZ2h0IGJlIGdyYW50ZWQgYnkgdGhpcyBtb2R1bGUKICAgIHJldHVybiBpZiAkUGFyYW17VHlwZX0gbmUgJ3JvJzsKCiAgICAjIHRoZSBjaGVjayBpcyBiYXNlZCB1cG9uIHRoZSBjaGFuZ2UgYWdlbnQKICAgIG15ICRHcm91cElEID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTG9va3VwKCBHcm91cCA9PiAnaXRzbS1jaGFuZ2UnICk7CgogICAgIyBkZW55IGFjY2Vzcywgd2hlbiB0aGUgZ3JvdXAgaXMgbm90IGZvdW5kCiAgICByZXR1cm4gaWYgISRHcm91cElEOwoKICAgICMgQ2FjaGluZyBpcyB0dXJuZWQgb24gYnkgZGVmYXVsdC4KICAgIG15ICRDYWNoZWQgPSBkZWZpbmVkICRQYXJhbXtDYWNoZWR9ID8gJFBhcmFte0NhY2hlZH0gOiAxOwoKICAgICMgZ2V0IHVzZXIgZ3JvdXBzLCB3aGVyZSB0aGUgdXNlciBoYXMgdGhlIGFwcHJvcHJpYXRlIHByaXZpbGVnZQogICAgbXkgJUdyb3VwcyA9ICRTZWxmLT57R3JvdXBPYmplY3R9LT5Hcm91cE1lbWJlckxpc3QoCiAgICAgICAgVXNlcklEID0+ICRQYXJhbXtVc2VySUR9LAogICAgICAgIFR5cGUgICA9PiAkUGFyYW17VHlwZX0sCiAgICAgICAgUmVzdWx0ID0+ICdIQVNIJywKICAgICAgICBDYWNoZWQgPT4gJENhY2hlZCwKICAgICk7CgogICAgIyBkZW55IGFjY2VzcyBpZiB0aGUgYWdlbnQgZG9lc24ndCBoYXZlIHRoZSBhcHByb3ByaWF0ZSB0eXBlIGluIHRoZSBhcHByb3ByaWF0ZSBncm91cAogICAgcmV0dXJuIGlmICEkR3JvdXBzeyRHcm91cElEfTsKCiAgICAjIGNoYW5nZSBhZ2VudHMgYXJlIGdyYW50ZWQgcm8gYWNjZXNzCiAgICByZXR1cm4gMTsKfQoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKGh0dHA6Ly9vdHJzLm9yZy8pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgoKPWhlYWQxIFZFUlNJT04KCiRJZDogQ2hhbmdlQWdlbnRDaGVjay5wbSx2IDEuMTUgMjAwOS8xMS8xOSAxMzo0ODowNiBiZXMgRXhwICQKCj1jdXQKCjE7Cg==</File>
        <File Location="Kernel/System/ITSMChange/Permission/ChangeBuilderCheck.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/Permission/ChangeManagerCheck.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNoYW5nZS9QZXJtaXNzaW9uL0NoYW5nZU1hbmFnZXJDaGVjay5wbSAtIGNoYW5nZSBtYW5hZ2VyIGJhc2VkIHBlcm1pc3Npb24gY2hlY2sKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAwOSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IENoYW5nZU1hbmFnZXJDaGVjay5wbSx2IDEuMTQgMjAwOS8xMS8xOSAxMzo0ODowNiBiZXMgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6OlBlcm1pc3Npb246OkNoYW5nZU1hbmFnZXJDaGVjazsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuMTQgJCkgWzFdOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOjpQZXJtaXNzaW9uOjpDaGFuZ2VNYW5hZ2VyQ2hlY2sgLSBjaGFuZ2UgbWFuYWdlciBiYXNlZCBwZXJtaXNzaW9uIGNoZWNrCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok1haW47CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OlRpbWU7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkRCOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpVc2VyOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpHcm91cDsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6UGVybWlzc2lvbjo6Q2hhbmdlTWFuYWdlckNoZWNrOwoKICAgIG15ICRDb25maWdPYmplY3QgPSBLZXJuZWw6OkNvbmZpZy0+bmV3KCk7CiAgICBteSAkRW5jb2RlT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkVuY29kZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgKTsKICAgIG15ICRMb2dPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TG9nLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICApOwogICAgbXkgJE1haW5PYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TWFpbi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICRUaW1lT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OlRpbWUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkREJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6REItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwogICAgbXkgJFVzZXJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6VXNlci0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICAgICBUaW1lT2JqZWN0ICAgPT4gJFRpbWVPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgID0+ICREQk9iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICk7CiAgICBteSAkR3JvdXBPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6R3JvdXAtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgKTsKICAgIG15ICRDaGFuZ2VPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgID0+ICRUaW1lT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7CiAgICBteSAkQ2hlY2tPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6UGVybWlzc2lvbjo6Q2hhbmdlTWFuYWdlckNoZWNrLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ICAgICAgICAgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgICAgICAgICA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICAgICAgICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgICAgICAgICAgPT4gJE1haW5PYmplY3QsCiAgICAgICAgVGltZU9iamVjdCAgICAgICAgICAgPT4gJFRpbWVPYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgICAgICAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIFVzZXJPYmplY3QgICAgICAgICAgID0+ICRVc2VyT2JqZWN0LAogICAgICAgIEdyb3VwT2JqZWN0ICAgICAgICAgID0+ICRHcm91cE9iamVjdCwKICAgICAgICBDaGFuZ2VPYmplY3QgICAgICAgICA9PiAkQ2hhbmdlT2JqZWN0LAogICAgKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBnZXQgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhDb25maWdPYmplY3QgRW5jb2RlT2JqZWN0IExvZ09iamVjdCBNYWluT2JqZWN0IFRpbWVPYmplY3QgREJPYmplY3QgVXNlck9iamVjdCBHcm91cE9iamVjdCBDaGFuZ2VPYmplY3QpCiAgICAgICAgKQogICAgewogICAgICAgICRTZWxmLT57JE9iamVjdH0gPSAkUGFyYW17JE9iamVjdH0gfHwgZGllICJHb3Qgbm8gJE9iamVjdCEiOwogICAgfQoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gUnVuKCkKClRoaXMgbWV0aG9kIGRvZXMgdGhlIGNoZWNrLiAncm8nIGFuZCAncncnIGFjY2VzcyBpcyBncmFudGVkCndoZW4gdGhlIGFnZW50IGhhcyB0aGUgcHJpdiBpbiB0aGUgJ2l0c20tY2hhbmdlLW1hbmFnZXInIGdyb3VwLgoKICAgIG15ICRIYXNBY2Nlc3MgPSAkQ2hlY2tPYmplY3QtPlJ1bigKICAgICAgICBVc2VySUQgICA9PiAxMjMsCiAgICAgICAgVHlwZSAgICAgPT4gJ3J3JywgICAgICMgJ3JvJyBvciAncncnCiAgICAgICAgQ2hhbmdlSUQgPT4gMzMzMywgICAgICMgb3B0aW9uYWwgZm9yIENoYW5nZUFkZAogICAgKTsKCj1jdXQKCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoVXNlcklEIFR5cGUpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRBcmd1bWVudH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBcmd1bWVudCEiLAogICAgICAgICAgICApOwoKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIHRoZSBjaGVjayBpcyBiYXNlZCB1cG9uIHRoZSBjaGFuZ2UgbWFuYWdlcgogICAgbXkgJEdyb3VwSUQgPSAkU2VsZi0+e0dyb3VwT2JqZWN0fS0+R3JvdXBMb29rdXAoIEdyb3VwID0+ICdpdHNtLWNoYW5nZS1tYW5hZ2VyJyApOwoKICAgICMgZGVueSBhY2Nlc3MsIHdoZW4gdGhlIGdyb3VwIGlzIG5vdCBmb3VuZAogICAgcmV0dXJuIGlmICEkR3JvdXBJRDsKCiAgICAjIENhY2hpbmcgaXMgdHVybmVkIG9uIGJ5IGRlZmF1bHQuCiAgICBteSAkQ2FjaGVkID0gZGVmaW5lZCAkUGFyYW17Q2FjaGVkfSA/ICRQYXJhbXtDYWNoZWR9IDogMTsKCiAgICAjIGdldCB1c2VyIGdyb3Vwcywgd2hlcmUgdGhlIHVzZXIgaGFzIHRoZSBhcHByb3ByaWF0ZSBwcml2aWxlZ2UKICAgIG15ICVHcm91cHMgPSAkU2VsZi0+e0dyb3VwT2JqZWN0fS0+R3JvdXBNZW1iZXJMaXN0KAogICAgICAgIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfSwKICAgICAgICBUeXBlICAgPT4gJFBhcmFte1R5cGV9LAogICAgICAgIFJlc3VsdCA9PiAnSEFTSCcsCiAgICAgICAgQ2FjaGVkID0+ICRDYWNoZWQsCiAgICApOwoKICAgICMgYWxsb3cgcm8gYW5kIHJ3IGFjY2VzcyBpZiB0aGUgYWdlbnQgaXMgYSBjaGFuZ2UgbWFuYWdlcgogICAgcmV0dXJuIDEgaWYgJEdyb3Vwc3skR3JvdXBJRH07CgogICAgIyBubyBuZWVkIHRvIGNoZWNrIHdoZXRoZXIgdGhlIGFnZW50IGlzIHRoZSBhY3R1YWwgbWFuYWdlciBvZiB0aGUgY2hhbmdlCgogICAgIyBkZW55IGFjY2VzcyBvdGhlcndpc2UKICAgIHJldHVybjsKfQoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKGh0dHA6Ly9vdHJzLm9yZy8pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgoKPWhlYWQxIFZFUlNJT04KCiRJZDogQ2hhbmdlTWFuYWdlckNoZWNrLnBtLHYgMS4xNCAyMDA5LzExLzE5IDEzOjQ4OjA2IGJlcyBFeHAgJAoKPWN1dAoKMTsK</File>
        <File Location="Kernel/System/ITSMChange/Template/CAB.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/Template/ITSMChange.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/Template/ITSMCondition.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMChange/Template/ITSMWorkOrder.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/LinkObject/ITSMChange.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/LinkObject/ITSMWorkOrder.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Stats/Dynamic/ITSMChangeManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Stats/Dynamic/ITSMChangeManagementChangesIncidents.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3RhdHMvRHluYW1pYy9JVFNNQ2hhbmdlTWFuYWdlbWVudENoYW5nZXNJbmNpZGVudHMucG0KIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IElUU01DaGFuZ2VNYW5hZ2VtZW50Q2hhbmdlc0luY2lkZW50cy5wbSx2IDEuNyAyMDEwLzAyLzIyIDEwOjA5OjEwIHJlYiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6U3RhdHM6OkR5bmFtaWM6OklUU01DaGFuZ2VNYW5hZ2VtZW50Q2hhbmdlc0luY2lkZW50czsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTsKdXNlIEtlcm5lbDo6U3lzdGVtOjpUaWNrZXQ7CnVzZSBLZXJuZWw6OlN5c3RlbTo6VHlwZTsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuNyAkKSBbMV07CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhEQk9iamVjdCBDb25maWdPYmplY3QgTG9nT2JqZWN0IFVzZXJPYmplY3QgVGltZU9iamVjdCBNYWluT2JqZWN0IEVuY29kZU9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgIyBjcmVhdGUgbmVlZGVkIG9iamVjdHMKICAgICRTZWxmLT57Q2hhbmdlT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoICV7JFNlbGZ9ICk7CiAgICAkU2VsZi0+e1RpY2tldE9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6VGlja2V0LT5uZXcoICV7JFNlbGZ9ICk7CiAgICAkU2VsZi0+e1R5cGVPYmplY3R9ICAgPSBLZXJuZWw6OlN5c3RlbTo6VHlwZS0+bmV3KCAleyRTZWxmfSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIEdldE9iamVjdE5hbWUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gJ0lUU01DaGFuZ2VNYW5hZ2VtZW50Q2hhbmdlc0luY2lkZW50cyc7Cn0KCnN1YiBHZXRPYmplY3RBdHRyaWJ1dGVzIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBnZXQgbGlzdCBvZiB0aWNrZXQgdHlwZXMKICAgIG15ICVPYmplY3RzID0gJFNlbGYtPntUeXBlT2JqZWN0fS0+VHlwZUxpc3QoIFZhbGlkID0+IDEgKTsKICAgICRPYmplY3RzeyctMSd9ID0gJ0NoYW5nZXMnOwoKICAgICMgZ2V0IGN1cnJlbnQgdGltZSB0byBmaXggYnVnIzQ4NzAKICAgIG15ICRUaW1lU3RhbXAgPSAkU2VsZi0+e1RpbWVPYmplY3R9LT5DdXJyZW50VGltZXN0YW1wKCk7CiAgICBteSAoJERhdGUpID0gc3BsaXQgL1xzKy8sICRUaW1lU3RhbXA7CiAgICBteSAkVG9kYXkgPSBzcHJpbnRmICIlcyAyMzo1OTo1OSIsICREYXRlOwoKICAgIG15IEBPYmplY3RBdHRyaWJ1dGVzID0gKAogICAgICAgIHsKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICA9PiAnT2JqZWN0cycsCiAgICAgICAgICAgIFVzZUFzWHZhbHVlICAgICAgPT4gMSwKICAgICAgICAgICAgVXNlQXNWYWx1ZVNlcmllcyA9PiAxLAogICAgICAgICAgICBVc2VBc1Jlc3RyaWN0aW9uID0+IDEsCiAgICAgICAgICAgIEVsZW1lbnQgICAgICAgICAgPT4gJ09iamVjdCcsCiAgICAgICAgICAgIEJsb2NrICAgICAgICAgICAgPT4gJ011bHRpU2VsZWN0RmllbGQnLAogICAgICAgICAgICBWYWx1ZXMgICAgICAgICAgID0+IFwlT2JqZWN0cywKICAgICAgICAgICAgU2VsZWN0ZWRWYWx1ZXMgICA9PiBbIGtleXMgJU9iamVjdHMgXSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICA9PiAnVGltZXBlcmlvZCcsCiAgICAgICAgICAgIFVzZUFzWHZhbHVlICAgICAgPT4gMSwKICAgICAgICAgICAgVXNlQXNWYWx1ZVNlcmllcyA9PiAxLAogICAgICAgICAgICBVc2VBc1Jlc3RyaWN0aW9uID0+IDEsCiAgICAgICAgICAgIEVsZW1lbnQgICAgICAgICAgPT4gJ1RpbWVQZXJpb2QnLAogICAgICAgICAgICBUaW1lUGVyaW9kRm9ybWF0ID0+ICdEYXRlSW5wdXRGb3JtYXQnLCAgICAjICdEYXRlSW5wdXRGb3JtYXRMb25nJywKICAgICAgICAgICAgQmxvY2sgICAgICAgICAgICA9PiAnVGltZScsCiAgICAgICAgICAgIFRpbWVTdG9wICAgICAgICAgPT4gJFRvZGF5LAogICAgICAgICAgICBWYWx1ZXMgICAgICAgICAgID0+IHsKICAgICAgICAgICAgICAgIFRpbWVTdGFydCA9PiAnQ3JlYXRlVGltZU5ld2VyRGF0ZScsCiAgICAgICAgICAgICAgICBUaW1lU3RvcCAgPT4gJ0NyZWF0ZVRpbWVPbGRlckRhdGUnLAogICAgICAgICAgICB9LAogICAgICAgIH0sCiAgICApOwoKICAgIHJldHVybiBAT2JqZWN0QXR0cmlidXRlczsKfQoKc3ViIEdldFN0YXRFbGVtZW50IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBkZWxldGUgQ3JlYXRlVGltZU5ld2VyRGF0YSBhcyB3ZSB3YW50IHRvIGdldCAqQUxMKiBleGlzdGluZyBvYmplY3RzCiAgICBkZWxldGUgJFBhcmFte0NyZWF0ZVRpbWVOZXdlckRhdGV9OwoKICAgICMgZm9yIHRpY2tldHMgdGhlIHNlYXJjaCBvcHRpb24gaXMgIlRpY2tldENyZWF0ZVRpbWVPbGRlckRhdGUiCiAgICAkUGFyYW17VGlja2V0Q3JlYXRlVGltZU9sZGVyRGF0ZX0gPSAkUGFyYW17Q3JlYXRlVGltZU9sZGVyRGF0ZX07CgogICAgIyBpZiB0aGlzIGNlbGwgc2hvdWxkIGJlIGZpbGxlZCB3aXRoIG51bWJlciBvZiBjaGFuZ2VzCiAgICBpZiAoICRQYXJhbXtPYmplY3R9LT5bMF0gPT0gLTEgKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT57Q2hhbmdlT2JqZWN0fS0+Q2hhbmdlU2VhcmNoKAogICAgICAgICAgICBVc2VySUQgICAgID0+IDEsCiAgICAgICAgICAgIFJlc3VsdCAgICAgPT4gJ0NPVU5UJywKICAgICAgICAgICAgUGVybWlzc2lvbiA9PiAncm8nLAogICAgICAgICAgICBMaW1pdCAgICAgID0+IDEwMF8wMDBfMDAwLAogICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGlmIHRoaXMgY2VsbCBzaG91bGQgYmUgZmlsbGVkIHdpdGggbnVtYmVyIG9mIHRpY2tldHMKICAgIGVsc2UgewogICAgICAgIHJldHVybiAkU2VsZi0+e1RpY2tldE9iamVjdH0tPlRpY2tldFNlYXJjaCgKICAgICAgICAgICAgVXNlcklEICAgICA9PiAxLAogICAgICAgICAgICBSZXN1bHQgICAgID0+ICdDT1VOVCcsCiAgICAgICAgICAgIFBlcm1pc3Npb24gPT4gJ3JvJywKICAgICAgICAgICAgTGltaXQgICAgICA9PiAxMDBfMDAwXzAwMCwKICAgICAgICAgICAgVHlwZUlEcyAgICA9PiBbICRQYXJhbXtPYmplY3R9LT5bMF0gXSwKICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICk7CiAgICB9CgogICAgcmV0dXJuOwp9CgpzdWIgRXhwb3J0V3JhcHBlciB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IGxpc3Qgb2YgdGlja2V0IHR5cGVzCiAgICBteSAlT2JqZWN0cyA9ICRTZWxmLT57VHlwZU9iamVjdH0tPlR5cGVMaXN0KCBWYWxpZCA9PiAxICk7CiAgICAkT2JqZWN0c3snLTEnfSA9ICdDaGFuZ2VzJzsKCiAgICAjIHdyYXAgaWRzIHRvIHVzZWQgc3BlbGxpbmcKICAgIGZvciBteSAkVXNlIChxdyhVc2VBc1ZhbHVlU2VyaWVzIFVzZUFzUmVzdHJpY3Rpb24gVXNlQXNYdmFsdWUpKSB7CiAgICAgICAgRUxFTUVOVDoKICAgICAgICBmb3IgbXkgJEVsZW1lbnQgKCBAeyAkUGFyYW17JFVzZX0gfSApIHsKCiAgICAgICAgICAgIG5leHQgRUxFTUVOVCBpZiAhJEVsZW1lbnQ7CiAgICAgICAgICAgIG5leHQgRUxFTUVOVCBpZiAhJEVsZW1lbnQtPntTZWxlY3RlZFZhbHVlc307CgogICAgICAgICAgICBteSAkRWxlbWVudE5hbWUgPSAkRWxlbWVudC0+e0VsZW1lbnR9OwogICAgICAgICAgICBteSAkVmFsdWVzICAgICAgPSAkRWxlbWVudC0+e1NlbGVjdGVkVmFsdWVzfTsKCiAgICAgICAgICAgIGlmICggJEVsZW1lbnROYW1lIGVxICdPYmplY3QnICkgewoKICAgICAgICAgICAgICAgIElEOgogICAgICAgICAgICAgICAgZm9yIG15ICRJRCAoIEB7JFZhbHVlc30gKSB7CiAgICAgICAgICAgICAgICAgICAgbmV4dCBJRCBpZiAhJElEOwoKICAgICAgICAgICAgICAgICAgICAkSUQtPntDb250ZW50fSA9ICRPYmplY3RzeyAkSUQtPntDb250ZW50fSB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiBcJVBhcmFtOwp9CgpzdWIgSW1wb3J0V3JhcHBlciB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IGxpc3Qgb2YgdGlja2V0IHR5cGVzCiAgICBteSAlT2JqZWN0cyA9ICRTZWxmLT57VHlwZU9iamVjdH0tPlR5cGVMaXN0KCBWYWxpZCA9PiAxICk7CiAgICAkT2JqZWN0c3snLTEnfSA9ICdDaGFuZ2VzJzsKCiAgICAjIHdyYXAgdXNlZCBzcGVsbGluZyB0byBpZHMKICAgIGZvciBteSAkVXNlIChxdyhVc2VBc1ZhbHVlU2VyaWVzIFVzZUFzUmVzdHJpY3Rpb24gVXNlQXNYdmFsdWUpKSB7CiAgICAgICAgRUxFTUVOVDoKICAgICAgICBmb3IgbXkgJEVsZW1lbnQgKCBAeyAkUGFyYW17JFVzZX0gfSApIHsKCiAgICAgICAgICAgIG5leHQgRUxFTUVOVCBpZiAhJEVsZW1lbnQ7CiAgICAgICAgICAgIG5leHQgRUxFTUVOVCBpZiAhJEVsZW1lbnQtPntTZWxlY3RlZFZhbHVlc307CgogICAgICAgICAgICBteSAkRWxlbWVudE5hbWUgPSAkRWxlbWVudC0+e0VsZW1lbnR9OwogICAgICAgICAgICBteSAkVmFsdWVzICAgICAgPSAkRWxlbWVudC0+e1NlbGVjdGVkVmFsdWVzfTsKCiAgICAgICAgICAgIGlmICggJEVsZW1lbnROYW1lIGVxICdPYmplY3QnICkgewogICAgICAgICAgICAgICAgSUQ6CiAgICAgICAgICAgICAgICBmb3IgbXkgJElEICggQHskVmFsdWVzfSApIHsKICAgICAgICAgICAgICAgICAgICBuZXh0IElEIGlmICEkSUQ7CgogICAgICAgICAgICAgICAgICAgIGZvciBteSAkS2V5ICgga2V5cyAlT2JqZWN0cyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgJElELT57Q29udGVudH0gPSAkS2V5IGlmICRPYmplY3RzeyRLZXl9IGVxICRJRC0+e0NvbnRlbnR9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gXCVQYXJhbTsKfQoKMTsK</File>
        <File Location="Kernel/System/Stats/Dynamic/ITSMChangeManagementChangesPerCIClasses.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Stats/Dynamic/ITSMChangeManagementHistory.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3RhdHMvRHluYW1pYy9JVFNNQ2hhbmdlTWFuYWdlbWVudEhpc3RvcnkucG0gLSBhbGwgYWR2aWNlIGZ1bmN0aW9ucwojIENvcHlyaWdodCAoQykgMjAwMy0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRJZDogSVRTTUNoYW5nZU1hbmFnZW1lbnRIaXN0b3J5LnBtLHYgMS41IDIwMTAvMDIvMjIgMTA6MDk6MTAgcmViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpTdGF0czo6RHluYW1pYzo6SVRTTUNoYW5nZU1hbmFnZW1lbnRIaXN0b3J5OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlOwp1c2UgS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2U6Okhpc3Rvcnk7Cgp1c2UgdmFycyBxdygkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjUgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAoCiAgICAgICAgcXcoREJPYmplY3QgQ29uZmlnT2JqZWN0IExvZ09iamVjdCBVc2VyT2JqZWN0IFRpbWVPYmplY3QgTWFpbk9iamVjdCBFbmNvZGVPYmplY3QpCiAgICAgICAgKQogICAgewogICAgICAgICRTZWxmLT57JE9iamVjdH0gPSAkUGFyYW17JE9iamVjdH0gfHwgZGllICJHb3Qgbm8gJE9iamVjdCEiOwogICAgfQoKICAgICMgY3JlYXRlIG5lZWRlZCBvYmplY3RzCiAgICAkU2VsZi0+e0NoYW5nZU9iamVjdH0gID0gS2VybmVsOjpTeXN0ZW06OklUU01DaGFuZ2UtPm5ldyggJXskU2VsZn0gKTsKICAgICRTZWxmLT57SGlzdG9yeU9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTo6SGlzdG9yeS0+bmV3KCAleyRTZWxmfSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIEdldE9iamVjdE5hbWUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gJ0lUU01DaGFuZ2VNYW5hZ2VtZW50SGlzdG9yeSc7Cn0KCnN1YiBHZXRPYmplY3RBdHRyaWJ1dGVzIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBnZXQgY2hhbmdlIHN0YXRlIGxpc3QKICAgIG15ICRDaGFuZ2VTdGF0ZXMgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZVBvc3NpYmxlU3RhdGVzR2V0KAogICAgICAgIFVzZXJJRCA9PiAxLAogICAgKTsKICAgIG15ICVDaGFuZ2VTdGF0ZUxpc3QgPSBtYXAgeyAkXy0+e0tleX0gPT4gJF8tPntWYWx1ZX0gfSBAeyRDaGFuZ2VTdGF0ZXN9OwoKICAgICMgZ2V0IGN1cnJlbnQgdGltZSB0byBmaXggYnVnIzQ4NzAKICAgIG15ICRUaW1lU3RhbXAgPSAkU2VsZi0+e1RpbWVPYmplY3R9LT5DdXJyZW50VGltZXN0YW1wKCk7CiAgICBteSAoJERhdGUpID0gc3BsaXQgL1xzKy8sICRUaW1lU3RhbXA7CiAgICBteSAkVG9kYXkgPSBzcHJpbnRmICIlcyAyMzo1OTo1OSIsICREYXRlOwoKICAgIG15IEBPYmplY3RBdHRyaWJ1dGVzID0gKAogICAgICAgIHsKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICA9PiAnQ2hhbmdlIFN0YXRlJywKICAgICAgICAgICAgVXNlQXNYdmFsdWUgICAgICA9PiAxLAogICAgICAgICAgICBVc2VBc1ZhbHVlU2VyaWVzID0+IDEsCiAgICAgICAgICAgIFVzZUFzUmVzdHJpY3Rpb24gPT4gMSwKICAgICAgICAgICAgRWxlbWVudCAgICAgICAgICA9PiAnTmV3VmFsdWVzJywKICAgICAgICAgICAgQmxvY2sgICAgICAgICAgICA9PiAnTXVsdGlTZWxlY3RGaWVsZCcsCiAgICAgICAgICAgIFZhbHVlcyAgICAgICAgICAgPT4gXCVDaGFuZ2VTdGF0ZUxpc3QsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgIE5hbWUgICAgICAgICAgICAgPT4gJ1RpbWVwZXJpb2QnLAogICAgICAgICAgICBVc2VBc1h2YWx1ZSAgICAgID0+IDEsCiAgICAgICAgICAgIFVzZUFzVmFsdWVTZXJpZXMgPT4gMSwKICAgICAgICAgICAgVXNlQXNSZXN0cmljdGlvbiA9PiAxLAogICAgICAgICAgICBFbGVtZW50ICAgICAgICAgID0+ICdUaW1lUGVyaW9kJywKICAgICAgICAgICAgVGltZVBlcmlvZEZvcm1hdCA9PiAnRGF0ZUlucHV0Rm9ybWF0JywgICAgIyAnRGF0ZUlucHV0Rm9ybWF0TG9uZycsCiAgICAgICAgICAgIEJsb2NrICAgICAgICAgICAgPT4gJ1RpbWUnLAogICAgICAgICAgICBUaW1lU3RvcCAgICAgICAgID0+ICRUb2RheSwKICAgICAgICAgICAgVmFsdWVzICAgICAgICAgICA9PiB7CiAgICAgICAgICAgICAgICBUaW1lU3RhcnQgPT4gJ0NoYW5nZVRpbWVOZXdlckRhdGUnLAogICAgICAgICAgICAgICAgVGltZVN0b3AgID0+ICdDaGFuZ2VUaW1lT2xkZXJEYXRlJywKICAgICAgICAgICAgfSwKICAgICAgICB9LAogICAgKTsKCiAgICByZXR1cm4gQE9iamVjdEF0dHJpYnV0ZXM7Cn0KCnN1YiBHZXRTdGF0RWxlbWVudCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgc2VhcmNoIGhpc3RvcnkKICAgIG15ICRJRHMgPSAkU2VsZi0+e0hpc3RvcnlPYmplY3R9LT5IaXN0b3J5U2VhcmNoKAogICAgICAgIFVzZXJJRCAgICA9PiAxLAogICAgICAgIFR5cGUgICAgICA9PiAnQ2hhbmdlJywKICAgICAgICBBdHRyaWJ1dGUgPT4gJ0NoYW5nZVN0YXRlSUQnLAogICAgICAgIExpbWl0ICAgICA9PiAxMDBfMDAwXzAwMCwKICAgICAgICAlUGFyYW0sCiAgICApOwoKICAgIG15IEBDaGFuZ2VOdW1iZXJzOwogICAgaWYgKCAkSURzICYmIHJlZiAkSURzIGVxICdBUlJBWScgKSB7CgogICAgICAgIElEOgogICAgICAgIGZvciBteSAkSUQgKCBAeyRJRHN9ICkgewogICAgICAgICAgICBteSAkQ2hhbmdlID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5DaGFuZ2VHZXQoCiAgICAgICAgICAgICAgICBDaGFuZ2VJRCA9PiAkSUQsCiAgICAgICAgICAgICAgICBVc2VySUQgICA9PiAxLAogICAgICAgICAgICApOwoKICAgICAgICAgICAgbmV4dCBJRCBpZiAhJENoYW5nZTsKCiAgICAgICAgICAgIHB1c2ggQENoYW5nZU51bWJlcnMsICRDaGFuZ2UtPntDaGFuZ2VOdW1iZXJ9OwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gam9pbiAiXG4iLCBAQ2hhbmdlTnVtYmVyczsKfQoKc3ViIEV4cG9ydFdyYXBwZXIgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIHdyYXAgaWRzIHRvIHVzZWQgc3BlbGxpbmcKICAgIGZvciBteSAkVXNlIChxdyhVc2VBc1ZhbHVlU2VyaWVzIFVzZUFzUmVzdHJpY3Rpb24gVXNlQXNYdmFsdWUpKSB7CiAgICAgICAgRUxFTUVOVDoKICAgICAgICBmb3IgbXkgJEVsZW1lbnQgKCBAeyAkUGFyYW17JFVzZX0gfSApIHsKICAgICAgICAgICAgbmV4dCBFTEVNRU5UIGlmICEkRWxlbWVudCB8fCAhJEVsZW1lbnQtPntTZWxlY3RlZFZhbHVlc307CiAgICAgICAgICAgIG15ICRFbGVtZW50TmFtZSA9ICRFbGVtZW50LT57RWxlbWVudH07CiAgICAgICAgICAgIG15ICRWYWx1ZXMgICAgICA9ICRFbGVtZW50LT57U2VsZWN0ZWRWYWx1ZXN9OwoKICAgICAgICAgICAgaWYgKCAkRWxlbWVudE5hbWUgZXEgJ05ld1ZhbHVlcycgKSB7CiAgICAgICAgICAgICAgICBteSAkU3RhdGVMaXN0ID0gJFNlbGYtPntDaGFuZ2VPYmplY3R9LT5DaGFuZ2VQb3NzaWJsZVN0YXRlc0dldCggVXNlcklEID0+IDEgKTsKICAgICAgICAgICAgICAgIElEOgogICAgICAgICAgICAgICAgZm9yIG15ICRJRCAoIEB7JFZhbHVlc30gKSB7CiAgICAgICAgICAgICAgICAgICAgbmV4dCBJRCBpZiAhJElEOwoKICAgICAgICAgICAgICAgICAgICBTVEFURToKICAgICAgICAgICAgICAgICAgICBmb3IgbXkgJFN0YXRlICggQHskU3RhdGVMaXN0fSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCBTVEFURSBpZiAkSUQtPntDb250ZW50fSBuZSAkU3RhdGUtPntLZXl9OwogICAgICAgICAgICAgICAgICAgICAgICAkSUQtPntDb250ZW50fSA9ICRTdGF0ZS0+e1ZhbHVlfTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gXCVQYXJhbTsKfQoKc3ViIEltcG9ydFdyYXBwZXIgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIHdyYXAgdXNlZCBzcGVsbGluZyB0byBpZHMKICAgIGZvciBteSAkVXNlIChxdyhVc2VBc1ZhbHVlU2VyaWVzIFVzZUFzUmVzdHJpY3Rpb24gVXNlQXNYdmFsdWUpKSB7CiAgICAgICAgRUxFTUVOVDoKICAgICAgICBmb3IgbXkgJEVsZW1lbnQgKCBAeyAkUGFyYW17JFVzZX0gfSApIHsKICAgICAgICAgICAgbmV4dCBFTEVNRU5UIGlmICEkRWxlbWVudCB8fCAhJEVsZW1lbnQtPntTZWxlY3RlZFZhbHVlc307CiAgICAgICAgICAgIG15ICRFbGVtZW50TmFtZSA9ICRFbGVtZW50LT57RWxlbWVudH07CiAgICAgICAgICAgIG15ICRWYWx1ZXMgICAgICA9ICRFbGVtZW50LT57U2VsZWN0ZWRWYWx1ZXN9OwoKICAgICAgICAgICAgaWYgKCAkRWxlbWVudE5hbWUgZXEgJ05ld1ZhbHVlcycgKSB7CiAgICAgICAgICAgICAgICBJRDoKICAgICAgICAgICAgICAgIGZvciBteSAkSUQgKCBAeyRWYWx1ZXN9ICkgewogICAgICAgICAgICAgICAgICAgIG5leHQgSUQgaWYgISRJRDsKCiAgICAgICAgICAgICAgICAgICAgbXkgJFN0YXRlSUQgPSAkU2VsZi0+e0NoYW5nZU9iamVjdH0tPkNoYW5nZVN0YXRlTG9va3VwKAogICAgICAgICAgICAgICAgICAgICAgICBDaGFuZ2VTdGF0ZSA9PiAkSUQtPntDb250ZW50fSwKICAgICAgICAgICAgICAgICAgICAgICAgQ2FjaGUgICAgICAgPT4gMSwKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIGlmICgkU3RhdGVJRCkgewogICAgICAgICAgICAgICAgICAgICAgICAkSUQtPntDb250ZW50fSA9ICRTdGF0ZUlEOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIkltcG9ydDogQ2FuJyBmaW5kIHN0YXRlICRJRC0+e0NvbnRlbnR9ISIKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgJElEID0gdW5kZWY7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIFwlUGFyYW07Cn0KCjE7Cg==</File>
        <File Location="Kernel/System/Stats/Dynamic/ITSMChangeManagementRfcRequester.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3RhdHMvRHluYW1pYy9JVFNNQ2hhbmdlTWFuYWdlbWVudFJmY1JlcXVlc3Rlci5wbSAtIGFsbCBhZHZpY2UgZnVuY3Rpb25zCiMgQ29weXJpZ2h0IChDKSAyMDAzLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgJElkOiBJVFNNQ2hhbmdlTWFuYWdlbWVudFJmY1JlcXVlc3Rlci5wbSx2IDEuNSAyMDEwLzAyLzIyIDEwOjA5OjEwIHJlYiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6U3RhdHM6OkR5bmFtaWM6OklUU01DaGFuZ2VNYW5hZ2VtZW50UmZjUmVxdWVzdGVyOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXI7CnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNoYW5nZTsKdXNlIEtlcm5lbDo6U3lzdGVtOjpUaWNrZXQ7CnVzZSBLZXJuZWw6OlN5c3RlbTo6VXNlcjsKCnVzZSB2YXJzIHF3KCRWRVJTSU9OKTsKJFZFUlNJT04gPSBxdygkUmV2aXNpb246IDEuNSAkKSBbMV07CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhEQk9iamVjdCBDb25maWdPYmplY3QgTG9nT2JqZWN0IFVzZXJPYmplY3QgVGltZU9iamVjdCBNYWluT2JqZWN0IEVuY29kZU9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgIyBjcmVhdGUgbmVlZGVkIG9iamVjdHMKICAgICRTZWxmLT57Q3VzdG9tZXJVc2VyT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXItPm5ldyggJXskU2VsZn0gKTsKICAgICRTZWxmLT57Q2hhbmdlT2JqZWN0fSAgICAgICA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ2hhbmdlLT5uZXcoICV7JFNlbGZ9ICk7CiAgICAkU2VsZi0+e1RpY2tldE9iamVjdH0gICAgICAgPSBLZXJuZWw6OlN5c3RlbTo6VGlja2V0LT5uZXcoICV7JFNlbGZ9ICk7CiAgICAkU2VsZi0+e1VzZXJPYmplY3R9ICAgICAgICAgPSBLZXJuZWw6OlN5c3RlbTo6VXNlci0+bmV3KCAleyRTZWxmfSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIEdldE9iamVjdE5hbWUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gJ0lUU01DaGFuZ2VNYW5hZ2VtZW50UmZjUmVxdWVzdGVyJzsKfQoKc3ViIEdldE9iamVjdEF0dHJpYnV0ZXMgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkUmZDVHlwZXMgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnSVRTTUNoYW5nZTo6QWRkQ2hhbmdlTGlua1RpY2tldFR5cGVzJyk7CgogICAgIyBnZXQgYWxsIHJmY3MKICAgIG15IEBUaWNrZXRJRHMgPSAkU2VsZi0+e1RpY2tldE9iamVjdH0tPlRpY2tldFNlYXJjaCgKICAgICAgICBVc2VySUQgICAgID0+IDEsCiAgICAgICAgUGVybWlzc2lvbiA9PiAncm8nLAogICAgICAgIExpbWl0ICAgICAgPT4gMTAwXzAwMF8wMDAsCiAgICAgICAgVHlwZXMgICAgICA9PiAkUmZDVHlwZXMsCiAgICAgICAgUmVzdWx0ICAgICA9PiAnQVJSQVknLAogICAgKTsKCiAgICAjIGdldCBhbGwgcmVxdWVzdGVyCiAgICBteSAlUmVxdWVzdGVyOwoKICAgIFRJQ0tFVElEOgogICAgZm9yIG15ICRUaWNrZXRJRCAoQFRpY2tldElEcykgewogICAgICAgIG15ICVUaWNrZXQgPSAkU2VsZi0+e1RpY2tldE9iamVjdH0tPlRpY2tldEdldCgKICAgICAgICAgICAgVGlja2V0SUQgPT4gJFRpY2tldElELAogICAgICAgICAgICBVc2VySUQgICA9PiAxLAogICAgICAgICk7CgogICAgICAgIG5leHQgVElDS0VUSUQgaWYgISVUaWNrZXQ7CgogICAgICAgIGlmICggJFRpY2tldHtDdXN0b21lclVzZXJJRH0gKSB7CiAgICAgICAgICAgIG15ICRDdXN0b21lclVzZXJJRCA9ICRUaWNrZXR7Q3VzdG9tZXJVc2VySUR9OwoKICAgICAgICAgICAgbmV4dCBUSUNLRVRJRCBpZiAkUmVxdWVzdGVyeyJjdXN0b21lcl8kQ3VzdG9tZXJVc2VySUQifTsKCiAgICAgICAgICAgIG15ICVDdXN0b21lclVzZXIgPSAkU2VsZi0+e0N1c3RvbWVyVXNlck9iamVjdH0tPkN1c3RvbWVyVXNlckRhdGFHZXQoCiAgICAgICAgICAgICAgICBVc2VyID0+ICRDdXN0b21lclVzZXJJRCwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICRSZXF1ZXN0ZXJ7ImN1c3RvbWVyXyRDdXN0b21lclVzZXJJRCJ9ID0gc3ByaW50ZiAiJXMgKCVzICVzKSIsCiAgICAgICAgICAgICAgICAkQ3VzdG9tZXJVc2Vye1VzZXJMb2dpbn0sCiAgICAgICAgICAgICAgICAkQ3VzdG9tZXJVc2Vye1VzZXJGaXJzdG5hbWV9LAogICAgICAgICAgICAgICAgJEN1c3RvbWVyVXNlcntVc2VyTGFzdG5hbWV9OwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgbXkgJE93bmVySUQgPSAkVGlja2V0e093bmVySUR9OwoKICAgICAgICAgICAgbmV4dCBUSUNLRVRJRCBpZiAkUmVxdWVzdGVyeyJhZ2VudF8kT3duZXJJRCJ9OwoKICAgICAgICAgICAgbXkgJVVzZXIgPSAkU2VsZi0+e1VzZXJPYmplY3R9LT5HZXRVc2VyRGF0YSgKICAgICAgICAgICAgICAgIFVzZXJJRCA9PiAkT3duZXJJRCwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICRSZXF1ZXN0ZXJ7ImFnZW50XyRPd25lcklEIn0gPSBzcHJpbnRmICIlcyAoJXMgJXMpIiwKICAgICAgICAgICAgICAgICRVc2Vye1VzZXJMb2dpbn0sCiAgICAgICAgICAgICAgICAkVXNlcntVc2VyRmlyc3RuYW1lfSwKICAgICAgICAgICAgICAgICRVc2Vye1VzZXJMYXN0bmFtZX07CiAgICAgICAgfQogICAgfQoKICAgICMgZ2V0IGN1cnJlbnQgdGltZSB0byBmaXggYnVnIzQ4NzAKICAgIG15ICRUaW1lU3RhbXAgPSAkU2VsZi0+e1RpbWVPYmplY3R9LT5DdXJyZW50VGltZXN0YW1wKCk7CiAgICBteSAoJERhdGUpID0gc3BsaXQgL1xzKy8sICRUaW1lU3RhbXA7CiAgICBteSAkVG9kYXkgPSBzcHJpbnRmICIlcyAyMzo1OTo1OSIsICREYXRlOwoKICAgIG15IEBPYmplY3RBdHRyaWJ1dGVzID0gKAogICAgICAgIHsKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICA9PiAnUmVxdWVzdGVyJywKICAgICAgICAgICAgVXNlQXNYdmFsdWUgICAgICA9PiAwLAogICAgICAgICAgICBVc2VBc1ZhbHVlU2VyaWVzID0+IDEsCiAgICAgICAgICAgIFVzZUFzUmVzdHJpY3Rpb24gPT4gMCwKICAgICAgICAgICAgU2VsZWN0ZWRWYWx1ZXMgICA9PiBbIGtleXMgJVJlcXVlc3RlciBdLAogICAgICAgICAgICBFbGVtZW50ICAgICAgICAgID0+ICdSZXF1ZXN0ZXInLAogICAgICAgICAgICBCbG9jayAgICAgICAgICAgID0+ICdNdWx0aVNlbGVjdEZpZWxkJywKICAgICAgICAgICAgVmFsdWVzICAgICAgICAgICA9PiBcJVJlcXVlc3RlciwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICA9PiAnVGltZXBlcmlvZCcsCiAgICAgICAgICAgIFVzZUFzWHZhbHVlICAgICAgPT4gMSwKICAgICAgICAgICAgVXNlQXNWYWx1ZVNlcmllcyA9PiAwLAogICAgICAgICAgICBVc2VBc1Jlc3RyaWN0aW9uID0+IDAsCiAgICAgICAgICAgIEVsZW1lbnQgICAgICAgICAgPT4gJ1RpbWVQZXJpb2QnLAogICAgICAgICAgICBUaW1lUGVyaW9kRm9ybWF0ID0+ICdEYXRlSW5wdXRGb3JtYXQnLCAgICAjICdEYXRlSW5wdXRGb3JtYXRMb25nJywKICAgICAgICAgICAgQmxvY2sgICAgICAgICAgICA9PiAnVGltZScsCiAgICAgICAgICAgIFRpbWVTdG9wICAgICAgICAgPT4gJFRvZGF5LAogICAgICAgICAgICBWYWx1ZXMgICAgICAgICAgID0+IHsKICAgICAgICAgICAgICAgIFRpbWVTdGFydCA9PiAnVGlja2V0Q3JlYXRlVGltZU5ld2VyRGF0ZScsCiAgICAgICAgICAgICAgICBUaW1lU3RvcCAgPT4gJ1RpY2tldENyZWF0ZVRpbWVPbGRlckRhdGUnLAogICAgICAgICAgICB9LAogICAgICAgIH0sCiAgICApOwoKICAgIHJldHVybiBAT2JqZWN0QXR0cmlidXRlczsKfQoKc3ViIEdldFN0YXRFbGVtZW50IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayB3aGF0IHR5cGUgb2YgcmVxdWVzdGVyIHdlIGhhdmUKICAgICMgdGlja2V0IHNlYXJjaCBjcml0ZXJpYSBkaWZmZXIgZm9yIGFnZW50cyBhbmQgY3VzdG9tZXJzCiAgICBteSAoICRUeXBlLCAkSUQgKSA9IHNwbGl0IC9fLywgJFBhcmFte1JlcXVlc3Rlcn0tPlswXTsKICAgIG15ICRLZXkgPSAkVHlwZSBlcSAnYWdlbnQnID8gJ093bmVySURzJyA6ICdDdXN0b21lclVzZXJMb2dpbic7CiAgICAkUGFyYW17JEtleX0gPSBbJElEXTsKCiAgICAjIGdldCB0aWNrZXQgdHlwZXMgdGhhdCBhcmUgaGFuZGxlZCBhcyBSZkNzCiAgICBteSAkUmZDVHlwZXMgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnSVRTTUNoYW5nZTo6QWRkQ2hhbmdlTGlua1RpY2tldFR5cGVzJyk7CgogICAgIyBzZWFyY2ggdGlja2V0cwogICAgbXkgQFRpY2tldElEcyA9ICRTZWxmLT57VGlja2V0T2JqZWN0fS0+VGlja2V0U2VhcmNoKAogICAgICAgIFVzZXJJRCAgICAgPT4gMSwKICAgICAgICBSZXN1bHQgICAgID0+ICdBUlJBWScsCiAgICAgICAgUGVybWlzc2lvbiA9PiAncm8nLAogICAgICAgIExpbWl0ICAgICAgPT4gMTAwXzAwMF8wMDAsCiAgICAgICAgVHlwZXMgICAgICA9PiAkUmZDVHlwZXMsCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICAjIGlmIHRoaXMgd2FudHMgdGhlIG51bWJlciBvZiBSZkNzIGZvciBhbiBhZ2VudCB3ZSBoYXZlIHRvIGNoZWNrCiAgICAjIHdoZXRoZXIgYSBjdXN0b21lciBpZCBpcyBpbiB0aGUgdGlja2V0LiBUaGUgb3duZXIgaXMgKk5PVCogdGhlCiAgICAjIHJlcXVlc3RlciB0aGVuLgogICAgaWYgKCAkVHlwZSBlcSAnYWdlbnQnICkgewogICAgICAgIG15ICRDb3VudCA9IDA7CgogICAgICAgIFRJQ0tFVElEOgogICAgICAgIGZvciBteSAkVGlja2V0SUQgKEBUaWNrZXRJRHMpIHsKICAgICAgICAgICAgbXkgJVRpY2tldCA9ICRTZWxmLT57VGlja2V0T2JqZWN0fS0+VGlja2V0R2V0KAogICAgICAgICAgICAgICAgVGlja2V0SUQgPT4gJFRpY2tldElELAogICAgICAgICAgICApOwoKICAgICAgICAgICAgbmV4dCBUSUNLRVRJRCBpZiAhJVRpY2tldDsKICAgICAgICAgICAgbmV4dCBUSUNLRVRJRCBpZiAkVGlja2V0e0N1c3RvbWVyVXNlcklEfTsKCiAgICAgICAgICAgICRDb3VudCsrOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRDb3VudDsKICAgIH0KCiAgICByZXR1cm4gc2NhbGFyIEBUaWNrZXRJRHM7Cn0KCnN1YiBFeHBvcnRXcmFwcGVyIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIFwlUGFyYW07Cn0KCnN1YiBJbXBvcnRXcmFwcGVyIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIFwlUGFyYW07Cn0KCjE7Cg==</File>
        <File Location="Kernel/System/Ticket/Acl/RestrictTicketTypes.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vVGlja2V0L0FjbC9SZXN0cmljdFRpY2tldFR5cGVzLnBtIC0gYWNsIG1vZHVsZQojIC0gcmVzdHJpY3QgdGhlIHVzYWdlIG9mIHRoZSB0aWNrZXQgdHlwZXMgYXMgZGVmaW5lZCBpbgojIC0gc3lzY29uZmlnIG9wdGlvbiAnSVRTTUNoYW5nZTo6QWRkQ2hhbmdlTGlua1RpY2tldFR5cGVzJyB0byBjZXJ0YWluIGdyb3VwcyAtCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMub3JnLwojIC0tCiMgJElkOiBSZXN0cmljdFRpY2tldFR5cGVzLnBtLHYgMS42IDIwMTAvMDUvMjUgMTM6NDc6NTEgdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlRpY2tldDo6QWNsOjpSZXN0cmljdFRpY2tldFR5cGVzOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS42ICQpIFsxXTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBnZXQgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhDb25maWdPYmplY3QgREJPYmplY3QgVGlja2V0T2JqZWN0IExvZ09iamVjdCBVc2VyT2JqZWN0IE1haW5PYmplY3QgVGltZU9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KENvbmZpZyBBY2wpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRBcmd1bWVudH0gKSB7CiAgICAgICAgICAgICRTZWxmLT57TG9nT2JqZWN0fS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBcmd1bWVudCEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgICMgY2hlY2sgaWYgdXNlciBpZCBpcyBnaXZlbgogICAgcmV0dXJuIDEgaWYgISRQYXJhbXtVc2VySUR9OwoKICAgICMgZ2V0IGFuZCBjaGVjayB0aGUgbGlzdCBvZiByZWxldmFudCB0aWNrZXQgdHlwZXMKICAgIG15ICRBZGRDaGFuZ2VMaW5rVGlja2V0VHlwZXMKICAgICAgICA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdJVFNNQ2hhbmdlOjpBZGRDaGFuZ2VMaW5rVGlja2V0VHlwZXMnKTsKCiAgICByZXR1cm4gMSBpZiAhJEFkZENoYW5nZUxpbmtUaWNrZXRUeXBlczsKICAgIHJldHVybiAxIGlmIHJlZiAkQWRkQ2hhbmdlTGlua1RpY2tldFR5cGVzIG5lICdBUlJBWSc7CiAgICByZXR1cm4gMSBpZiAhQHskQWRkQ2hhbmdlTGlua1RpY2tldFR5cGVzfTsKCiAgICAjIGNyZWF0ZSBhIGxvb2t1cCBoYXNoIGZvciB0aGUgcmVsZXZhbnQgdGlja2V0IHR5cGVzCiAgICBteSAlSXNSZWxldmFudCA9IG1hcCB7ICRfID0+IDEgfSBAeyRBZGRDaGFuZ2VMaW5rVGlja2V0VHlwZXN9OwoKICAgICMgaWYgdGlja2V0IGlkIHdhcyBnaXZlbgogICAgaWYgKCAkUGFyYW17VGlja2V0SUR9ICkgewoKICAgICAgICAjIGdldCB0aWNrZXQgZGF0YQogICAgICAgIG15ICVUaWNrZXQgPSAkU2VsZi0+e1RpY2tldE9iamVjdH0tPlRpY2tldEdldCgKICAgICAgICAgICAgVGlja2V0SUQgPT4gJFBhcmFte1RpY2tldElEfSwKICAgICAgICApOwoKICAgICAgICAjIGNoZWNrIGlmIHRpY2tldCBleGlzdHMKICAgICAgICByZXR1cm4gMSBpZiAhJVRpY2tldDsKCiAgICAgICAgIyBkb24ndCByZW1vdmUgcmVsZXZhbnQgdHlwZXMgZnJvbSB0eXBlIGxpc3QKICAgICAgICAjIGlmIHRoZSB0aWNrZXQgdHlwZSBpcyBhbHJlYWR5IG9uZSBvZiB0aGVzZSB0eXBlcwogICAgICAgIHJldHVybiAxIGlmICRJc1JlbGV2YW50eyAkVGlja2V0e1R5cGV9IH07CiAgICB9CgogICAgIyBnZXQgdXNlciBncm91cHMsIHdoZXJlIHRoZSB1c2VyIGhhcyB0aGUgcncgcHJpdmlsZWdlCiAgICBteSAlR3JvdXBzID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0sCiAgICAgICAgVHlwZSAgID0+ICdydycsCiAgICAgICAgUmVzdWx0ID0+ICdIQVNIJywKICAgICAgICBDYWNoZWQgPT4gMSwKICAgICk7CgogICAgIyBnZXQgYW5kIGNoZWNrIHRoZSBsaXN0IG9mIGdyb3VwcyB3aG8gYXJlIGFsbG93ZWQgdG8gdXNlIHRoZSBBZGRDaGFuZ2VMaW5rVGlja2V0VHlwZXMKICAgIG15ICRSZXN0cmljdFRpY2tldFR5cGVzR3JvdXBzCiAgICAgICAgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnSVRTTUNoYW5nZTo6UmVzdHJpY3RUaWNrZXRUeXBlczo6R3JvdXBzJyk7CgogICAgcmV0dXJuIDEgaWYgISRSZXN0cmljdFRpY2tldFR5cGVzR3JvdXBzOwogICAgcmV0dXJuIDEgaWYgcmVmICRSZXN0cmljdFRpY2tldFR5cGVzR3JvdXBzIG5lICdBUlJBWSc7CiAgICByZXR1cm4gMSBpZiAhQHskUmVzdHJpY3RUaWNrZXRUeXBlc0dyb3Vwc307CgogICAgIyBjaGVjayBpZiB0aGUgdXNlciBpcyBpbiBvbmUgb2YgdGhlc2UgZ3JvdXBzCiAgICBmb3IgbXkgJEdyb3VwICggQHskUmVzdHJpY3RUaWNrZXRUeXBlc0dyb3Vwc30gKSB7CgogICAgICAgICMgZ2V0IHRoZSBncm91cCBpZAogICAgICAgIG15ICRHcm91cElEID0gJFNlbGYtPntHcm91cE9iamVjdH0tPkdyb3VwTG9va3VwKAogICAgICAgICAgICBHcm91cCA9PiAkR3JvdXAsCiAgICAgICAgKTsKCiAgICAgICAgIyBkbyBub3QgcmVtb3ZlIHRoZSB0aWNrZXQgdHlwZSAnUmZDJyBpZiB1c2VyIGlzIGluIG9uZSBvZiB0aGUgZ3JvdXBzCiAgICAgICAgcmV0dXJuIDEgaWYgJEdyb3Vwc3skR3JvdXBJRH07CiAgICB9CgogICAgIyBnZW5lcmF0ZSBhY2wKICAgICRQYXJhbXtBY2x9LT57UmVzdHJpY3RUaWNrZXRUeXBlc30gPSB7CgogICAgICAgICMgcmVtb3ZlIHRpY2tldCB0eXBlcyBsaXN0ZWQgaW4gc3lzY29uZmlnIG9wdGlvbiAnSVRTTUNoYW5nZTo6QWRkQ2hhbmdlTGlua1RpY2tldFR5cGVzJwogICAgICAgICMgZnJvbSB0eXBlIGRyb3Bkb3duIGxpc3QgaW4gYWxsIGZyb250ZW5kIG1vZHVsZXMKICAgICAgICBQb3NzaWJsZU5vdCA9PiB7CiAgICAgICAgICAgIFRpY2tldCA9PiB7CiAgICAgICAgICAgICAgICBUeXBlID0+ICRBZGRDaGFuZ2VMaW5rVGlja2V0VHlwZXMsCiAgICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgIH07CgogICAgcmV0dXJuIDE7Cn0KCjE7Cg==</File>
        <File Location="scripts/test/ITSMChange.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/ITSMCondition.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/ITSMStateMachine.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/ITSMTemplate.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/ITSMWorkOrder.t" Permission="644" Encode="Base64"></File>
        <File Location="var/cron/itsmchange_check.dist" Permission="644" Encode="Base64">IyAtLQojIGNyb24vaXRzbWNoYW5nZV9jaGVjayAtIGl0c20gY2hhbmdlIGNoZWNrIGNyb24gb2YgdGhlIE9UUlMKIyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkSWQ6IGl0c21jaGFuZ2VfY2hlY2suZGlzdCx2IDEuMSAyMDEwLzAxLzI2IDE1OjU1OjMxIHJlYiBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKIyBjaGVjayBldmVyeSAxMjAgbWluIHRoZSBjaGFuZ2VzCjQ1ICovMiAqICogKiAgICAkSE9NRS9iaW4vb3Rycy5JVFNNQ2hhbmdlc0NoZWNrLnBsID4+IC9kZXYvbnVsbAo=</File>
        <File Location="var/httpd/htdocs/images/Standard/itsm_change.png" Permission="644" Encode="Base64">iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAF80lEQVR42mIUFhaWamtrm6IDBH9+//rNAAX/cTMgPCCXkZGB8d///8wzZsxcvmrVqiag8D+YPEAAMWRlZU34TyH4/Pnzf3l5+SRkiwECiEVBQV4RxEhu3sXw8Jcgg5g4LwM3NxsDFw8HAycnKwMLKyvDP6Drfv38zfDjxy+G799+Mnz78pPh+4/fDM8fv2VojNFm8DATY5CQkFB9+PAh3GCAAFSQywqAIBQFJ7S6hUa7/v/LonUEvaSHhkm7zn6Y4egk/PLn2NBvBleUmCCYKKhT0daKzuZU8nD4m8VrXNAM487kLOuVJTrwuyHtFUAszEzMYAY7KxMDw9/fDP9+MTL8+s7A8J3xP4OWAheDtSoXgzA3SA0bw79/nAy//vEx3H7yhWHd0Z8MXz4wMPz8+Z3h6ydGBiYmJpQ4AAggFiZmiMD799+A+C8DFwfQBUAhXXVBBmkxLoZ3f5kYvnxnZGBjAQYHMGp//WVguP/xL4OiLD/DlWtvGD5//s0A8jQjIyOKwQABxMQCdfEvYPi9v/Gc4eG9twyCPKwMYoKsDI+efmZ49Pwrw9tPvxj2nXzF8P3PP4ZL198wXLvxjmHr3scMb87dBYbhfYa/f/4yMDMzoxgMEEAsTCwQARY2NnCK+v3zJ8PXD18ZhNkZGfhFORjuPP/CcPrsc4br9z4w3LzxmuEXMOxP7r3AoM91gaEl+DWDJYc4MNwNGBiZmVHSI0AAsTAxQoKCHWgwuzQ/Q3m8NsPJG+8Zjp5+wcDHw8bw9ecfBnM1fqCr/jEoi7Mx6HzdydCXsI3BygQYLuImDPdO/Gb4dPUww/8/QGcjAYAAApoLCRtOLjagq1kYnn/5x6CpKcrAK8zN8PTTXwYhUR6GT/+YGTQ0JRikBBkY7HiWMFh53gPG5QsGhmenGJRk3jJo/j7BkKzP4cnBwCAPMxgggJhgLmYAWvAXGN7vvwDT51tgeH/7xyAnx8/w6iswsTCzMbz7/Ifh/Ht+hqnfehn2bxVhACedz48Yft3eycD8cRtDfICy6dZiu41Ak6RAxgEEEHNgYGCUoaGh+rMPfxgE+LkYeNmYgGmXlUGcn5WBC8gW5Qb66PsnBj6mHwxCwGT3nUWU4cEvcwaV75cZ/n9+zXCUs42B9fsbBoGXexgU5WUlfr98I3D48Y9NAAHE8ujRoycgG/J95eDh8+/fP2D6/MHwj4WT4e2eaQzczGcYPrIrMzDrBjOwcPIx/GKQYfj6po3h4+WVDDLqOgzPf+j8PTYv5H2k1kWRdEO20K6jDN0AAQBZAKb/A87OzugmJiZD/fz8CuHg4PbX2Nju6ennAAIBAQfx9fsA/NGpAB0U2gD4DjAA5/gOAOru8P7X087s7vDy9vMKIv/z8e7+qaysxpKato5tOgZGEwT8C6zL+MkCiAVYgJwLCQmxBzpUHIgZHRwcwtPT0+MkJKR4uTg5Gb5xCTEwfPzMwPz9LgO7rAXDb2Duvf/g8aNZ8xfOfnj75jFwlgQKAfHvF9//t8jzskiIczPIAAQQSqJubW2dDCuxPn369P/zt9//n5/e/v/vJLn//zeF/b+4qOH/h29/wPIX10z6rqerFQRPt0CHncnkfPs+l+u/MS9DKUAAsSCnaWDRZwLjsLOzA0uw7wz/pAwYXv6WY5D8codB+e83hpcH5jB8F1dh0Bb6yJFoKZNZePnaZpBrgR75aDX9eyiwJOIBsi8CBBByPvy3bt2689+/fzeSkZGR5ubmBmZTJgYufiGGnxxyDOwXFzNw8P9jEPz9huH789sMPEoKDBYmckp/nj4RO3zrzRZQEQcqRoAG3wSyPwIEEGrJAQEiQOBvYmJiLwcEwBpGkImDh+XPmaV/0hRuqyjpyHIxCKkwMHwDJfDXDAxKrgzljeunde1/lg8rP0EAIIAIIVDEAPMbgygQA1M2g32iGsPSa9nsH/5PFv3/v1Po/8VU7h9ROlygjCGNrBEggMhBTHNdGQ4cTeD47iPFsBTIdwJiVnRFAAFEDmKRZGCIAtLmoJyLSxFAgAEAU+1ynr9hxoQAAAAASUVORK5CYII=</File>
        <File Location="var/httpd/htdocs/images/Standard/itsm_change_template.png" Permission="644" Encode="Base64">iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAFUklEQVR42mJgIAII6IZ5S/rN62DgkFRhIBIABBAzIQXipnHBGh6tedfuyH5kUQhzYeX+L/T31dn7QKmf+PQBBBBegwW0fD2MQieVXLr75z0bCzvn9xu/H/z946zCrevv+e//iz//P969g0svQADhNJhF3EjXMW1R45UHfz9r6sh7yMrx6QuIiqh/e/vlzeeb7I/+C/uZ8Wpqmv16vPsyw/+/39D1AwQQdoMZBUVccxd1fPgrxCalIGvPysrA9fMrAwMzAyOPsDSfFo+UkNLP9z/ff/6gxs6q5Gr+78/zPwxf791DNgIggLAZzO5cvKZbUFZHhktQyoSdg4H/BzA0/wLxH6C7fn0H2svOyMcvzavBysknxcUgxjFrRkq2oLq5+bnDJy4x/H3/BmQIQAAxIpvIqeRuZxNclKxjbKLz+Z+gDAsLo9iztwwM34CG/foCxB8gBv/6w8DwHWjRj98MDHNKGRg8DCH6t139/SY8wDf5y52dmwACiAVmqJJDTlj1hMlLOFkYWL/9Yvj35C0D06PXDAz//kMV/ANiIJsJ6pqPQNcXhSIMBQETFVYRbkEZfaAbNgEEEEgdA7eyu9PsuZNnm8sBDQWGpQgPA9M/oKv+/YPqABrI+B9i4G+g2FOgy/0dGBgqw4AC7y4CiR8M74GuD8tfuu/l6bkzQFoAAoiFgU9DbcHaHSudlBj4Vl5gYODjYWD48A3i0n9QV/77C/T6DwaG90CnvPjIwOCky8AwIfgaA8Pz68AY/c/w+/5NhvKZny4cnJkWBdTxGmQwQAAxMXz7+OvPt0+/zzwHupSPgUFWCGjQL6AM0MV/gfQPoCWfPjEwvP3MwPAE6FIPhTsMC0NXM/DwPmBgkNRjYBDTYGBVNGNItrjDI8nxXxIWLAABxMTw5/mD7YeuXXkItEdJFJSkgI4EuvAvEIOCA0T/AdK/gZZkaW1nWBi9hoFfkQOY0DmBXrvO8P/RKWAefMBgHhChsn153gYBFgZtkMEAAcQs69JYs2JqdIqmOAPDPmBwfQZ6lxkYpc/eAV0JdOk3YOx/AIY7P8NvhiVJexg4NdSBYQJMUT+BYfL3B8Pvh+cYPl47wfDl6T0GKVkZATMVbs8te28cAggg5k8fPv65/ZyTR0ZBT9VCj5HlHdCQJy/+M3CyMDK8BgbDy3eQFNHg95lBR/wSMKYFgQEOFPz8FGjrGwbmP78YOKWkGLg5GBlYGL8xKGuJCu7bc/EBQAAxMbw7f2zz5PgIVyNNp9jCLXtAadRUn5GBERgmqgJ/GeRFGBgK3BgYPA1+MPz9BrTpB9BQYK4Bh9nb28BE/Qpo0QtgeAFphg/giPn9h+EfQAAhct7ft4/vnVq+csWaQ5c+/xAR1jdUU2JkZ2LgAcaim/ZvBn52YJi8P8HAzAlMdL+B4cUC1PoHlEveQmgmYMrlAMY+Cw/D/KUndgMEEHqW/svw9cG1q0eXLd28Yfc5Fk5xURFFDaVLz1gY/gGThwbnYaBmoJd+Ag3++xVi2GegwWzAiGTnB2ZdIGblYpiz8OhugADCVbr9///t8c2bx5cvPbJrx+nf/zl5rr+VVWR9tuunlsZPVobfoHz9GeJSUILnACZ+dl4GBh5g+HPxMMybs+8gQAAxElsjMDAp2rIyPGFY32I4wTtC14jhKzDJ/GMFGg7EXMAgEASmVUYehgMbz74Nz1uaChBADKQCoOdlelPVN/4/6/3//+Xg//9v5/3//7Dy/9U1id8j7BXmAZXogtQBBBC5iC3PS2LG/xNh/++sCf+Z6KKwBOhuG2QFAAFECWI0kePM5mVicMUmCRBgAA+o7OKY/o/RAAAAAElFTkSuQmCC</File>
        <File Location="var/packagesetup/ITSMChangeManagement.pm" Permission="644" Encode="Base64"></File>
    </Filelist>
    <DatabaseInstall Type="post">
        <TableCreate Type="post" Name="change_item">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="change_number" Required="true" Size="100" Type="VARCHAR"></Column>
            <Column Name="title" Required="false" Size="250" Type="VARCHAR"></Column>
            <Column Name="description" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="description_plain" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="justification" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="justification_plain" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="change_state_id" Required="true" Type="INTEGER"></Column>
            <Column Name="change_manager_id" Required="false" Type="INTEGER"></Column>
            <Column Name="change_builder_id" Required="true" Type="INTEGER"></Column>
            <Column Name="category_id" Required="true" Type="INTEGER"></Column>
            <Column Name="impact_id" Required="true" Type="INTEGER"></Column>
            <Column Name="priority_id" Required="true" Type="INTEGER"></Column>
            <Column Name="requested_time" Required="false" Type="DATE"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Column Name="change_time" Required="true" Type="DATE"></Column>
            <Column Name="change_by" Required="true" Type="INTEGER"></Column>
            <Unique Name="change_item_change_number">
                                <UniqueColumn Name="change_number"></UniqueColumn>
</Unique>
            <Index Name="change_item_title">
                <IndexColumn Name="title">
                </IndexColumn>
            </Index>
            <Index Name="change_item_description_plain">
                <IndexColumn Name="description_plain" Size="250">
                </IndexColumn>
            </Index>
            <Index Name="change_item_justification_plain">
                <IndexColumn Name="justification_plain" Size="250">
                </IndexColumn>
            </Index>
            <Index Name="change_item_change_state_id">
                <IndexColumn Name="change_state_id">
                </IndexColumn>
            </Index>
            <Index Name="change_item_change_manager_id">
                <IndexColumn Name="change_manager_id">
                </IndexColumn>
            </Index>
            <Index Name="change_item_change_builder_id">
                <IndexColumn Name="change_builder_id">
                </IndexColumn>
            </Index>
            <Index Name="change_item_category_id">
                <IndexColumn Name="category_id">
                </IndexColumn>
            </Index>
            <Index Name="change_item_impact_id">
                <IndexColumn Name="impact_id">
                </IndexColumn>
            </Index>
            <Index Name="change_item_priority_id">
                <IndexColumn Name="priority_id">
                </IndexColumn>
            </Index>
            <Index Name="change_item_create_time">
                <IndexColumn Name="create_time">
                </IndexColumn>
            </Index>
            <Index Name="change_item_requested_time">
                <IndexColumn Name="requested_time">
                </IndexColumn>
            </Index>
            <Index Name="change_item_change_time">
                <IndexColumn Name="change_time">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="general_catalog">
                <Reference Foreign="id" Local="change_state_id">
                </Reference>
                <Reference Foreign="id" Local="category_id">
                </Reference>
                <Reference Foreign="id" Local="impact_id">
                </Reference>
                <Reference Foreign="id" Local="priority_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="change_manager_id">
                </Reference>
                <Reference Foreign="id" Local="change_builder_id">
                </Reference>
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_workorder">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="change_id" Required="true" Type="BIGINT"></Column>
            <Column Name="workorder_number" Required="true" Type="INTEGER"></Column>
            <Column Name="title" Required="false" Size="250" Type="VARCHAR"></Column>
            <Column Name="instruction" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="instruction_plain" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="report" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="report_plain" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="workorder_state_id" Required="true" Type="INTEGER"></Column>
            <Column Name="workorder_type_id" Required="true" Type="INTEGER"></Column>
            <Column Name="workorder_agent_id" Required="false" Type="INTEGER"></Column>
            <Column Default="9999-01-01 00:00:00" Name="planned_start_time" Required="true" Type="DATE"></Column>
            <Column Default="9999-01-01 00:00:00" Name="planned_end_time" Required="true" Type="DATE"></Column>
            <Column Default="9999-01-01 00:00:00" Name="actual_start_time" Required="true" Type="DATE"></Column>
            <Column Default="9999-01-01 00:00:00" Name="actual_end_time" Required="true" Type="DATE"></Column>
            <Column Default="0" Name="planned_effort" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Default="0" Name="accounted_time" Required="true" Size="10,2" Type="DECIMAL"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Column Name="change_time" Required="true" Type="DATE"></Column>
            <Column Name="change_by" Required="true" Type="INTEGER"></Column>
            <Index Name="change_workorder_change_id">
                <IndexColumn Name="change_id">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_title">
                <IndexColumn Name="title">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_instruction_plain">
                <IndexColumn Name="instruction_plain" Size="250">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_report_plain">
                <IndexColumn Name="report_plain" Size="250">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_workorder_state_id">
                <IndexColumn Name="workorder_state_id">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_workorder_type_id">
                <IndexColumn Name="workorder_type_id">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_workorder_agent_id">
                <IndexColumn Name="workorder_agent_id">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_planned_start_time">
                <IndexColumn Name="planned_start_time">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_planned_end_time">
                <IndexColumn Name="planned_end_time">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_actual_start_time">
                <IndexColumn Name="actual_start_time">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_actual_end_time">
                <IndexColumn Name="actual_end_time">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_create_time">
                <IndexColumn Name="create_time">
                </IndexColumn>
            </Index>
            <Index Name="change_workorder_change_time">
                <IndexColumn Name="change_time">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="change_item">
                <Reference Foreign="id" Local="change_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="general_catalog">
                <Reference Foreign="id" Local="workorder_state_id">
                </Reference>
                <Reference Foreign="id" Local="workorder_type_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="workorder_agent_id">
                </Reference>
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_cab">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="change_id" Required="true" Type="BIGINT"></Column>
            <Column Name="user_id" Required="false" Type="INTEGER"></Column>
            <Column Name="customer_user_id" Required="false" Size="250" Type="VARCHAR"></Column>
            <Unique Name="change_cab_unique">
                                <UniqueColumn Name="change_id"></UniqueColumn>
                <UniqueColumn Name="user_id"></UniqueColumn>
                <UniqueColumn Name="customer_user_id"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="change_item">
                <Reference Foreign="id" Local="change_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="user_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_history_type">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="100" Type="VARCHAR"></Column>
            <Column Name="comments" Required="false" Size="250" Type="VARCHAR"></Column>
            <Column Name="valid_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Column Name="change_time" Required="true" Type="DATE"></Column>
            <Column Name="change_by" Required="true" Type="INTEGER"></Column>
            <Unique Name="change_history_type_name">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
            <Index Name="change_history_type_valid_id">
                <IndexColumn Name="valid_id">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="valid">
                <Reference Foreign="id" Local="valid_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_history">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="change_id" Required="true" Type="BIGINT"></Column>
            <Column Name="workorder_id" Required="false" Type="BIGINT"></Column>
            <Column Name="type_id" Required="true" Type="INTEGER"></Column>
            <Column Name="content_new" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="content_old" Required="false" Size="3800" Type="VARCHAR"></Column>
            <Column Name="fieldname" Required="false" Size="250" Type="VARCHAR"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Index Name="change_history_change_id">
                <IndexColumn Name="change_id">
                </IndexColumn>
            </Index>
            <Index Name="change_history_workorder_id">
                <IndexColumn Name="workorder_id">
                </IndexColumn>
            </Index>
            <Index Name="change_history_type_id">
                <IndexColumn Name="type_id">
                </IndexColumn>
            </Index>
            <Index Name="change_history_create_time">
                <IndexColumn Name="create_time">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="change_item">
                <Reference Foreign="id" Local="change_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="change_history_type">
                <Reference Foreign="id" Local="type_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_template_type">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="valid_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Column Name="change_time" Required="true" Type="DATE"></Column>
            <Column Name="change_by" Required="true" Type="INTEGER"></Column>
            <Unique Name="change_template_type_name">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
            <Index Name="change_template_type_valid_id">
                <IndexColumn Name="valid_id">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="valid">
                <Reference Foreign="id" Local="valid_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_template">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="comments" Required="false" Size="250" Type="VARCHAR"></Column>
            <Column Name="content" Required="true" Type="LONGBLOB"></Column>
            <Column Name="type_id" Required="true" Type="INTEGER"></Column>
            <Column Name="valid_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Column Name="change_time" Required="true" Type="DATE"></Column>
            <Column Name="change_by" Required="true" Type="INTEGER"></Column>
            <Unique Name="change_template_name_type_id">
                                <UniqueColumn Name="name"></UniqueColumn>
                <UniqueColumn Name="type_id"></UniqueColumn>
</Unique>
            <Index Name="change_template_valid_id">
                <IndexColumn Name="valid_id">
                </IndexColumn>
            </Index>
            <Index Name="change_template_type_id">
                <IndexColumn Name="type_id">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="valid">
                <Reference Foreign="id" Local="valid_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="change_template_type">
                <Reference Foreign="id" Local="type_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_cip_allocate">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="category_id" Required="true" Type="INTEGER"></Column>
            <Column Name="impact_id" Required="true" Type="INTEGER"></Column>
            <Column Name="priority_id" Required="true" Type="INTEGER"></Column>
            <Column Name="create_time" Required="false" Type="DATE"></Column>
            <Column Name="create_by" Required="false" Type="INTEGER"></Column>
            <Column Name="change_time" Required="false" Type="DATE"></Column>
            <Column Name="change_by" Required="false" Type="INTEGER"></Column>
            <ForeignKey ForeignTable="general_catalog">
                <Reference Foreign="id" Local="category_id">
                </Reference>
                <Reference Foreign="id" Local="impact_id">
                </Reference>
                <Reference Foreign="id" Local="priority_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_state_machine">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="state_id" Required="false" Type="INTEGER"></Column>
            <Column Name="next_state_id" Required="false" Type="INTEGER"></Column>
            <Unique Name="change_state_machine_unique">
                                <UniqueColumn Name="state_id"></UniqueColumn>
                <UniqueColumn Name="next_state_id"></UniqueColumn>
</Unique>
        </TableCreate>
        <TableCreate Type="post" Name="condition_object">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="SMALLINT"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Unique Name="condition_object_name">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
        </TableCreate>
        <TableCreate Type="post" Name="condition_attribute">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="SMALLINT"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Unique Name="condition_attribute_name">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
        </TableCreate>
        <TableCreate Type="post" Name="condition_operator">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="SMALLINT"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Unique Name="condition_operator_name">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
        </TableCreate>
        <TableCreate Type="post" Name="change_condition">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="change_id" Required="true" Type="BIGINT"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="expression_conjunction" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="comments" Required="false" Size="250" Type="VARCHAR"></Column>
            <Column Name="valid_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Column Name="change_time" Required="true" Type="DATE"></Column>
            <Column Name="change_by" Required="true" Type="INTEGER"></Column>
            <Index Name="change_condition_change_id">
                <IndexColumn Name="change_id">
                </IndexColumn>
            </Index>
            <Index Name="change_condition_valid_id">
                <IndexColumn Name="valid_id">
                </IndexColumn>
            </Index>
            <Unique Name="condition_condition_change_id_name_unique">
                                <UniqueColumn Name="change_id"></UniqueColumn>
                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="change_item">
                <Reference Foreign="id" Local="change_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="valid">
                <Reference Foreign="id" Local="valid_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="condition_expression">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="condition_id" Required="true" Type="BIGINT"></Column>
            <Column Name="object_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="attribute_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="operator_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="selector" Required="false" Size="20" Type="VARCHAR"></Column>
            <Column Name="compare_value" Required="false" Size="250" Type="VARCHAR"></Column>
            <Index Name="condition_expression_condition_id">
                <IndexColumn Name="condition_id">
                </IndexColumn>
            </Index>
            <Index Name="condition_expression_object_id">
                <IndexColumn Name="object_id">
                </IndexColumn>
            </Index>
            <Index Name="condition_expression_attribute_id">
                <IndexColumn Name="attribute_id">
                </IndexColumn>
            </Index>
            <Index Name="condition_expression_operator_id">
                <IndexColumn Name="operator_id">
                </IndexColumn>
            </Index>
            <Index Name="condition_expression_selector">
                <IndexColumn Name="selector">
                </IndexColumn>
            </Index>
            <Index Name="condition_expression_compare_value">
                <IndexColumn Name="compare_value">
                </IndexColumn>
            </Index>
            <Unique Name="condition_expression_unique">
                                <UniqueColumn Name="condition_id"></UniqueColumn>
                <UniqueColumn Name="object_id"></UniqueColumn>
                <UniqueColumn Name="attribute_id"></UniqueColumn>
                <UniqueColumn Name="operator_id"></UniqueColumn>
                <UniqueColumn Name="selector"></UniqueColumn>
                <UniqueColumn Name="compare_value"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="change_condition">
                <Reference Foreign="id" Local="condition_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="condition_object">
                <Reference Foreign="id" Local="object_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="condition_attribute">
                <Reference Foreign="id" Local="attribute_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="condition_operator">
                <Reference Foreign="id" Local="operator_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="condition_action">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="condition_id" Required="true" Type="BIGINT"></Column>
            <Column Name="action_number" Required="true" Type="INTEGER"></Column>
            <Column Name="object_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="attribute_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="operator_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="selector" Required="false" Size="20" Type="VARCHAR"></Column>
            <Column Name="action_value" Required="false" Size="250" Type="VARCHAR"></Column>
            <Index Name="condition_action_condition_id">
                <IndexColumn Name="condition_id">
                </IndexColumn>
            </Index>
            <Index Name="condition_action_action_number">
                <IndexColumn Name="action_number">
                </IndexColumn>
            </Index>
            <Index Name="condition_action_object_id">
                <IndexColumn Name="object_id">
                </IndexColumn>
            </Index>
            <Index Name="condition_action_attribute_id">
                <IndexColumn Name="attribute_id">
                </IndexColumn>
            </Index>
            <Index Name="condition_action_operator_id">
                <IndexColumn Name="operator_id">
                </IndexColumn>
            </Index>
            <Index Name="condition_action_selector">
                <IndexColumn Name="selector">
                </IndexColumn>
            </Index>
            <Index Name="condition_action_action_value">
                <IndexColumn Name="action_value">
                </IndexColumn>
            </Index>
            <Unique Name="condition_action_unique">
                                <UniqueColumn Name="condition_id"></UniqueColumn>
                <UniqueColumn Name="object_id"></UniqueColumn>
                <UniqueColumn Name="attribute_id"></UniqueColumn>
                <UniqueColumn Name="operator_id"></UniqueColumn>
                <UniqueColumn Name="selector"></UniqueColumn>
                <UniqueColumn Name="action_value"></UniqueColumn>
</Unique>
            <Unique Name="condition_action_number_unique">
                                <UniqueColumn Name="condition_id"></UniqueColumn>
                <UniqueColumn Name="action_number"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="change_condition">
                <Reference Foreign="id" Local="condition_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="condition_object">
                <Reference Foreign="id" Local="object_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="condition_attribute">
                <Reference Foreign="id" Local="attribute_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="condition_operator">
                <Reference Foreign="id" Local="operator_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_notification">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="item_attribute" Required="false" Size="250" Type="VARCHAR"></Column>
            <Column Name="event_id" Required="true" Type="INTEGER"></Column>
            <Column Name="valid_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="comments" Required="false" Size="250" Type="VARCHAR"></Column>
            <Column Name="notification_rule" Required="false" Size="250" Type="VARCHAR"></Column>
            <Index Name="change_notification_event_id">
                <IndexColumn Name="event_id">
                </IndexColumn>
            </Index>
            <Index Name="change_notification_valid_id">
                <IndexColumn Name="valid_id">
                </IndexColumn>
            </Index>
            <Index Name="change_notification_event_valid_id">
                <IndexColumn Name="event_id">
                </IndexColumn>
                <IndexColumn Name="valid_id">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="change_history_type">
                <Reference Foreign="id" Local="event_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="valid">
                <Reference Foreign="id" Local="valid_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="change_notification_grps">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
        </TableCreate>
        <TableCreate Type="post" Name="change_notification_rec">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="notification_id" Required="true" Type="BIGINT"></Column>
            <Column Name="group_id" Required="true" Type="BIGINT"></Column>
            <Index Name="change_notification_rec_group_id">
                <IndexColumn Name="group_id">
                </IndexColumn>
            </Index>
            <Index Name="change_notification_rec_notification_id">
                <IndexColumn Name="notification_id">
                </IndexColumn>
            </Index>
            <Index Name="change_notification_rec_group_notification">
                <IndexColumn Name="group_id">
                </IndexColumn>
                <IndexColumn Name="notification_id">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="change_notification">
                <Reference Foreign="id" Local="notification_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="change_notification_grps">
                <Reference Foreign="id" Local="group_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Category</Data>
            <Data Key="name" Type="Quote">1 very low</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Category</Data>
            <Data Key="name" Type="Quote">2 low</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Category</Data>
            <Data Key="name" Type="Quote">3 normal</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Category</Data>
            <Data Key="name" Type="Quote">4 high</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Category</Data>
            <Data Key="name" Type="Quote">5 very high</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Impact</Data>
            <Data Key="name" Type="Quote">1 very low</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Impact</Data>
            <Data Key="name" Type="Quote">2 low</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Impact</Data>
            <Data Key="name" Type="Quote">3 normal</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Impact</Data>
            <Data Key="name" Type="Quote">4 high</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Impact</Data>
            <Data Key="name" Type="Quote">5 very high</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Priority</Data>
            <Data Key="name" Type="Quote">1 very low</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Priority</Data>
            <Data Key="name" Type="Quote">2 low</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Priority</Data>
            <Data Key="name" Type="Quote">3 normal</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Priority</Data>
            <Data Key="name" Type="Quote">4 high</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Priority</Data>
            <Data Key="name" Type="Quote">5 very high</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">requested</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">pending approval</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">rejected</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">approved</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">in progress</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">pending pir</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">successful</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">failed</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">canceled</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::Change::State</Data>
            <Data Key="name" Type="Quote">retracted</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::State</Data>
            <Data Key="name" Type="Quote">created</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::State</Data>
            <Data Key="name" Type="Quote">accepted</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::State</Data>
            <Data Key="name" Type="Quote">ready</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::State</Data>
            <Data Key="name" Type="Quote">in progress</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::State</Data>
            <Data Key="name" Type="Quote">closed</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::State</Data>
            <Data Key="name" Type="Quote">canceled</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::Type</Data>
            <Data Key="name" Type="Quote">approval</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::Type</Data>
            <Data Key="name" Type="Quote">workorder</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::Type</Data>
            <Data Key="name" Type="Quote">backout</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::Type</Data>
            <Data Key="name" Type="Quote">decision</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ChangeManagement::WorkOrder::Type</Data>
            <Data Key="name" Type="Quote">pir</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeCABUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeCABDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeLinkAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeLinkDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeAttachmentAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeAttachmentDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderLinkAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderLinkDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderAttachmentAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderAttachmentDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangePlannedStartTimeReached</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangePlannedEndTimeReached</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeActualStartTimeReached</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeActualEndTimeReached</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderPlannedStartTimeReached</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderPlannedEndTimeReached</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderActualStartTimeReached</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderActualEndTimeReached</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeRequestedTimeReached</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ConditionAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ConditionUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ConditionDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ConditionDeleteAll</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ExpressionAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ExpressionUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ExpressionDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ExpressionDeleteAll</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ActionAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ActionUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ActionDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ActionDeleteAll</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ActionExecute</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">ChangeNotificationSent</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type">
            <Data Key="name" Type="Quote">WorkOrderNotificationSent</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="ticket_type">
            <Data Key="name" Type="Quote">RfC</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="condition_object">
            <Data Key="name" Type="Quote">ITSMChange</Data>
        </Insert>
        <Insert Type="post" Table="condition_object">
            <Data Key="name" Type="Quote">ITSMWorkOrder</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">ChangeStateID</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">ChangeTitle</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">CategoryID</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">ImpactID</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">PriorityID</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">ChangeManagerID</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">ChangeBuilderID</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">RequestedTime</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">PlannedStartTime</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">PlannedEndTime</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">ActualStartTime</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">ActualEndTime</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">PlannedEffort</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">AccountedTime</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">WorkOrderNumber</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">WorkOrderStateID</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">WorkOrderTypeID</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">WorkOrderTitle</Data>
        </Insert>
        <Insert Type="post" Table="condition_attribute">
            <Data Key="name" Type="Quote">WorkOrderAgentID</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">is</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">is not</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">is empty</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">is not empty</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">is greater than</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">is less than</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">is before</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">is after</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">contains</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">not contains</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">begins with</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">ends with</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">set</Data>
        </Insert>
        <Insert Type="post" Table="condition_operator">
            <Data Key="name" Type="Quote">lock</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">ChangeBuilder</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">OldChangeBuilder</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">ChangeManager</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">OldChangeManager</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">CABCustomers</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">CABAgents</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">WorkOrderAgents</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">WorkOrderAgent</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">OldWorkOrderAgent</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">ChangeInitiators</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">GroupITSMChange</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">GroupITSMChangeBuilder</Data>
        </Insert>
        <Insert Type="post" Table="change_notification_grps">
            <Data Key="name" Type="Quote">GroupITSMChangeManager</Data>
        </Insert>
        <Insert Type="post" Table="change_template_type">
            <Data Key="name" Type="Quote">ITSMChange</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_template_type">
            <Data Key="name" Type="Quote">ITSMWorkOrder</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_template_type">
            <Data Key="name" Type="Quote">CAB</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_template_type">
            <Data Key="name" Type="Quote">ITSMCondition</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
    </DatabaseInstall>
    <DatabaseUpgrade Type="post">
        <Insert Type="post" Table="change_history_type" Version="1.3.93">
            <Data Key="name" Type="Quote">ChangeNotificationSent</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="change_history_type" Version="1.3.93">
            <Data Key="name" Type="Quote">WorkOrderNotificationSent</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
    </DatabaseUpgrade>
    <DatabaseUninstall Type="pre">
        <TableDrop Type="pre" Name="change_notification_rec">
        </TableDrop>
        <TableDrop Type="pre" Name="change_notification_grps">
        </TableDrop>
        <TableDrop Type="pre" Name="change_notification">
        </TableDrop>
        <TableDrop Type="pre" Name="change_cab">
        </TableDrop>
        <TableDrop Type="pre" Name="change_history">
        </TableDrop>
        <TableDrop Type="pre" Name="change_history_type">
        </TableDrop>
        <TableDrop Type="pre" Name="condition_expression">
        </TableDrop>
        <TableDrop Type="pre" Name="condition_action">
        </TableDrop>
        <TableDrop Type="pre" Name="condition_operator">
        </TableDrop>
        <TableDrop Type="pre" Name="condition_attribute">
        </TableDrop>
        <TableDrop Type="pre" Name="condition_object">
        </TableDrop>
        <TableDrop Type="pre" Name="change_condition">
        </TableDrop>
        <TableDrop Type="pre" Name="change_workorder">
        </TableDrop>
        <TableDrop Type="pre" Name="change_item">
        </TableDrop>
        <TableDrop Type="pre" Name="change_template">
        </TableDrop>
        <TableDrop Type="pre" Name="change_template_type">
        </TableDrop>
        <TableDrop Type="pre" Name="change_cip_allocate">
        </TableDrop>
        <TableDrop Type="pre" Name="change_state_machine">
        </TableDrop>
    </DatabaseUninstall>
</otrs_package>