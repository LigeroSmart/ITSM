<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>ITSMIncidentProblemManagement</Name>
    <Version>3.3.95</Version>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2014-10-31 12:28:39" Version="3.3.95">Build for OTRS::ITSM 4 beta5.</ChangeLog>
    <ChangeLog Date="2014-10-20 10:52:41" Version="3.3.94">Build for OTRS::ITSM 4 beta4.</ChangeLog>
    <ChangeLog Date="2014-10-02 17:47:05" Version="3.3.93">Build for OTRS::ITSM 4 beta3.</ChangeLog>
    <ChangeLog Date="2014-09-18 19:00:56" Version="3.3.92">Build for OTRS::ITSM 4 beta2.</ChangeLog>
    <ChangeLog Date="2014-09-04 00:28:08" Version="3.3.91">Build for OTRS::ITSM 4 beta1.</ChangeLog>
    <Description Lang="en">The OTRS::ITSM Incident and Problem Management package.</Description>
    <Description Lang="de">Das OTRS::ITSM Incident und Problem Management Paket.</Description>
    <Description Lang="es">Paquete Incident and Problem Management de OTRS::ITSM.</Description>
    <Framework>4.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to install the OTRS package ITSMIncidentProblemManagement.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;REQUIRED OTRS PACKAGES&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 3.3.95&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="de" Title="Installation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WILLKOMMEN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Sie sind im Begriff das OTRS-Paket ITSMIncidentProblemManagement zu installieren.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;BENÖTIGTE OTRS-PAKETE&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 3.3.95&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="es" Title="Información de Instalación" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;BIENVENIDO&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Usted esta apunto de instalar el paquete ITSMIncidentProblemManagement de OTRS.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;PAQUETES OTRS REQUERIDOS&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 3.3.95&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroUninstall Lang="en" Title="Uninstallation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;ATTENTION&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        If you uninstall this package, the ticket types and states that were added during installation will be deactivated.
        They can be activated again in the admin area.
        &lt;br/&gt;
        &lt;br/&gt;
        The statistics that are associated with this package, will no longer be available if the package is uninstalled.
        &lt;br/&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUninstall>
    <IntroUninstall Lang="de" Title="Uninstallation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;ACHTUNG&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Bei der Deinstallation werden die von diesem Paket angelegten Ticket-Typen und -Status deaktiviert.
        Diese können jederzeit im Admin-Bereich wieder aktiviert werden.
        &lt;br/&gt;
        &lt;br/&gt;
        Nach der Deinstallation sind die zu diesem Paket zugehörigen Statistiken nicht mehr verfügbar.
        &lt;br/&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUninstall>
    <IntroUninstall Lang="es" Title="Información de Desinstalación" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;ATTENTION&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Si usted desinstala este paquete, los tipos de ticket y estados que fueron agregados durante la instalación serán desactivados.
        Pueden ser activados de nuevo en el área de admin.
        &lt;br/&gt;
        &lt;br/&gt;
        Las estadísticas asociadas a este paquete no estarán disponibles si desinstala el paquete.
        &lt;br/&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUninstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to upgrade the OTRS package ITSMIncidentProblemManagement.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;REQUIRED OTRS PACKAGES&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 3.3.95&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUpgrade>
    <IntroUpgrade Lang="de" Title="Upgrade Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WILLKOMMEN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Sie sind im Begriff das OTRS-Paket ITSMIncidentProblemManagement zu aktualisieren.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;BENÖTIGTE OTRS-PAKETE&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 3.3.95&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUpgrade>
    <IntroUpgrade Lang="es" Title="Información de Actualización" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;BIENVENIDO&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Usted esta apunto de actualizar el paquete ITSMIncidentProblemManagement de OTRS.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;PAQUETES OTRS REQUERIDOS&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 3.3.95&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUpgrade>
    <PackageRequired Version="3.3.95">ITSMCore</PackageRequired>
    <CodeInstall Type="post">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeInstall();

    </CodeInstall>
    <CodeUpgrade Type="pre" Version="3.2.91">

        # uninstall Feature AddOn OTRSServiceIncidentState that has been integrated in OTRS::ITSM 3.2.91 (OTRS::ITSM 3.3.0 Beta 1)
        $Kernel::OM-&gt;Get('Kernel::System::Package')-&gt;_PackageUninstallMerged(
            Name =&gt; 'OTRSServiceIncidentState',
        );

    </CodeUpgrade>
    <CodeUpgrade Type="post" Version="3.2.91">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # discard internally stored object, so that the next access to object creates them newly
        $Kernel::OM-&gt;ObjectsDiscard(
            Objects            =&gt; [$CodeModule],
            ForcePackageReload =&gt; 1,
        );

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUpgradeFromLowerThan_3_2_91();

    </CodeUpgrade>
    <CodeUpgrade Type="post">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # discard internally stored object, so that the next access to object creates them newly
        $Kernel::OM-&gt;ObjectsDiscard(
            Objects            =&gt; [$CodeModule],
            ForcePackageReload =&gt; 1,
        );

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUpgrade();

    </CodeUpgrade>
    <CodeUninstall Type="pre">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUninstall();

    </CodeUninstall>
    <CodeUninstall Type="post">

        {
            # cleanup stats list
            $Kernel::OM-&gt;Get('Kernel::System::Stats')-&gt;StatsCleanUp();
        }

    </CodeUninstall>
    <CodeReinstall Type="post">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeReinstall();

    </CodeReinstall>
    <BuildDate>2014-10-31 12:28:39</BuildDate>
    <BuildHost>opms.otrs.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/ITSMTicket.xml" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Config/Files/TicketITSMTicket.xml" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/bg_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/cs_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/ct_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/da_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/de_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/es_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/fa_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/fr_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/it_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/ja_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/ms_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/nb_NO_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/nl_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/pl_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/pt_BR_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/pt_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/ru_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/zh_CN_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/zh_TW_ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentTicketActionCommon.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentTicketAddtlITSMField.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50VGlja2V0QWRkdGxJVFNNRmllbGQucG0gLSBhZGRpdGlvbmFsIGl0c20gZmllbGRzIGZvciB0aWNrZXQKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgojIC0tLQojIElUU00KIyAtLS0KI3BhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudFRpY2tldEZyZWVUZXh0OwpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRUaWNrZXRBZGR0bElUU01GaWVsZDsKCiMgLS0tCgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgYmFzZSBxdyggS2VybmVsOjpNb2R1bGVzOjpBZ2VudFRpY2tldEFjdGlvbkNvbW1vbiApOwoKMTsK</File>
        <File Location="Kernel/Modules/AgentTicketDecision.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50VGlja2V0RGVjaXNpb24ucG0gLSB0byBhZGQgbm90ZXMgKGRlY2lzaW9uKSB0byBhIHRpY2tldAojIENvcHlyaWdodCAoQykgMjAwMS0yMDE0IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpNb2R1bGVzOjpBZ2VudFRpY2tldERlY2lzaW9uOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIGJhc2UgcXcoIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRUaWNrZXRBY3Rpb25Db21tb24gKTsKCjE7Cg==</File>
        <File Location="Kernel/Modules/AgentTicketEmail.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentTicketPhone.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentTicketPrint.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentTicketZoom.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/CustomerTicketPrint.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AAAITSMIncidentProblemManagement.tt" Permission="644" Encode="Base64">IyAtLQojIEFBQUlUU01JbmNpZGVudFByb2JsZW1NYW5hZ2VtZW50LnR0IC0gJFRleHQgdmFyaWFibGUgZmlsZQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE0IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCiMgQ29tbW9uClslIFRyYW5zbGF0ZSgiQWRkIGRlY2lzaW9uIHRvIHRpY2tldCIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkRlY2lzaW9uIERhdGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJEZWNpc2lvbiBSZXN1bHQiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJEdWUgRGF0ZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlJlYXNvbiIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlJlY292ZXJ5IFN0YXJ0IFRpbWUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJSZXBhaXIgU3RhcnQgVGltZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlJldmlldyBSZXF1aXJlZCIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoImNsb3NlZCB3aXRoIHdvcmthcm91bmQiKSB8IGh0bWwgJV0K</File>
        <File Location="Kernel/Output/HTML/Standard/AgentTicketActionCommon.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentTicketAddtlITSMField.tt" Permission="644" Encode="Base64">IyAtLQojIEFnZW50VGlja2V0QWRkdGxJVFNNRmllbGQudHQgLSBwcm92aWRlcyBIVE1MIGZvcm0gZm9yIGZyZWUgdGV4dCBtYXNrCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTQgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKWyUgSW5zZXJ0VGVtcGxhdGUoIkFnZW50VGlja2V0QWN0aW9uQ29tbW9uLnR0IikgJV0K</File>
        <File Location="Kernel/Output/HTML/Standard/AgentTicketDecision.tt" Permission="644" Encode="Base64">IyAtLQojIEFnZW50VGlja2V0RGVjaXNpb24udHQgLSBwcm92aWRlcyBIVE1MIGZvcm0gZm9yIGRlY2lzaW9uIG1hc2sKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNCBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyAkb3JpZ2luOiBodHRwczovL2dpdGh1Yi5jb20vT1RSUy9vdHJzL2Jsb2IvMzYwOGI2MDYyNTlhY2U2MWZlZGJiODJmOTQyNzNkNmFiZWZjNjk3Mi9LZXJuZWwvT3V0cHV0L0hUTUwvU3RhbmRhcmQvQWdlbnRUaWNrZXROb3RlLnR0CiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpbJSBJbnNlcnRUZW1wbGF0ZSgiQWdlbnRUaWNrZXRBY3Rpb25Db21tb24udHQiKSAlXQo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentTicketEmail.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentTicketOverviewMedium.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentTicketOverviewPreview.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentTicketPhone.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentTicketPrint.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentTicketZoom.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/CustomerTicketPrint.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/CustomerTicketZoom.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/TicketOverviewMedium.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/TicketOverviewPreview.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Stats/Dynamic/ITSMTicketFirstLevelSolutionRate.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Stats/Dynamic/ITSMTicketSolutionTimeAverage.pm" Permission="644" Encode="Base64"></File>
        <File Location="var/packagesetup/ITSMIncidentProblemManagement.pm" Permission="644" Encode="Base64"></File>
    </Filelist>
    <DatabaseInstall Type="post">
        <Insert Type="post" Table="ticket_state">
            <Data Key="name" Type="Quote">closed with workaround</Data>
            <Data Key="comments" Type="Quote">ticket is closed with workaround</Data>
            <Data Key="type_id">3</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="ticket_type">
            <Data Key="name" Type="Quote">Incident</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="ticket_type">
            <Data Key="name" Type="Quote">Incident::Major</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="ticket_type">
            <Data Key="name" Type="Quote">ServiceRequest</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="ticket_type">
            <Data Key="name" Type="Quote">Problem</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
    </DatabaseInstall>
</otrs_package>